const _ = require('lodash'); // eslint-disable-line no-unused-vars
const replaceInFiles = require('../index.js');

const files = [
  // '/home/wj42/work/training/replace-in-files/src/sandbox/index.js'
  '/home/wj42/work/ibc/platform_mice/tests/*.test.js'
];
const optionsForFiles = {};

// const from = / *const (.*) = loopback\.getModel\((.*)\);.*\s *const (.*) = \1.create\((.*)\);.*/gm;
const from = /.*\(done\) => {[\s\S]*?\.catch\(helpers\.handleLoopbackErr\(done\)\);.*\s.*/gm;
// const from = /.*\(done\) => {[\s\S]*?\.catch\(helpers\.handleLoopbackErr\(done\)\);.*/gm;

// }).catch(helpers.handleLoopbackErr(done));
// const from = new RegExp([
//   '.*, \(done\) => {'
// ].join(''), 'gm');

// / *const (.*) = loopback\.getModel\((.*)\);.*\s *const (.*) = \1.create\((.*)\);.*/gm;


// function to(
//   match,
//   offset,
//   file,
//   pathToFile
// ) {
//   // console.log('|42| ->    match', match);
//   // console.log('|42| ->    offset', offset);
//   // console.log('|42| ->    file', file);
//   // console.log('|42| ->    pathToFile', pathToFile);

//   const tmp = match.replace('co(function* () {\n', '');
//   let result = tmp.split('\n');
//   result[0] = result[0].replace('(done) => {', 'reqs.g(function* () {');


//   if (result[result.length - 2].trim() === 'done();') {
//     result[result.length - 2] = null;
//   }
//   console.log('|42| result[result.length - 1] ->    ', result[result.length - 1]);
//   if (result[result.length - 1].includes('}).catch(helpers.handleLoopbackErr(done));')) {
//     result[result.length - 1] = result[result.length - 1].replace('}).catch(helpers.handleLoopbackErr(done));', '})');
//   }

//   result = result.filter(Boolean).join('\n');
//   console.log('|42| result ->    ', result);

//   return result;
//   // return `const ${p3} = createModel(${p2}, ${p4});`;
// }


function to(
  match,
  offset,
  file,
  pathToFile
) {
  // console.log('|42| ->    match', match);
  // console.log('|42| ->    offset', offset);
  // console.log('|42| ->    file', file);
  // console.log('|42| ->    pathToFile', pathToFile);
  let result = match.split('\n');
  result[0] = result[0].replace('(done) => {', 'reqs.g(function* () {');


  for (let i = 0; i < result.length; i++) {
    if (result[i].trim() === 'done();') {
      result[i] = '';
    }
    if (result[i].includes('co(function* () {')) {
      result[i] = '';
    }
  }

  console.log('|42| result[result.length - 1] ->    ', result[result.length - 1]);
  if (result[result.length - 2].includes('}).catch(helpers.handleLoopbackErr(done));')) {
    result[result.length - 2] = result[result.length - 2].replace('}).catch(helpers.handleLoopbackErr(done));', '}));');
  }
  result[result.length - 1] = '';

  result = result.filter(Boolean).join('\n');
  console.log('|42| result ->    ', result);

  return result;
  // return `const ${p3} = createModel(${p2}, ${p4});`;
}


const from2 = /.*function \(done\) {[\s\S]*?\.catch\(helpers\.handleLoopbackErr\(done\)\);.*\s.*/gm;
function to2(
  match,
  offset,
  file,
  pathToFile
) {
  // console.log('|42| ->    match', match);
  // console.log('|42| ->    offset', offset);
  // console.log('|42| ->    file', file);
  // console.log('|42| ->    pathToFile', pathToFile);
  let result = match.split('\n');
  result[0] = result[0].replace('function (done) {', 'reqs.g(function* () {');
  const matchedTimeout = result[1].match(/this.timeout\((\d+)\)/);
  let timeout;
  if (matchedTimeout) {
    [, timeout] = matchedTimeout;
  }
  if (timeout) {
    result[1] = '';
  }

  let ending = '}));';
  if (timeout) {
    ending = `}, ${timeout}));`;
  }


  for (let i = 0; i < result.length; i++) {
    if (result[i].trim() === 'done();') {
      result[i] = '';
    }
    if (result[i].includes('co(function* () {')) {
      result[i] = '';
    }
  }

  console.log('|42| result[result.length - 1] ->    ', result[result.length - 1]);
  if (result[result.length - 2].includes('}).catch(helpers.handleLoopbackErr(done));')) {
    result[result.length - 2] = result[result.length - 2].replace('}).catch(helpers.handleLoopbackErr(done));', ending);
  }
  result[result.length - 1] = '';

  result = result.filter(Boolean).join('\n');
  console.log('|42| result ->    ', result);

  return result;
}
console.log('start!');
async function main() {
  // await replaceInFiles({
  //   files,
  //   optionsForFiles,
  //   from,
  //   to,
  // });
  await replaceInFiles({
    files,
    optionsForFiles,
    from: from2,
    to: to2,
  });
  console.log('finish!');
}

main();
