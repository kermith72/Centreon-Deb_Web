const _ = require('lodash'); // eslint-disable-line no-unused-vars
const replaceInFiles = require('../index.js');

const files = [
  '/home/wj42/work/training/replace-in-files/src/sandbox/index.js'
];
const optionsForFiles = {};

// const from = / *const (.*) = loopback\.getModel\((.*)\);.*\s *const (.*) = \1.create\((.*)\);.*/gm;
const from = /.*\(done\) => {[\s\S]*?\.catch\(helpers\.handleLoopbackErr\(done\)\);.*/gm;
// const from = /.*\(done\) => {[\s\S]*done();.*\s.*\.catch\(helpers\.handleLoopbackErr\(done\)\);.*/gm;

// }).catch(helpers.handleLoopbackErr(done));
// const from = new RegExp([
//   '.*, \(done\) => {'
// ].join(''), 'gm');

// / *const (.*) = loopback\.getModel\((.*)\);.*\s *const (.*) = \1.create\((.*)\);.*/gm;

function to(
  match,
  offset,
  file,
  pathToFile
) {
  console.log('|42| ->    match', match);
  // console.log('|42| ->    offset', offset);
  // console.log('|42| ->    file', file);
  // console.log('|42| ->    pathToFile', pathToFile);

  let result = match.split('\n');

  if (result[result.length - 2].trim() === 'done();') {
    result = result.splice(result, result.length - 2, 1);
  }
  console.log('|42| result ->    ', result.join('\n'));

  return match;
  // return `const ${p3} = createModel(${p2}, ${p4});`;
}


console.log('start!');
async function main() {
  await replaceInFiles({
    files,
    optionsForFiles,
    from,
    to,
  });
  console.log('finish!');
}

main();
