"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _inputMultiSelect = _interopRequireDefault(require("./input-multi-select.scss"));

var _Checkbox = _interopRequireDefault(require("../../Checkbox"));

var _IconToggleSubmenu = _interopRequireDefault(require("../../Icon/IconToggleSubmenu"));

var _ScrollBar = _interopRequireDefault(require("../../ScrollBar"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var InputFieldMultiSelect =
/*#__PURE__*/
function (_Component) {
  _inherits(InputFieldMultiSelect, _Component);

  function InputFieldMultiSelect() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, InputFieldMultiSelect);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(InputFieldMultiSelect)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "state", {
      active: false,
      allOptions: [],
      options: [],
      activeOptions: {}
    });

    _defineProperty(_assertThisInitialized(_this), "componentWillReceiveProps", function (nextProps) {
      var options = nextProps.options,
          value = nextProps.value;
      var activeOptions = {};

      if (value) {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = value[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var val = _step.value;
            activeOptions[val] = true;
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      }

      if (options) {
        _this.setState({
          options: options,
          allOptions: options,
          activeOptions: activeOptions
        });
      }
    });

    _defineProperty(_assertThisInitialized(_this), "componentWillMount", function () {
      var _this$props = _this.props,
          options = _this$props.options,
          value = _this$props.value;
      var activeOptions = {};

      if (value) {
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = value[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var val = _step2.value;
            activeOptions[val] = true;
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }
      }

      if (options) {
        _this.setState({
          options: options,
          allOptions: options,
          activeOptions: activeOptions
        });
      }
    });

    _defineProperty(_assertThisInitialized(_this), "searchTextChanged", function (e) {
      var searchString = e.target.value;
      var allOptions = _this.state.allOptions;

      _this.setState({
        options: allOptions.filter(function (option) {
          return String(option.name).toLowerCase().indexOf(String(searchString).toLowerCase()) > -1;
        })
      });
    });

    _defineProperty(_assertThisInitialized(_this), "toggleSelect", function () {
      var active = _this.state.active;

      _this.setState({
        active: !active
      });
    });

    _defineProperty(_assertThisInitialized(_this), "optionChecked", function (option) {
      var activeOptions = _this.state.activeOptions;
      var onChange = _this.props.onChange;
      activeOptions[option.id] = activeOptions[option.id] ? false : true;

      _this.setState({
        activeOptions: activeOptions
      }, function () {
        if (onChange) {
          var activeIds = [];

          for (var key in activeOptions) {
            if (activeOptions[key]) {
              activeIds.push(key);
            }
          }

          onChange(activeIds);
        }
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleClickOutside", function (e) {
      if (!_this.multiselect || _this.multiselect.contains(e.target)) {
        return;
      }

      _this.setState({
        active: false
      });
    });

    return _this;
  }

  _createClass(InputFieldMultiSelect, [{
    key: "UNSAFE_componentWillMount",
    value: function UNSAFE_componentWillMount() {
      window.addEventListener('mousedown', this.handleClickOutside, false);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      window.removeEventListener('mousedown', this.handleClickOutside, false);
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$state = this.state,
          active = _this$state.active,
          options = _this$state.options,
          activeOptions = _this$state.activeOptions;
      var _this$props2 = this.props,
          size = _this$props2.size,
          error = _this$props2.error;
      return _react.default.createElement("div", {
        className: (0, _classnames.default)(_inputMultiSelect.default["multi-select"], _inputMultiSelect.default[size ? size : ''], _inputMultiSelect.default[active ? 'active' : ''], error ? _inputMultiSelect.default['has-danger'] : ''),
        ref: function ref(multiselect) {
          return _this2.multiselect = multiselect;
        }
      }, _react.default.createElement("div", {
        className: (0, _classnames.default)(_inputMultiSelect.default["multi-select-wrap"])
      }, _react.default.createElement("input", {
        onChange: this.searchTextChanged,
        className: (0, _classnames.default)(_inputMultiSelect.default["multi-select-input"]),
        type: "text",
        placeholder: "Search",
        onFocus: function onFocus() {
          _this2.setState({
            active: true
          });
        }
      }), _react.default.createElement(_IconToggleSubmenu.default, {
        iconPosition: "icons-toggle-position-multiselect",
        iconType: "arrow",
        onClick: this.toggleSelect.bind(this)
      })), active ? _react.default.createElement("div", {
        className: (0, _classnames.default)(_inputMultiSelect.default["multi-select-dropdown"])
      }, options ? options.map(function (option, index) {
        return _react.default.createElement(_Checkbox.default, {
          key: "multiselect-checkbox-".concat(index),
          label: option.name,
          onClick: _this2.optionChecked.bind(_this2, option),
          iconColor: "green",
          onChange: function onChange() {},
          checked: activeOptions[option.id] || false
        });
      }) : null) : null, error ? _react.default.createElement("div", {
        className: (0, _classnames.default)(_inputMultiSelect.default["form-error"])
      }, error) : null);
    }
  }]);

  return InputFieldMultiSelect;
}(_react.Component);

var _default = InputFieldMultiSelect;
exports.default = _default;