"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _fileUpload = _interopRequireDefault(require("./file-upload.scss"));

var _ButtonRegular = _interopRequireDefault(require("../Button/ButtonRegular"));

var _Popup = _interopRequireDefault(require("../Popup"));

var _FileUploadItem = _interopRequireDefault(require("./FileUploadItem"));

var _IconClose = _interopRequireDefault(require("../Icon/IconClose"));

var _reactFiles = _interopRequireDefault(require("react-files"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var FileUpload =
/*#__PURE__*/
function (_Component) {
  _inherits(FileUpload, _Component);

  function FileUpload() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, FileUpload);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(FileUpload)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "state", {
      files: []
    });

    _defineProperty(_assertThisInitialized(_this), "onFilesChange", function (files) {
      _this.setState({
        files: files
      });
    });

    _defineProperty(_assertThisInitialized(_this), "onFilesError", function (error) {
      console.log("error code " + error.code + ": " + error.message);
    });

    _defineProperty(_assertThisInitialized(_this), "onRemoveFile", function (idx) {
      var files = _this.state.files;
      files.splice(idx, 1);

      _this.setState({
        files: files
      });
    });

    return _this;
  }

  _createClass(FileUpload, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var files = this.state.files;
      var _this$props = this.props,
          uploadingProgress = _this$props.uploadingProgress,
          uploadStatus = _this$props.uploadStatus,
          onClose = _this$props.onClose,
          uploading = _this$props.uploading,
          onApply = _this$props.onApply,
          finished = _this$props.finished;
      var isSuccessfull = true;

      if (uploadStatus && !uploadStatus.status) {
        isSuccessfull = false;
      }

      return _react.default.createElement(_react.default.Fragment, null, _react.default.createElement(_Popup.default, {
        popupType: "small"
      }, _react.default.createElement("div", {
        className: (0, _classnames.default)(_fileUpload.default["popup-header"], _fileUpload.default[isSuccessfull ? "blue-background-decorator" : "red-background-decorator"])
      }, _react.default.createElement("div", {
        className: (0, _classnames.default)(_fileUpload.default["container__row"])
      }, _react.default.createElement("div", {
        className: (0, _classnames.default)(_fileUpload.default["container__col-xs-6"], _fileUpload.default["center-vertical"], _fileUpload.default["m-0"])
      }, _react.default.createElement("div", {
        className: (0, _classnames.default)(_fileUpload.default.file, _fileUpload.default["file-upload"])
      }, _react.default.createElement("span", {
        className: (0, _classnames.default)(_fileUpload.default["file-upload-title"])
      }, _react.default.createElement("span", {
        className: (0, _classnames.default)(_fileUpload.default["file-upload-icon"], _fileUpload.default.white)
      }), isSuccessfull ? "File Upload" : "No valid file uploaded."))), !finished ? _react.default.createElement("div", {
        className: (0, _classnames.default)(_fileUpload.default["container__col-xs-6"], _fileUpload.default["center-vertical"], _fileUpload.default["m-0"])
      }, _react.default.createElement(_reactFiles.default, {
        className: (0, _classnames.default)("test"),
        onChange: this.onFilesChange,
        onError: this.onFilesError,
        accepts: ['.zip', '.license'],
        multiple: true,
        maxFiles: 5,
        maxFileSize: 1048576,
        minFileSize: 0,
        clickable: true
      }, _react.default.createElement("div", {
        className: (0, _classnames.default)(_fileUpload.default["container__col-xs-6"], _fileUpload.default["text-right"])
      }, _react.default.createElement(_ButtonRegular.default, {
        buttonType: "bordered",
        color: "white",
        label: "BROWSE"
      })))) : null), _react.default.createElement("span", {
        className: (0, _classnames.default)(_fileUpload.default["icon-close"], _fileUpload.default["icon-close-middle"]),
        onClick: onClose
      })), files.length > 0 ? _react.default.createElement("div", {
        className: (0, _classnames.default)(_fileUpload.default["popup-body"])
      }, _react.default.createElement("div", {
        className: (0, _classnames.default)(_fileUpload.default.file, _fileUpload.default["file-upload"], _fileUpload.default["file-upload-body-container"])
      }, _react.default.createElement("div", {
        className: (0, _classnames.default)(_fileUpload.default["file-upload-items"])
      }, !uploadStatus ? files.map(function (file, idx) {
        return _react.default.createElement(_FileUploadItem.default, {
          icon: file.extension === "zip" ? "zip" : "file",
          iconStatus: uploading ? "percentage" : "warning",
          title: file.name,
          titleStatus: uploading ? "percentage" : "warning",
          infoStatus: uploading ? "percentage" : "warning",
          progressBar: uploading ? "percentage" : "",
          progressPercentage: uploadingProgress[idx] ? uploadingProgress[idx] : 0,
          info: file.sizeReadable,
          onDeleteFile: function onDeleteFile() {
            _this2.onRemoveFile(idx);
          },
          uploading: uploading
        });
      }) : _react.default.createElement(_react.default.Fragment, null, uploadStatus.result.successed.map(function (_ref) {
        var license = _ref.license;
        return _react.default.createElement(_FileUploadItem.default, {
          icon: "file",
          iconStatus: "success",
          title: license,
          titleStatus: "success",
          infoStatus: "success",
          progressBar: "success",
          progressPercentage: 100,
          uploading: true
        });
      }), uploadStatus.result.errors.map(function (_ref2) {
        var license = _ref2.license,
            message = _ref2.message;
        return _react.default.createElement(_FileUploadItem.default, {
          icon: "file",
          iconStatus: "error",
          title: license,
          titleStatus: "error",
          infoStatus: "error",
          progressBar: "error",
          progressPercentage: 100,
          message: message,
          uploading: true
        });
      }))), !finished ? _react.default.createElement(_ButtonRegular.default, {
        label: "Apply",
        buttonType: uploading ? "bordered" : "regular",
        color: uploading ? "gray" : "blue",
        onClick: function onClick() {
          if (!uploading) {
            onApply(files);
          }
        }
      }) : _react.default.createElement(_ButtonRegular.default, {
        label: "Ok",
        buttonType: "regular",
        color: "green",
        onClick: onClose
      }))) : null, _react.default.createElement(_IconClose.default, {
        iconPosition: "icon-close-position-small",
        iconType: "middle",
        onClick: onClose
      })));
    }
  }]);

  return FileUpload;
}(_react.Component);

var _default = FileUpload;
exports.default = _default;