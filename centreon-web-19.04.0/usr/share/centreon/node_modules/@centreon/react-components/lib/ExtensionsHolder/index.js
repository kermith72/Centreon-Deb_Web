"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _card = _interopRequireDefault(require("../Card/card.scss"));

var _Wrapper = _interopRequireDefault(require("../Wrapper"));

var _HorizontalLineContent = _interopRequireDefault(require("../HorizontalLines/HorizontalLineContent"));

var _Card = _interopRequireDefault(require("../Card"));

var _CardItem = _interopRequireDefault(require("../Card/CardItem"));

var _IconInfo = _interopRequireDefault(require("../Icon/IconInfo"));

var _Title = _interopRequireDefault(require("../Title"));

var _Subtitle = _interopRequireDefault(require("../Subtitle"));

var _ButtonRegular = _interopRequireDefault(require("../Button/ButtonRegular"));

var _IconContent = _interopRequireDefault(require("../Icon/IconContent"));

var _ButtonAction = _interopRequireDefault(require("../Button/ButtonAction"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var ExtensionsHolder =
/*#__PURE__*/
function (_React$Component) {
  _inherits(ExtensionsHolder, _React$Component);

  function ExtensionsHolder() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, ExtensionsHolder);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ExtensionsHolder)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "parseDescription", function (description) {
      return description.replace(/^centreon\s+(\w+)/i, function (_, $1) {
        return $1;
      });
    });

    _defineProperty(_assertThisInitialized(_this), "getPropsFromLicense", function (licenseInfo) {
      var licenseProps = {};

      if (licenseInfo && licenseInfo.required) {
        if (!licenseInfo.expiration_date) {
          licenseProps = {
            itemFooterColor: "red",
            itemFooterLabel: "License is not valid"
          };
        } else if (!isNaN(Date.parse(licenseInfo.expiration_date))) {
          // @todo move this logic to centreon. Furthermore, it will facilitate translation
          // @todo use moment to convert date in the proper format (locale and timezone from user)
          var expirationDate = new Date(licenseInfo.expiration_date);
          licenseProps = {
            itemFooterColor: "green",
            itemFooterLabel: "License is valid until : ".concat(expirationDate.toISOString().slice(0, 10))
          };
        } else {
          licenseProps = {
            itemFooterColor: "red",
            itemFooterLabel: "Cannot get license expiration date"
          };
        }
      }

      return licenseProps;
    });

    return _this;
  }

  _createClass(ExtensionsHolder, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          title = _this$props.title,
          entities = _this$props.entities,
          onCardClicked = _this$props.onCardClicked,
          onDelete = _this$props.onDelete,
          titleColor = _this$props.titleColor,
          hrColor = _this$props.hrColor,
          hrTitleColor = _this$props.hrTitleColor,
          onInstall = _this$props.onInstall,
          onUpdate = _this$props.onUpdate,
          updating = _this$props.updating,
          installing = _this$props.installing,
          type = _this$props.type;
      return _react.default.createElement(_Wrapper.default, null, _react.default.createElement(_HorizontalLineContent.default, {
        hrColor: hrColor,
        hrTitleColor: hrTitleColor,
        hrTitle: title
      }), _react.default.createElement(_Card.default, null, _react.default.createElement("div", null, entities.map(function (entity) {
        return _react.default.createElement("div", {
          id: "".concat(type, "-").concat(entity.id),
          onClick: function onClick() {
            onCardClicked(entity.id, type);
          },
          className: _card.default["card-inline"]
        }, _react.default.createElement(_CardItem.default, _extends({
          itemBorderColor: entity.version.installed ? !entity.version.outdated ? "green" : "orange" : "gray"
        }, _this2.getPropsFromLicense(entity.license)), entity.version.installed ? _react.default.createElement(_IconInfo.default, {
          iconPosition: "info-icon-position",
          iconName: "state",
          iconColor: "green"
        }) : null, _react.default.createElement(_Title.default, {
          labelStyle: {
            fontSize: "16px"
          },
          titleColor: titleColor,
          label: _this2.parseDescription(entity.description),
          title: entity.description
        }, _react.default.createElement(_Subtitle.default, {
          label: "by ".concat(entity.label)
        })), _react.default.createElement(_ButtonRegular.default, {
          onClick: function onClick(e) {
            e.preventDefault();
            e.stopPropagation();
            var id = entity.id;
            var version = entity.version;

            if (version.outdated && !updating[entity.id]) {
              onUpdate(id, type);
            } else if (!version.installed && !installing[entity.id]) {
              onInstall(id, type);
            }
          },
          customClass: "button-card-position",
          style: {
            opacity: installing[entity.id] || updating[entity.id] ? "0.5" : "inherit",
            cursor: entity.version.installed ? "default" : "pointer"
          },
          buttonType: entity.version.installed ? entity.version.outdated ? "regular" : "bordered" : "regular",
          color: entity.version.installed ? entity.version.outdated ? "orange" : "blue" : "green",
          label: (!entity.version.installed ? 'Available ' : '') + entity.version.available
        }, !entity.version.installed ? _react.default.createElement(_IconContent.default, {
          iconContentColor: "white",
          iconContentType: "".concat(installing[entity.id] ? "update" : "add"),
          loading: installing[entity.id],
          customClass: "content-icon-button"
        }) : entity.version.outdated ? _react.default.createElement(_IconContent.default, {
          iconContentColor: "white",
          iconContentType: "update",
          loading: updating[entity.id],
          customClass: "content-icon-button"
        }) : null), entity.version.installed ? _react.default.createElement(_ButtonAction.default, {
          buttonActionType: "delete",
          buttonIconType: "delete",
          customPosition: "button-action-card-position",
          iconColor: "gray",
          onClick: function onClick(e) {
            e.preventDefault();
            e.stopPropagation();
            onDelete(entity, type);
          }
        }) : null));
      }))));
    }
  }]);

  return ExtensionsHolder;
}(_react.default.Component);

var _default = ExtensionsHolder;
exports.default = _default;