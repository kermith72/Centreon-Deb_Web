"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _pagination = _interopRequireDefault(require("./pagination.scss"));

var _IconAction = _interopRequireDefault(require("../Icon/IconAction"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Pagination =
/*#__PURE__*/
function (_Component) {
  _inherits(Pagination, _Component);

  function Pagination() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, Pagination);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Pagination)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "state", {
      currentPage: 0
    });

    _defineProperty(_assertThisInitialized(_this), "previousPage", function () {
      var currentPage = _this.state.currentPage;
      console.log(currentPage);

      if (currentPage > 0) {
        _this.pageChanged(currentPage - 1);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "nextPage", function () {
      var pageCount = _this.props.pageCount;
      var currentPage = _this.state.currentPage;
      console.log(pageCount, currentPage);

      if (currentPage < pageCount - 1) {
        _this.pageChanged(currentPage + 1);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "pageChanged", function (page) {
      var onPageChange = _this.props.onPageChange;

      _this.setState({
        currentPage: page
      }, function () {
        onPageChange(page);
      });
    });

    _defineProperty(_assertThisInitialized(_this), "renderPages", function (count) {
      var currentPage = _this.state.currentPage;
      var pages = [];

      for (var i = 0; i < count; i++) {
        pages.push(_react.default.createElement("a", {
          key: 'paginationPage' + i,
          onClick: _this.pageChanged.bind(_assertThisInitialized(_this), i),
          className: (0, _classnames.default)(i === currentPage ? _pagination.default["active"] : "")
        }, i + 1));
      }

      return _react.default.createElement(_react.default.Fragment, null, pages);
    });

    return _this;
  }

  _createClass(Pagination, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          pageCount = _this$props.pageCount,
          onPageChange = _this$props.onPageChange;
      var currentPage = this.state.currentPage;

      if (!onPageChange || !pageCount) {
        return null;
      }

      return _react.default.createElement("div", {
        className: (0, _classnames.default)(_pagination.default.pagination)
      }, _react.default.createElement("a", {
        onClick: this.pageChanged.bind(this, 0)
      }, "First"), _react.default.createElement(_IconAction.default, {
        iconActionType: "arrow-right",
        onClick: this.previousPage.bind(this)
      }), this.renderPages(pageCount), _react.default.createElement(_IconAction.default, {
        iconActionType: "arrow-right",
        onClick: this.nextPage.bind(this)
      }), _react.default.createElement("a", {
        onClick: this.pageChanged.bind(this, pageCount - 1)
      }, "Last"));
    }
  }]);

  return Pagination;
}(_react.Component);

var _default = Pagination;
exports.default = _default;