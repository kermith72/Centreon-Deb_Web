#!/usr/bin/perl

# This chunk of stuff was generated by App::FatPacker. To find the original
# file's code, look for the end of this BEGIN block or the string 'FATPACK'
BEGIN {
my %fatpacked;

$fatpacked{"centreon/plugins/alternative/FatPackerOptions.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'CENTREON_PLUGINS_ALTERNATIVE_FATPACKEROPTIONS';
  #
  # Copyright 2019 Centreon (http://www.centreon.com/)
  #
  # Centreon is a full-fledged industry-strength solution that meets
  # the needs in IT infrastructure and application monitoring for
  # service performance.
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  #
  
  package centreon::plugins::alternative::FatPackerOptions;
  
  use base qw(centreon::plugins::options);
  
  use strict;
  use warnings;
  use Pod::Usage;
  
  sub new {
      my ($class, %options) = @_;
      my $self = $class->SUPER::new(package => __PACKAGE__, %options);
      bless $self, $class;
      
      return $self;
  }
  
  sub display_help {
      my ($self, %options) = @_;
      
      my $stdout;
      foreach (@{$self->{pod_package}}) {
          
          {
              my $pp = $_->{package} . ".pm";
              $pp =~ s{::}{/}g;
              my $content_class = $INC{$pp}->{$pp};
              open my $str_fh, '<', \$content_class;
              
              local *STDOUT;
              open STDOUT, '>', \$stdout;
              pod2usage(-exitval => 'NOEXIT', -input => $str_fh,
                        -verbose => 99, 
                        -sections => $_->{sections});
              
              close $str_fh;
          }
          
          $self->{output}->add_option_msg(long_msg => $stdout) if (defined($stdout));
      }
  }
  
  1;
  
CENTREON_PLUGINS_ALTERNATIVE_FATPACKEROPTIONS

$fatpacked{"centreon/plugins/alternative/Getopt.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'CENTREON_PLUGINS_ALTERNATIVE_GETOPT';
  #
  # Copyright 2019 Centreon (http://www.centreon.com/)
  #
  # Centreon is a full-fledged industry-strength solution that meets
  # the needs in IT infrastructure and application monitoring for
  # service performance.
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  #
  
  package centreon::plugins::alternative::Getopt;
  
  use strict;
  use warnings;
  
  use Exporter;
  use vars qw(@ISA @EXPORT @EXPORT_OK);
  @ISA = qw(Exporter);
  
  BEGIN {
      @EXPORT    = qw(&GetOptions);
      @EXPORT_OK = qw();
  }
  
  use vars @EXPORT, @EXPORT_OK;
  
  our $warn_message = 0;
  
  sub get_assigned_value {
      my (%options) = @_;
      
      if (!defined($options{val}) || $options{val} eq '') {
          # Add defined also. Hardened code: already see: $ARGV[6] = undef for example
          if ($options{pos} + 1 < $options{num_args} && defined($ARGV[$options{pos} + 1]) && $ARGV[$options{pos} + 1] !~ /^--/) {
              my $val = $ARGV[$options{pos} + 1];
              splice @ARGV, $options{pos} + 1, 1;
              return ($options{num_args} - 1, $val);
          } else {
              return ($options{num_args}, '');
          }
      }
      
      return ($options{num_args}, $options{val});
  }
  
  sub GetOptions {
      my (%opts) = @_;
      
      my $search_str = ',' . join(',', keys %opts) . ',';
      my $num_args = scalar(@ARGV);
      for (my $i = 0; $i < $num_args;) {
          if (defined($ARGV[$i]) && $ARGV[$i] =~ /^--(.*?)(?:=|$)(.*)/) {
              my ($option, $value) = ($1, $2);
              
              # find type of option
              if ($search_str !~ /,((?:[^,]*?\|){0,}$option(?:\|.*?){0,}(:.*?){0,1}),/) {
                  warn "Unknown option: $option" if ($warn_message == 1);
                  $i++;
                  next;
              }
              
              my ($option_selected, $type_opt) = ($1, $2);
              if (!defined($type_opt)) {
                  ${$opts{$option_selected}} = 1;
              } elsif ($type_opt =~ /:s$/) {
                  ($num_args, my $assigned) = get_assigned_value(num_args => $num_args, pos => $i, val => $value);
                  ${$opts{$option_selected}} = $assigned;
              } elsif ($type_opt =~ /:s\@$/) {
                  ${$opts{$option . $type_opt}} = [] if (!defined(${$opts{$option . $type_opt}}));
                  ($num_args, my $assigned) = get_assigned_value(num_args => $num_args, pos => $i, val => $value);
                  push @{${$opts{$option_selected}}}, $assigned;
              } elsif ($type_opt =~ /:s\%$/) {
                  ${$opts{$option . $type_opt}} = {} if (!defined(${$opts{$option . $type_opt}}));
                  ($num_args, my $assigned) = get_assigned_value(num_args => $num_args, pos => $i, val => $value);
                  if ($assigned =~ /^(.*?)=(.*)/) {
                      ${$opts{$option_selected}}->{$1} = $2;
                  }
              } 
              
              splice @ARGV, $i, 1;
              $num_args--;
          } else {
              warn "argument $ARGV[$i] alone" if ($warn_message == 1 && $i != 0 && defined($ARGV[$i]));
              $i++;
          }
      }
  }
  
  1;
  
CENTREON_PLUGINS_ALTERNATIVE_GETOPT

$fatpacked{"centreon/plugins/misc.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'CENTREON_PLUGINS_MISC';
  #
  # Copyright 2019 Centreon (http://www.centreon.com/)
  #
  # Centreon is a full-fledged industry-strength solution that meets
  # the needs in IT infrastructure and application monitoring for
  # service performance.
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  #
  
  package centreon::plugins::misc;
  
  use strict;
  use warnings;
  use utf8;
  
  sub execute {
      my (%options) = @_;
      
      if ($^O eq 'MSWin32') {
          return windows_execute(%options, timeout => $options{options}->{timeout});
      } else {
          return unix_execute(%options);
      }
  }
  
  sub windows_execute {
      my (%options) = @_;
      my $result;
      my ($stdout, $pid, $ended) = ('');
      my ($exit_code, $cmd);
      
      $cmd = $options{command_path} . '/' if (defined($options{command_path}));
      $cmd .= $options{command} . ' ' if (defined($options{command}));
      $cmd .= $options{command_options} if (defined($options{command_options}));
      
      centreon::plugins::misc::mymodule_load(output => $options{output}, module => 'Win32::Job',
                                             error_msg => "Cannot load module 'Win32::Job'.");
      centreon::plugins::misc::mymodule_load(output => $options{output}, module => 'Time::HiRes',
                                             error_msg => "Cannot load module 'Time::HiRes'.");
      
      $| = 1;
      pipe FROM_CHILD, TO_PARENT or do {
          $options{output}->add_option_msg(short_msg => "Internal error: can't create pipe from child to parent: $!");
          $options{output}->option_exit();
      };
      my $job = Win32::Job->new;
      my $stderr = 'NUL';
      $stderr = \*TO_PARENT if ($options{output}->is_debug());
      if (!($pid = $job->spawn(undef, $cmd,
                         { stdin => 'NUL',
                           stdout => \*TO_PARENT,
                           stderr => $stderr }))) {
          $options{output}->add_option_msg(short_msg => "Internal error: execution issue: $^E");
          $options{output}->option_exit();
      }
      close TO_PARENT;
  
      my $ein = '';
      vec($ein, fileno(FROM_CHILD), 1) = 1;
      $job->watch(
          sub {            
              my ($buffer);
              my $time = $options{timeout};
              my $last_time = Time::HiRes::time();
              $ended = 0;
              while (select($ein, undef, undef, $options{timeout})) {
                  if (sysread(FROM_CHILD, $buffer, 16384)) {
                      $buffer =~ s/\r//g;
                      $stdout .= $buffer;
                  } else {
                      $ended = 1;
                      last;
                  }
                  $options{timeout} -= Time::HiRes::time() - $last_time;
                  last if ($options{timeout} <= 0);         
                  $last_time = Time::HiRes::time();
              }
              return 1 if ($ended == 0);
              return 0;
          },
          0.1
      );
          
      $result = $job->status;
      close FROM_CHILD;    
      
      if ($ended == 0) {
          $options{output}->add_option_msg(short_msg => 'Command too long to execute (timeout)...');
          $options{output}->option_exit();
      }
      chomp $stdout;
      
      if (defined($options{no_quit}) && $options{no_quit} == 1) {
          return ($stdout, $result->{$pid}->{exitcode});
      }
      
      if ($result->{$pid}->{exitcode} != 0) {
          $stdout =~ s/\n/ - /g;
          $options{output}->add_option_msg(short_msg => "Command error: $stdout");
          $options{output}->option_exit();
      }
      
      return ($stdout, $result->{$pid}->{exitcode});
  }
  
  sub unix_execute {
      my (%options) = @_;
      my $cmd = '';
      my $args = [];
      my ($lerror, $stdout, $exit_code);
  
      my $redirect_stderr = 1;
      $redirect_stderr = $options{redirect_stderr} if (defined($options{redirect_stderr}));
      my $wait_exit = 1;
      $wait_exit = $options{wait_exit} if (defined($options{wait_exit}));
      
      # Build command line
      # Can choose which command is done remotely (can filter and use local file)
      if (defined($options{options}->{remote}) && 
          ($options{options}->{remote} eq '' || !defined($options{label}) || $options{label} =~ /$options{options}->{remote}/)) {
          my $sub_cmd;
  
          $cmd = $options{options}->{ssh_path} . '/' if (defined($options{options}->{ssh_path}));
          $cmd .= $options{options}->{ssh_command} if (defined($options{options}->{ssh_command}));
          
          foreach (@{$options{options}->{ssh_option}}) {
              my ($lvalue, $rvalue) = split /=/;
              push @$args, $lvalue if (defined($lvalue));
              push @$args, $rvalue if (defined($rvalue));
          }
          
          if (defined($options{options}->{ssh_address}) && $options{options}->{ssh_address} ne '') {
              push @$args, $options{options}->{ssh_address};
          } else {
              push @$args, $options{options}->{hostname};
          }
  		
          $sub_cmd = 'sudo ' if (defined($options{sudo}));
          $sub_cmd .= $options{command_path} . '/' if (defined($options{command_path}));
          $sub_cmd .= $options{command} . ' ' if (defined($options{command}));
          $sub_cmd .= $options{command_options} if (defined($options{command_options}));
          # On some equipment. Cannot get a pseudo terminal
          if (defined($options{ssh_pipe}) && $options{ssh_pipe} == 1) {
              $cmd = "echo '" . $sub_cmd . "' | " . $cmd . ' ' . join(' ', @$args);
              ($lerror, $stdout, $exit_code) = backtick(
                  command => $cmd,
                  timeout => $options{options}->{timeout},
                  wait_exit => $wait_exit,
                  redirect_stderr => $redirect_stderr
              );
          } else {
              ($lerror, $stdout, $exit_code) = backtick(
                  command => $cmd,
                  arguments => [@$args, $sub_cmd],
                  timeout => $options{options}->{timeout},
                  wait_exit => $wait_exit,
                  redirect_stderr => $redirect_stderr
              );
          }
      } else {
          $cmd = 'sudo ' if (defined($options{sudo}));
          $cmd .= $options{command_path} . '/' if (defined($options{command_path}));
          $cmd .= $options{command} . ' ' if (defined($options{command}));
          $cmd .= $options{command_options} if (defined($options{command_options}));
          
          ($lerror, $stdout, $exit_code) = backtick(
              command => $cmd,
              timeout => $options{options}->{timeout},
              wait_exit => $wait_exit,
              redirect_stderr => $redirect_stderr
          );
      }
  
      if (defined($options{options}->{show_output}) && 
          ($options{options}->{show_output} eq '' || (defined($options{label}) && $options{label} eq $options{options}->{show_output}))) {
          print $stdout;
          exit $exit_code;
      }
      
      $stdout =~ s/\r//g;
      if ($lerror <= -1000) {
          $options{output}->add_option_msg(short_msg => $stdout);
          $options{output}->option_exit();
      }
      
      if (defined($options{no_quit}) && $options{no_quit} == 1) {
          return ($stdout, $exit_code);
      }
      
      if ($exit_code != 0 && (!defined($options{no_errors}) || !defined($options{no_errors}->{$exit_code}))) {
          $stdout =~ s/\n/ - /g;
          $options{output}->add_option_msg(short_msg => "Command error: $stdout");
          $options{output}->option_exit();
      }
      
      return $stdout;
  }
  
  sub mymodule_load {
      my (%options) = @_;
      my $file;
      ($file = ($options{module} =~ /\.pm$/ ? $options{module} : $options{module} . '.pm')) =~ s{::}{/}g;
      
      eval {
          local $SIG{__DIE__} = 'IGNORE';
          require $file;
          $file =~ s{/}{::}g;
          $file =~ s/\.pm$//;
      };
      if ($@) {
          return 1 if (defined($options{no_quit}) && $options{no_quit} == 1);
          $options{output}->add_option_msg(long_msg => $@);
          $options{output}->add_option_msg(short_msg => $options{error_msg});
          $options{output}->option_exit();
      }
      return wantarray ? (0, $file) : 0;
  }
  
  sub backtick {
      my %arg = (
          command => undef,
          arguments => [],
          timeout => 30,
          wait_exit => 0,
          redirect_stderr => 0,
          @_,
      );
      my @output;
      my $pid;
      my $return_code;
      
      my $sig_do;
      if ($arg{wait_exit} == 0) {
          $sig_do = 'IGNORE';
          $return_code = undef;
      } else {
          $sig_do = 'DEFAULT';
      }
      local $SIG{CHLD} = $sig_do;
      $SIG{TTOU} = 'IGNORE';
      $| = 1;
  
      if (!defined($pid = open( KID, "-|" ))) {
          return (-1001, "Cant fork: $!", -1);
      }
  
      if ($pid) {
          
          eval {
             local $SIG{ALRM} = sub { die "Timeout by signal ALARM\n"; };
             alarm( $arg{timeout} );
             while (<KID>) {
                 chomp;
                 push @output, $_;
             }
  
             alarm(0);
          };
  
          if ($@) {
              if ($pid != -1) {
                  kill -9, $pid;
              }
  
              alarm(0);
              return (-1000, 'Command too long to execute (timeout)...', -1);
          } else {
              if ($arg{wait_exit} == 1) {
                  # We're waiting the exit code                
                  waitpid($pid, 0);
                  $return_code = ($? >> 8);
              }
              close KID;
          }
      } else {
          # child
          # set the child process to be a group leader, so that
          # kill -9 will kill it and all its descendents
          # We have ignore SIGTTOU to let write background processes
          setpgrp( 0, 0 );
  
          if ($arg{redirect_stderr} == 1) {
              open STDERR, '>&STDOUT';
          }
          if (scalar(@{$arg{arguments}}) <= 0) {
              exec($arg{command});
          } else {
              exec($arg{command}, @{$arg{arguments}});
          }
          # Exec is in error. No such command maybe.
          exit(127);
      }
  
      return (0, join("\n", @output), $return_code);
  }
  
  sub trim {
      my ($value) = $_[0];
      
      # Sometimes there is a null character
      $value =~ s/\x00$//;
      $value =~ s/^[ \t\n]+//;
      $value =~ s/[ \t\n]+$//;
      return $value;
  }
  
  sub powershell_encoded {
      my ($value) = $_[0];
  
      require Encode;
      require MIME::Base64;
      my $bytes = Encode::encode('utf16LE', $value);
      my $script = MIME::Base64::encode_base64($bytes, "\n");
      $script =~ s/\n//g;
      return $script;
  }
  
  sub powershell_escape {
      my ($value) = $_[0];
      $value =~ s/`/``/g;
      $value =~ s/#/`#/g;
      $value =~ s/'/`'/g;
      $value =~ s/"/`"/g;
      return $value;
  }
  
  sub powershell_json_sanitizer {
      my (%options) = @_;
  
      centreon::plugins::misc::mymodule_load(output => $options{output}, module => 'JSON::XS',
                                             error_msg => "Cannot load module 'JSON::XS'.");
      foreach my $line (split /\n/, $options{string}) {
          eval { JSON::XS->new->utf8->decode($line) };
          return $line if (!$@);
      }
      return -1;
  }
  
  sub minimal_version {
      my ($version_src, $version_dst) = @_;
          
      # No Version. We skip   
      if (!defined($version_src) || !defined($version_dst) || 
          $version_src !~ /^[0-9]+(?:\.[0-9\.]+)*$/ || $version_dst !~ /^[0-9x]+(?:\.[0-9x]+)*$/) {
          return 1;
      }
    
      my @version_src = split /\./, $version_src;
      my @versions = split /\./, $version_dst;
      for (my $i = 0; $i < scalar(@versions); $i++) {
          return 1 if ($versions[$i] eq 'x');
          return 1 if (!defined($version_src[$i]));
          $version_src[$i] =~ /^([0-9]*)/;
          next if ($versions[$i] == int($1));
          return 0 if ($versions[$i] > int($1));
          return 1 if ($versions[$i] < int($1));
      }
      
      return 1;
  }
  
  sub change_seconds {
      my %options = @_;
      my ($str, $str_append) = ('', '');
      my $periods = [
          { unit => 'y', value => 31556926 },
          { unit => 'M', value => 2629743 },
          { unit => 'w', value => 604800 },
          { unit => 'd', value => 86400 },
          { unit => 'h', value => 3600 },
          { unit => 'm', value => 60 },
          { unit => 's', value => 1 },
      ];
      my %values = ('y' => 1, 'M' => 2, 'w' => 3, 'd' => 4, 'h' => 5, 'm' => 6, 's' => 7);
  
      foreach (@$periods) {
          next if (defined($options{start}) && $values{$_->{unit}} < $values{$options{start}});
          my $count = int($options{value} / $_->{value});
  
          next if ($count == 0);
          $str .= $str_append . $count . $_->{unit};
          $options{value} = $options{value} % $_->{value};
          $str_append = ' ';
      }
  
      return $str;
  }
  
  sub scale_bytesbit {
      my (%options) = @_;
      
      my $base = 1024;
      if (defined($options{dst_unit}) && defined($options{src_unit})) {
          $options{value} *= 8 if ($options{dst_unit} =~ /b/ && $options{src_unit} =~ /B/);
          $options{value} /= 8 if ($options{dst_unit} =~ /B/ && $options{src_unit} =~ /b/);
          if ($options{dst_unit} =~ /b/) {
              $base = 1000;
          }
      }
          
      my %expo = ('' => 0, k => 1, m => 2, g => 3, t => 4, p => 5, e => 6);
      my ($src_expo, $dst_expo) = (0, 0);
      $src_expo = $expo{lc($options{src_quantity})} if (defined($options{src_quantity}) && $options{src_quantity} =~ /[kmgtpe]/i);
      if ($options{dst_unit} eq 'auto') {
          my @auto = ('', 'k', 'm', 'g', 't', 'p', 'e');
          my $i = defined($options{src_quantity}) ? $expo{$options{src_quantity}} : 0;
          for (; $i < scalar(@auto); $i++) {
              last if ($options{value} < $base);
              $options{value} = $options{value} / $base;
          }
  
          return ($options{value}, $auto[$i], $options{src_unit});
      } elsif (defined($options{dst_quantity}) && ($options{dst_quantity} eq '' || $options{dst_quantity} =~ /[kmgtpe]/i )) {
          my $dst_expo = $expo{lc($options{dst_quantity})};
          if ($dst_expo - $src_expo > 0) {
              $options{value} = $options{value} / ($base ** ($dst_expo - $src_expo));
          } elsif ($dst_expo - $src_expo < 0) {
              $options{value} = $options{value} * ($base ** (($dst_expo - $src_expo) * -1));
          }
      }
      
      return $options{value};
  }
  
  sub convert_bytes {
      my (%options) = @_;
  
      my %expo = (k => 1, m => 2, g => 3, t => 4, p => 5);
      my $value = $options{value};
      my $base = defined($options{network}) ? 1000 : 1024;    
      if ($options{unit} =~ /([kmgt])b/i) {
          $value = $value * ($base ** $expo{lc($1)});
      }
  
      return $value;
  }
  
  sub expand_exponential {
      my (%options) = @_;
      
      return $options{value} unless ($options{value} =~ /^(.*)e([-+]?)(.*)$/);
      my ($num, $sign, $exp) = ($1, $2, $3);
      my $sig = $sign eq '-' ? "." . ($exp - 1 + length $num) : '';
      return sprintf("%${sig}f", $options{value});
  }
  
  sub parse_threshold {
      my (%options) = @_;
  
      my $perf = trim($options{threshold});
      my $perf_result = { arobase => 0, infinite_neg => 0, infinite_pos => 0, start => '', end => '' };
  
      my $global_status = 1;    
      if ($perf =~ /^(\@?)((?:~|(?:\+|-)?\d+(?:[\.,]\d+)?(?:[KMGTPE][bB])?|):)?((?:\+|-)?\d+(?:[\.,]\d+)?(?:[KMGTPE][bB])?)?$/) {
          $perf_result->{start} = $2 if (defined($2));
          $perf_result->{end} = $3 if (defined($3));
          $perf_result->{arobase} = 1 if (defined($1) && $1 eq '@');
          $perf_result->{start} =~ s/[\+:]//g;
          $perf_result->{end} =~ s/\+//;
          if ($perf_result->{start} =~ s/([KMGTPE])([bB])//) {
              $perf_result->{start} = scale_bytesbit(
                  value => $perf_result->{start},
                  src_unit => $2, dst_unit => $2,
                  src_quantity => $1, dst_quantity => '',
              );
          }
          if ($perf_result->{end} =~ s/([KMGTPE])([bB])//) {
              $perf_result->{end} = scale_bytesbit(
                  value => $perf_result->{end},
                  src_unit => $2, dst_unit => $2,
                  src_quantity => $1, dst_quantity => '',
              );
          }
          if ($perf_result->{end} eq '') {
              $perf_result->{end} = 1e500;
              $perf_result->{infinite_pos} = 1;
          }
          $perf_result->{start} = 0 if ($perf_result->{start} eq '');      
          $perf_result->{start} =~ s/,/\./;
          $perf_result->{end} =~ s/,/\./;
          
          if ($perf_result->{start} eq '~') {
              $perf_result->{start} = -1e500;
              $perf_result->{infinite_neg} = 1;
          }
      } else {
          $global_status = 0;
      }
  
      return ($global_status, $perf_result);
  }
  
  sub get_threshold_litteral {
      my (%options) = @_;
      
      my $perf_output = ($options{arobase} == 1 ? '@' : '') . 
                        (($options{infinite_neg} == 0) ? $options{start} : '~') . 
                        ':' . 
                        (($options{infinite_pos} == 0) ? $options{end} : '');
      return $perf_output;
  }
  
  sub set_timezone {
      my (%options) = @_;
      
      return {} if (!defined($options{name}) || $options{name} eq '');
       
      centreon::plugins::misc::mymodule_load(output => $options{output}, module => 'DateTime::TimeZone',
                                             error_msg => "Cannot load module 'DateTime::TimeZone'.");
      if (DateTime::TimeZone->is_valid_name($options{name})) {
          return { time_zone => DateTime::TimeZone->new(name => $options{name}) };
      }
      
      # try to manage syntax (:Pacific/Noumea for example)
      if ($options{name} =~ /^:(.*)$/ && DateTime::TimeZone->is_valid_name($1)) {
          return { time_zone => DateTime::TimeZone->new(name => $1) };
      }
  
      return {};
  }
  
  1;
  
  
CENTREON_PLUGINS_MISC

$fatpacked{"centreon/plugins/mode.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'CENTREON_PLUGINS_MODE';
  #
  # Copyright 2019 Centreon (http://www.centreon.com/)
  #
  # Centreon is a full-fledged industry-strength solution that meets
  # the needs in IT infrastructure and application monitoring for
  # service performance.
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  #
  
  package centreon::plugins::mode;
  
  use strict;
  use warnings;
  use centreon::plugins::perfdata;
  
  sub new {
      my ($class, %options) = @_;
      my $self  = {};
      bless $self, $class;
  
      $self->{perfdata} = centreon::plugins::perfdata->new(output => $options{output});
      
      %{$self->{option_results}} = ();
      $self->{output} = $options{output};
      $self->{output}->use_new_perfdata(value => 1)
          if (defined($options{force_new_perfdata}) && $options{force_new_perfdata} == 1);
      $self->{mode} = $options{mode};
      $self->{version} = '1.0';
  
      return $self;
  }
  
  sub init {
      my ($self, %options) = @_;
      # options{default} = { mode_xxx => { option_name => option_value }, }
  
      %{$self->{option_results}} = %{$options{option_results}};
      # Manage default value
      return if (!defined($options{default}));
      foreach (keys %{$options{default}}) {
          if ($_ eq $self->{mode}) {
              foreach my $value (keys %{$options{default}->{$_}}) {
                  if (!defined($self->{option_results}->{$value})) {
                      $self->{option_results}->{$value} = $options{default}->{$_}->{$value};
                  }
              }
          }
      }
  }
  
  sub version {
      my ($self, %options) = @_;
      
      $self->{output}->add_option_msg(short_msg => "Mode Version: " . $self->{version});
  }
  
  sub disco_format {
      my ($self, %options) = @_;
  
  }
  
  sub disco_show {
      my ($self, %options) = @_;
  
  }
  
  1;
  
  
CENTREON_PLUGINS_MODE

$fatpacked{"centreon/plugins/options.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'CENTREON_PLUGINS_OPTIONS';
  #
  # Copyright 2019 Centreon (http://www.centreon.com/)
  #
  # Centreon is a full-fledged industry-strength solution that meets
  # the needs in IT infrastructure and application monitoring for
  # service performance.
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  #
  
  package centreon::plugins::options;
  
  use Pod::Usage;
  use Pod::Find qw(pod_where);
  use strict;
  use warnings;
  
  my $alternative = 1;
  
  sub new {
      my ($class) = @_;
      my $self  = {};
      bless $self, $class;
  
      $self->{sanity} = 0;
      $self->{options_stored} = {};
      $self->{options} = {};
      @{$self->{pod_package}} = ();
      $self->{pod_packages_once} = {};
      
      if ($alternative == 0) {
          require Getopt::Long;
          Getopt::Long->import();
          Getopt::Long::Configure("pass_through");
          Getopt::Long::Configure('bundling');
          Getopt::Long::Configure('no_auto_abbrev');
      } else {
          require centreon::plugins::alternative::Getopt;
          $centreon::plugins::alternative::Getopt::warn_message = 0;
          centreon::plugins::alternative::Getopt->import();
      }
      
      return $self;
  }
  
  sub set_sanity {
      my ($self, %options) = @_;
      
      if ($alternative == 0) {
          Getopt::Long::Configure('no_pass_through');
      } else {
          $centreon::plugins::alternative::Getopt::warn_message = 1;
      }
  
      $self->{sanity} = 1;
  }
  
  sub set_output {
      my ($self, %options) = @_;
      
      $self->{output} = $options{output};
  }
  
  sub display_help {
      my ($self, %options) = @_;
      
      my $stdout;
      foreach (@{$self->{pod_package}}) {
          
          {
              local *STDOUT;
              open STDOUT, '>', \$stdout;
              my $where = pod_where({-inc => 1}, $_->{package});
              pod2usage(-exitval => 'NOEXIT', -input => $where,
                        -verbose => 99, 
                        -sections => $_->{sections}) if (defined($where));
          }
          
          $self->{output}->add_option_msg(long_msg => $stdout) if (defined($stdout));
      }
  }
  
  sub add_help {
      my ($self, %options) = @_;
      # $options{package} = string package
      # $options{sections} = string sections
      # $options{help_first} = put at the beginning
      # $options{once} = put help only one time for a package
      
      if (defined($options{once}) && defined($self->{pod_packages_once}->{$options{package}})) {
          return ;
      }
      
      if (defined($options{help_first})) {
          unshift @{$self->{pod_package}}, {package => $options{package}, sections => $options{sections}};
      } else {
          push @{$self->{pod_package}}, { package => $options{package}, sections => $options{sections} };
      }
      
      $self->{pod_packages_once}->{$options{package}} = 1;
  }
  
  sub add_options {
      my ($self, %options) = @_;
      # $options{arguments} = ref to hash table with string and name to store (example: { 'mode:s' => { name => 'mode', default => 'defaultvalue' )
      
      foreach (keys %{$options{arguments}}) {
          if (defined($options{arguments}->{$_}->{redirect})) {
              $self->{options}->{$_} = \$self->{options_stored}->{$options{arguments}->{$_}->{redirect}};
              next;
          }
          
          if (defined($options{arguments}->{$_}->{default})) {
              $self->{options_stored}->{$options{arguments}->{$_}->{name}} = $options{arguments}->{$_}->{default};
          } else {
              $self->{options_stored}->{$options{arguments}->{$_}->{name}} = undef;
          }
          
          $self->{options}->{$_} = \$self->{options_stored}->{$options{arguments}->{$_}->{name}};
      }
  }
  
  sub parse_options {
      my $self = shift;
      #%{$self->{options_stored}} = ();
  
      my $save_warn_handler;
      if ($self->{sanity} == 1) {
          $save_warn_handler = $SIG{__WARN__};
          $SIG{__WARN__} = sub {
              $self->{output}->add_option_msg(short_msg => $_[0]);
              $self->{output}->option_exit(nolabel => 1);
          };
      }
      
      GetOptions(
         %{$self->{options}}
      );
      %{$self->{options}} = ();
      
      $SIG{__WARN__} = $save_warn_handler if ($self->{sanity} == 1);
  }
  
  sub get_option {
      my ($self, %options) = @_;
  
      return $self->{options_stored}->{$options{argument}};
  }
  
  sub get_options {
      my $self = shift;
  
      return $self->{options_stored};
  }
  
  sub clean {
      my $self = shift;
      
      $self->{options_stored} = {};
  }
  
  1;
  
CENTREON_PLUGINS_OPTIONS

$fatpacked{"centreon/plugins/output.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'CENTREON_PLUGINS_OUTPUT';
  #
  # Copyright 2019 Centreon (http://www.centreon.com/)
  #
  # Centreon is a full-fledged industry-strength solution that meets
  # the needs in IT infrastructure and application monitoring for
  # service performance.
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  #
  
  package centreon::plugins::output;
  
  use strict;
  use warnings;
  use centreon::plugins::misc;
  
  sub new {
      my ($class, %options) = @_;
      my $self  = {};
      bless $self, $class;
      if (!defined($options{options})) {
          print "Class Output: Need to specify 'options' argument to load.\n";
          exit 3;
      }
  
      $options{options}->add_options(arguments => {
          'explode-perfdata-max:s@' => { name => 'explode_perfdata_max' },
          'range-perfdata:s'        => { name => 'range_perfdata' },
          'filter-perfdata:s'       => { name => 'filter_perfdata' },
          'change-perfdata:s@'      => { name => 'change_perfdata' },
          'extend-perfdata:s@'      => { name => 'extend_perfdata' },
          'extend-perfdata-group:s@'=> { name => 'extend_perfdata_group' },
          'change-short-output:s@'  => { name => 'change_short_output' },
          'use-new-perfdata'        => { name => 'use_new_perfdata' },
          'filter-uom:s'            => { name => 'filter_uom' },
          'verbose'                 => { name => 'verbose' },
          'debug'                   => { name => 'debug' },
          'opt-exit:s'              => { name => 'opt_exit', default => 'unknown' },
          'output-xml'              => { name => 'output_xml' },
          'output-json'             => { name => 'output_json' },
          'output-openmetrics'      => { name => 'output_openmetrics' },
          'output-file:s'           => { name => 'output_file' },
          'disco-format'            => { name => 'disco_format' },
          'disco-show'              => { name => 'disco_show' },
          'float-precision:s'       => { name => 'float_precision', default => 8 },
      });
      
      %{$self->{option_results}} = ();
  
      $self->{option_msg} = [];
      
      $self->{is_output_xml} = 0;
      $self->{is_output_json} = 0;
      $self->{errors} = {OK => 0, WARNING => 1, CRITICAL => 2, UNKNOWN => 3, PENDING => 4};
      $self->{errors_num} = {0 => 'OK', 1 => 'WARNING', 2 => 'CRITICAL', 3 => 'UNKNOWN', 4 => 'PENDING'};
      $self->{myerrors} = {0 => "OK", 1 => "WARNING", 3 => "UNKNOWN", 7 => "CRITICAL"};
      $self->{myerrors_mask} = {CRITICAL => 7, WARNING => 1, UNKNOWN => 3, OK => 0};
      $self->{global_short_concat_outputs} = {OK => undef, WARNING => undef, CRITICAL => undef, UNKNOWN => undef, UNQUALIFIED_YET => undef};
      $self->{global_short_outputs} = {OK => [], WARNING => [], CRITICAL => [], UNKNOWN => [], UNQUALIFIED_YET => []};
      $self->{global_long_output} = [];
      $self->{perfdatas} = [];
      $self->{explode_perfdatas} = {};
      $self->{change_perfdata} = {};
      $self->{explode_perfdata_total} = 0;
      $self->{range_perfdata} = 0;
      $self->{global_status} = 0;
      $self->{encode_utf8_import} = 0;
      $self->{perlqq} = 0;
  
      $self->{disco_elements} = [];
      $self->{disco_entries} = [];
  
      $self->{plugin} = '';
      $self->{mode} = '';
  
      return $self;
  }
  
  sub check_options {
      my ($self, %options) = @_;
      # $options{option_results} = ref to options result
  
      %{$self->{option_results}} = %{$options{option_results}};
      $self->{option_results}->{opt_exit} = lc($self->{option_results}->{opt_exit});
      if (!$self->is_litteral_status(status => $self->{option_results}->{opt_exit})) {
          $self->add_option_msg(short_msg => "Unknown value '" . $self->{option_results}->{opt_exit}  . "' for --opt-exit.");
          $self->option_exit(exit_litteral => 'unknown');
      }
      # Go in XML Mode
      if ($self->is_disco_show() || $self->is_disco_format()) {
          # By Default XML
          if (!defined($self->{option_results}->{output_json})) {
              $self->{option_results}->{output_xml} = 1;
          }
      }
      
      if (defined($self->{option_results}->{range_perfdata})) {
          $self->{range_perfdata} = $self->{option_results}->{range_perfdata};
          $self->{range_perfdata} = 1 if ($self->{range_perfdata} eq '');
          if ($self->{range_perfdata} !~ /^[012]$/) {
              $self->add_option_msg(short_msg => "Wrong range-perfdata option '" . $self->{range_perfdata} . "'");
              $self->option_exit();
          }
      }
      
      if (defined($self->{option_results}->{explode_perfdata_max})) {
          if (${$self->{option_results}->{explode_perfdata_max}}[0] eq '') {
              $self->{explode_perfdata_total} = 2;
          } else {
              $self->{explode_perfdata_total} = 1;
              foreach (@{$self->{option_results}->{explode_perfdata_max}}) {
                  my ($perf_match, $perf_result) = split /,/;
                  if (!defined($perf_result)) {
                      $self->add_option_msg(short_msg => "Wrong explode-perfdata-max option '" . $_ . "' (syntax: match,value)");
                      $self->option_exit();
                  }
                  $self->{explode_perfdatas}->{$perf_match} = $perf_result;
              }
          }
      }
      
      $self->load_perfdata_extend_args();
      $self->{option_results}->{use_new_perfdata} = 1 if (defined($self->{option_results}->{output_openmetrics}));
  }
  
  sub add_option_msg {
      my ($self, %options) = @_;
      # $options{short_msg} = string msg
      # $options{long_msg} = string msg
      $options{severity} = 'UNQUALIFIED_YET';
      
      $self->output_add(%options);
  }
  
  sub set_status {
      my ($self, %options) = @_;
      # $options{exit_litteral} = string litteral exit
  
      # Nothing to do for 'UNQUALIFIED_YET'
      if (!$self->{myerrors_mask}->{uc($options{exit_litteral})}) {
          return ;
      }
      $self->{global_status} |= $self->{myerrors_mask}->{uc($options{exit_litteral})};
  }
  
  sub output_add {
      my ($self, %params) = @_;
      my %args = (
          severity => 'OK',
          separator => ' - ',
          debug => 0,
          short_msg => undef,
          long_msg => undef,
      );
      my $options = {%args, %params};
      
      if (defined($options->{short_msg})) {
          chomp $options->{short_msg};
          if (defined($self->{global_short_concat_outputs}->{uc($options->{severity})})) {
              $self->{global_short_concat_outputs}->{uc($options->{severity})} .= $options->{separator} . $options->{short_msg};
          } else {
              $self->{global_short_concat_outputs}->{uc($options->{severity})} = $options->{short_msg};
          }
          
          push @{$self->{global_short_outputs}->{uc($options->{severity})}}, $options->{short_msg};
          $self->set_status(exit_litteral => $options->{severity});
      }
      if (defined($options->{long_msg}) && 
          ($options->{debug} == 0 || defined($self->{option_results}->{debug}))) {
          chomp $options->{long_msg};
          push @{$self->{global_long_output}}, $options->{long_msg};
      }
  }
  
  sub perfdata_add {
      my ($self, %options) = @_;
      my $perfdata = {
          label => '', value => '', unit => '', warning => '', critical => '', min => '', max => ''
      };
      foreach (keys %options) {
          next if (!defined($options{$_}));
          $perfdata->{$_} = $options{$_};
      }
      
      if (defined($self->{option_results}->{use_new_perfdata}) && defined($options{nlabel})) {
          $perfdata->{label} = $options{nlabel};
      }
      if (defined($options{instances})) {
          $options{instances} = [$options{instances}] if (!ref($options{instances}));
          my ($external_instance_separator, $internal_instance_separator) = ('#', '~');
          if (defined($self->{option_results}->{use_new_perfdata})) {
              $perfdata->{label} = join('~', @{$options{instances}}) . '#' . $perfdata->{label};
          } else {
              $perfdata->{label} .= '_' . join('_', @{$options{instances}});
          }
      }
      
      $perfdata->{label} =~ s/'/''/g;
      push @{$self->{perfdatas}}, $perfdata;
  }
  
  sub range_perfdata {
      my ($self, %options) = @_;
      
      return if ($self->{range_perfdata} == 0);
      if ($self->{range_perfdata} == 1) {
          for (my $i = 0; $i < scalar(@{$options{ranges}}); $i++) {
              ${${$options{ranges}}[$i]} =~ s/^(@?)-?[0\.]+:/$1/;
          }
      } else {
          for (my $i = 0; $i < scalar(@{$options{ranges}}); $i++) {
              ${${$options{ranges}}[$i]} = '';
          }
      }
  }
  
  sub output_json {
      my ($self, %options) = @_;
      my $force_ignore_perfdata = (defined($options{force_ignore_perfdata}) && $options{force_ignore_perfdata} == 1) ? 1 : 0;
      my $force_long_output = (defined($options{force_long_output}) && $options{force_long_output} == 1) ? 1 : 0;
      my $json_content = {
          plugin => {
              name => $self->{plugin},
              mode => $self->{mode},
              exit => $options{exit_litteral},
              outputs => [],
              perfdatas => []
          }
      };    
  
      foreach my $code_litteral (keys %{$self->{global_short_outputs}}) {
          foreach (@{$self->{global_short_outputs}->{$code_litteral}}) {
              my ($child_output, $child_type, $child_msg, $child_exit);
              my $lcode_litteral = ($code_litteral eq 'UNQUALIFIED_YET' ? uc($options{exit_litteral}) : $code_litteral);
  
              push @{$json_content->{plugin}->{outputs}}, {
                  type => 1,
                  msg => ($options{nolabel} == 0 ? ($lcode_litteral . ': ') : '') . $_,
                  exit => $lcode_litteral
              };
          }
      }
  
      if (defined($self->{option_results}->{verbose}) || $force_long_output == 1) {
          foreach (@{$self->{global_long_output}}) {
              push @{$json_content->{plugin}->{outputs}}, {
                  type => 2,
                  msg => $_,
              };
          }
      }
  
      if ($options{force_ignore_perfdata} == 0) {
          $self->change_perfdata();
          foreach my $perf (@{$self->{perfdatas}}) {
              next if (defined($self->{option_results}->{filter_perfdata}) &&
                       $perf->{label} !~ /$self->{option_results}->{filter_perfdata}/);
              $self->range_perfdata(ranges => [\$perf->{warning}, \$perf->{critical}]);
              
              my %values = ();
              foreach my $key (keys %$perf) {
                  $perf->{$key} = '' if (defined($self->{option_results}->{filter_uom}) && $key eq 'unit' &&
                      $perf->{$key} !~ /$self->{option_results}->{filter_uom}/);
                  $values{$key} = $perf->{$key};
              }
              
              push @{$json_content->{plugin}->{perfdatas}}, {
                  %values
              };
          }
      }
  
      print $self->{json_output}->encode($json_content);
  }
  
  sub output_xml {
      my ($self, %options) = @_;
      my $force_ignore_perfdata = (defined($options{force_ignore_perfdata}) && $options{force_ignore_perfdata} == 1) ? 1 : 0;
      my $force_long_output = (defined($options{force_long_output}) && $options{force_long_output} == 1) ? 1 : 0;
      my ($child_plugin_name, $child_plugin_mode, $child_plugin_exit, $child_plugin_output, $child_plugin_perfdata); 
  
      my $root = $self->{xml_output}->createElement('plugin');
      $self->{xml_output}->setDocumentElement($root);
  
      $child_plugin_name = $self->{xml_output}->createElement('name');
      $child_plugin_name->appendText($self->{plugin});
  
      $child_plugin_mode = $self->{xml_output}->createElement('mode');
      $child_plugin_mode->appendText($self->{mode});
  
      $child_plugin_exit = $self->{xml_output}->createElement('exit');
      $child_plugin_exit->appendText($options{exit_litteral});
  
      $child_plugin_output = $self->{xml_output}->createElement('outputs');
      $child_plugin_perfdata = $self->{xml_output}->createElement('perfdatas');
  
      $root->addChild($child_plugin_name);
      $root->addChild($child_plugin_mode);
      $root->addChild($child_plugin_exit);
      $root->addChild($child_plugin_output);
      $root->addChild($child_plugin_perfdata);
  
      foreach my $code_litteral (keys %{$self->{global_short_outputs}}) {
          foreach (@{$self->{global_short_outputs}->{$code_litteral}}) {
              my ($child_output, $child_type, $child_msg, $child_exit);
              my $lcode_litteral = ($code_litteral eq 'UNQUALIFIED_YET' ? uc($options{exit_litteral}) : $code_litteral);
  
              $child_output = $self->{xml_output}->createElement('output');
              $child_plugin_output->addChild($child_output);
  
              $child_type = $self->{xml_output}->createElement('type');
              $child_type->appendText(1); # short
  
              $child_msg = $self->{xml_output}->createElement('msg');
              $child_msg->appendText(($options{nolabel} == 0 ? ($lcode_litteral . ': ') : '') . $_);
              $child_exit = $self->{xml_output}->createElement('exit');
              $child_exit->appendText($lcode_litteral);
  
              $child_output->addChild($child_type);
              $child_output->addChild($child_exit);
              $child_output->addChild($child_msg);
          }
      }
  
      if (defined($self->{option_results}->{verbose}) || $force_long_output == 1) {
          foreach (@{$self->{global_long_output}}) {
              my ($child_output, $child_type, $child_msg);
          
              $child_output = $self->{xml_output}->createElement('output');
              $child_plugin_output->addChild($child_output);
  
              $child_type = $self->{xml_output}->createElement('type');
              $child_type->appendText(2); # long
  
              $child_msg = $self->{xml_output}->createElement('msg');
              $child_msg->appendText($_);
  
              $child_output->addChild($child_type);
              $child_output->addChild($child_msg);
          }
      }
  
      if ($options{force_ignore_perfdata} == 0) {
          $self->change_perfdata();
          foreach my $perf (@{$self->{perfdatas}}) {
              next if (defined($self->{option_results}->{filter_perfdata}) &&
                       $perf->{label} !~ /$self->{option_results}->{filter_perfdata}/);
              $self->range_perfdata(ranges => [\$perf->{warning}, \$perf->{critical}]);
          
              my ($child_perfdata);
              $child_perfdata = $self->{xml_output}->createElement('perfdata');
              $child_plugin_perfdata->addChild($child_perfdata);
              foreach my $key (keys %$perf) {
                  $perf->{$key} = '' if (defined($self->{option_results}->{filter_uom}) && $key eq 'unit' &&
                      $perf->{$key} !~ /$self->{option_results}->{filter_uom}/);
                  my $child = $self->{xml_output}->createElement($key);
                  $child->appendText($perf->{$key});
                  $child_perfdata->addChild($child);
              }
          }
      }
  
      print $self->{xml_output}->toString(1);
  }
  
  sub output_openmetrics {
      my ($self, %options) = @_;
  
      $self->change_perfdata();
      foreach my $perf (@{$self->{perfdatas}}) {
          next if (defined($self->{option_results}->{filter_perfdata}) &&
                   $perf->{label} !~ /$self->{option_results}->{filter_perfdata}/);
          $perf->{unit} = '' if (defined($self->{option_results}->{filter_uom}) &&
              $perf->{unit} !~ /$self->{option_results}->{filter_uom}/);
          $self->range_perfdata(ranges => [\$perf->{warning}, \$perf->{critical}]);
          my $label = $perf->{label};
          my $instance;
          if ($label =~ /^(.*?)#(.*)$/) {
              ($perf->{instance}, $label) = ($1, $2);
          }
          my ($bucket, $append) = ('{plugin="' . $self->{plugin} . '",mode="' . $self->{mode} . '"', '');
          foreach ('unit', 'warning', 'critical', 'min', 'max', 'instance') {
              if (defined($perf->{$_}) && $perf->{$_} ne '') {
                  $bucket .= ',' . $_ . '="' . $perf->{$_} . '"';
              }
          }
          $bucket .= '}';
          
          print $label . $bucket . ' ' . $perf->{value} . "\n";
      }
  }
  
  sub output_txt_short_display {
      my ($self, %options) = @_;
      
      if (defined($self->{global_short_concat_outputs}->{CRITICAL})) {
          print (($options{nolabel} == 0 ? 'CRITICAL: ' : '') . $self->{global_short_concat_outputs}->{CRITICAL} . " ");
      }
      if (defined($self->{global_short_concat_outputs}->{WARNING})) {
          print (($options{nolabel} == 0 ? 'WARNING: ' : '') . $self->{global_short_concat_outputs}->{WARNING} . " ");
      }
      if (defined($self->{global_short_concat_outputs}->{UNKNOWN})) {
          print (($options{nolabel} == 0 ? 'UNKNOWN: ' : '') . $self->{global_short_concat_outputs}->{UNKNOWN} . " ");
      }
      if (uc($options{exit_litteral}) eq 'OK') {
          print (($options{nolabel} == 0 ? 'OK: ' : '') . (defined($self->{global_short_concat_outputs}->{OK}) ? $self->{global_short_concat_outputs}->{OK} : '') . " ");
      }
  }
  
  sub output_txt_short {
      my ($self, %options) = @_;
      
      if (!defined($self->{option_results}->{change_short_output})) {
          $self->output_txt_short_display(%options);
          return ;
      }
      
      my $stdout = '';
      {
          local *STDOUT;
          open STDOUT, '>', \$stdout;
          $self->output_txt_short_display(%options);
      }
      
      foreach (@{$self->{option_results}->{change_short_output}}) {
           my ($pattern, $replace, $modifier) = split /~/;
           next if (!defined($pattern));
           $replace = '' if (!defined($replace));
           $modifier = '' if (!defined($modifier));
           eval "\$stdout =~ s{$pattern}{$replace}$modifier";
      }
      
      print $stdout;
  }
  
  sub output_txt {
      my ($self, %options) = @_;
      my $force_ignore_perfdata = (defined($options{force_ignore_perfdata}) && $options{force_ignore_perfdata} == 1) ? 1 : 0;
      my $force_long_output = (defined($options{force_long_output}) && $options{force_long_output} == 1) ? 1 : 0;
  
      if (defined($self->{global_short_concat_outputs}->{UNQUALIFIED_YET})) {
          $self->output_add(severity => uc($options{exit_litteral}), short_msg => $self->{global_short_concat_outputs}->{UNQUALIFIED_YET});
      }
  
      $self->output_txt_short(%options);
  
      if ($force_ignore_perfdata == 1) {
          print "\n";
      } else {
          print '|';
          $self->change_perfdata();
          foreach my $perf (@{$self->{perfdatas}}) {
              next if (defined($self->{option_results}->{filter_perfdata}) &&
                       $perf->{label} !~ /$self->{option_results}->{filter_perfdata}/);
              $perf->{unit} = '' if (defined($self->{option_results}->{filter_uom}) &&
                  $perf->{unit} !~ /$self->{option_results}->{filter_uom}/);
              $self->range_perfdata(ranges => [\$perf->{warning}, \$perf->{critical}]);
              print " '" . $perf->{label} . "'=" . $perf->{value} . $perf->{unit} . ';' . $perf->{warning} . ';' . $perf->{critical} . ';' . $perf->{min} . ';' . $perf->{max};
          }
          print "\n";
      }
      
      if (defined($self->{option_results}->{verbose}) || $force_long_output == 1) {
          if (scalar(@{$self->{global_long_output}})) {
              print join("\n", @{$self->{global_long_output}});
              print "\n";
          }
      }
  }
  
  sub display {
      my ($self, %options) = @_;
      my $nolabel = defined($options{nolabel}) ? 1 : 0;
      my $force_ignore_perfdata = (defined($options{force_ignore_perfdata}) && $options{force_ignore_perfdata} == 1) ? 1 : 0;
      my $force_long_output = (defined($options{force_long_output}) && $options{force_long_output} == 1) ? 1 : 0;
      $force_long_output = 1 if (defined($self->{option_results}->{debug}));
  
      if (defined($self->{option_results}->{output_file})) {
          if (!open (STDOUT, '>', $self->{option_results}->{output_file})) {
              $self->output_add(severity => 'UNKNOWN',
                                short_msg => "cannot open file  '" . $self->{option_results}->{output_file} . "': $!");
          }
      }
      if (defined($self->{option_results}->{output_xml})) {
          $self->create_xml_document();
          if ($self->{is_output_xml}) {
              $self->output_xml(exit_litteral => $self->get_litteral_status(), 
                                nolabel => $nolabel, 
                                force_ignore_perfdata => $force_ignore_perfdata, force_long_output => $force_long_output);
              return ;
          }
      } elsif (defined($self->{option_results}->{output_json})) {
          $self->create_json_document();
          if ($self->{is_output_json}) {
              $self->output_json(exit_litteral => $self->get_litteral_status(), 
                                 nolabel => $nolabel,
                                 force_ignore_perfdata => $force_ignore_perfdata, force_long_output => $force_long_output);
              return ;
          }
      } elsif (defined($self->{option_results}->{output_openmetrics})) {
          $self->output_openmetrics();
          return ;
      }
      
      $self->output_txt(
          exit_litteral => $self->get_litteral_status(), 
          nolabel => $nolabel,
          force_ignore_perfdata => $force_ignore_perfdata, force_long_output => $force_long_output
      );
  }
  
  sub die_exit {
      my ($self, %options) = @_;
      # $options{exit_litteral} = string litteral exit
      # $options{nolabel} = interger label display
      my $exit_litteral = defined($options{exit_litteral}) ? $options{exit_litteral} : $self->{option_results}->{opt_exit};
      my $nolabel = defined($options{nolabel}) ? 1 : 0;
      # ignore long output in the following case
      $self->{option_results}->{verbose} = undef;
  
      if (defined($self->{option_results}->{output_xml})) {
          $self->create_xml_document();
          if ($self->{is_output_xml}) {
              $self->output_xml(exit_litteral => $exit_litteral, nolabel => $nolabel, force_ignore_perfdata => 1);
              $self->exit(exit_litteral => $exit_litteral);
          }
      } elsif (defined($self->{option_results}->{output_json})) {
          $self->create_json_document();
          if ($self->{is_output_json}) {
              $self->output_json(exit_litteral => $exit_litteral, nolabel => $nolabel, force_ignore_perfdata => 1);
              $self->exit(exit_litteral => $exit_litteral);
          }
      } 
  
      $self->output_txt(exit_litteral => $exit_litteral, nolabel => $nolabel, force_ignore_perfdata => 1);
      $self->exit(exit_litteral => $exit_litteral);
  }
  
  sub option_exit {
      my ($self, %options) = @_;
      # $options{exit_litteral} = string litteral exit
      # $options{nolabel} = interger label display
      my $exit_litteral = defined($options{exit_litteral}) ? $options{exit_litteral} : $self->{option_results}->{opt_exit};
      my $nolabel = defined($options{nolabel}) ? 1 : 0;
  
      if (defined($self->{option_results}->{output_xml})) {
          $self->create_xml_document();
          if ($self->{is_output_xml}) {
              $self->output_xml(exit_litteral => $exit_litteral, nolabel => $nolabel, force_ignore_perfdata => 1, force_long_output => 1);
              $self->exit(exit_litteral => $exit_litteral);
          }
      } elsif (defined($self->{option_results}->{output_json})) {
          $self->create_json_document();
          if ($self->{is_output_json}) {
              $self->output_json(exit_litteral => $exit_litteral, nolabel => $nolabel, force_ignore_perfdata => 1, force_long_output => 1);
              $self->exit(exit_litteral => $exit_litteral);
          }
      }
  
      $self->output_txt(exit_litteral => $exit_litteral, nolabel => $nolabel, force_ignore_perfdata => 1, force_long_output => 1);
      $self->exit(exit_litteral => $exit_litteral);
  }
  
  sub exit {
      my ($self, %options) = @_;
      # $options{exit_litteral} = exit
      
      if (defined($options{exit_litteral})) {
          exit $self->{errors}->{uc($options{exit_litteral})};
      }
      exit $self->{errors}->{$self->{myerrors}->{$self->{global_status}}};
  }
  
  sub get_most_critical {
      my ($self, %options) = @_;
      my $current_status = 0; # For 'OK'
  
      foreach (@{$options{status}}) {
          if ($self->{myerrors_mask}->{uc($_)} > $current_status) {
              $current_status = $self->{myerrors_mask}->{uc($_)};
          }
      }
      return $self->{myerrors}->{$current_status};
  }
  
  sub get_litteral_status {
      my ($self, %options) = @_;
      
      if (defined($options{status})) {
          if (defined($self->{errors_num}->{$options{status}})) {
              return $self->{errors_num}->{$options{status}};
          }
          return $options{status};
      } else {
          return $self->{myerrors}->{$self->{global_status}};
      }
  }
  
  sub is_status {
      my ($self, %options) = @_;
      # $options{value} = string status 
      # $options{litteral} = value is litteral
      # $options{compare} = string status 
  
      if (defined($options{litteral})) {
          my $value = defined($options{value}) ? $options{value} : $self->get_litteral_status();
      
          if (uc($value) eq uc($options{compare})) {
              return 1;
          }
          return 0;
      }
  
      my $value = defined($options{value}) ? $options{value} : $self->{global_status};
      my $dec_val = $self->{myerrors_mask}->{$value};
      my $lresult = $value & $dec_val;
      # Need to manage 0
      if ($lresult > 0 || ($dec_val == 0 && $value == 0)) {
          return 1;
      }
      return 0;
  }
  
  sub is_litteral_status {
      my ($self, %options) = @_;
      # $options{status} = string status
  
      if (defined($self->{errors}->{uc($options{status})})) {
          return 1;
      }
  
      return 0;
  }
  
  sub create_json_document {
      my ($self) = @_;
  
      if (centreon::plugins::misc::mymodule_load(no_quit => 1, module => 'JSON',
                                             error_msg => "Cannot load module 'JSON'.")) {
          print "Cannot load module 'JSON'\n";
          $self->exit(exit_litteral => 'unknown');
      }
      $self->{is_output_json} = 1;
      $self->{json_output} = JSON->new->utf8();
  }
  
  sub create_xml_document {
      my ($self) = @_;
  
      if (centreon::plugins::misc::mymodule_load(no_quit => 1, module => 'XML::LibXML',
                                             error_msg => "Cannot load module 'XML::LibXML'.")) {
          print "Cannot load module 'XML::LibXML'\n";
          $self->exit(exit_litteral => 'unknown');
      }
      $self->{is_output_xml} = 1;
      $self->{xml_output} = XML::LibXML::Document->new('1.0', 'utf-8');
  }
  
  sub plugin {
      my ($self, %options) = @_;
      # $options{name} = string name
      
      if (defined($options{name})) {
          $self->{plugin} = $options{name};
      }
      return $self->{plugin};
  }
  
  sub mode {
      my ($self, %options) = @_;
      # $options{name} = string name
  
      if (defined($options{name})) {
          $self->{mode} = $options{name};
      }
      return $self->{mode};
  }
  
  sub add_disco_format {
      my ($self, %options) = @_;
  
      push @{$self->{disco_elements}}, @{$options{elements}};
  }
  
  sub display_disco_format {
      my ($self, %options) = @_;
      
      if (defined($self->{option_results}->{output_xml})) {
          $self->create_xml_document();
      
          my $root = $self->{xml_output}->createElement('data');
          $self->{xml_output}->setDocumentElement($root);
  
          foreach (@{$self->{disco_elements}}) {
              my $child = $self->{xml_output}->createElement("element");
              $child->appendText($_);
              $root->addChild($child);
          }
  
          print $self->{xml_output}->toString(1);
      } elsif (defined($self->{option_results}->{output_json})) {
          $self->create_json_document();
          my $json_content = {data => [] };
          foreach (@{$self->{disco_elements}}) {
              push @{$json_content->{data}}, $_;
          }
          
          print $self->{json_output}->encode($json_content);
      }
  }
  
  sub display_disco_show {
      my ($self, %options) = @_;
      
       if (defined($self->{option_results}->{output_xml})) {
          $self->create_xml_document();
          
          my $root = $self->{xml_output}->createElement('data');
          $self->{xml_output}->setDocumentElement($root);
  
          foreach (@{$self->{disco_entries}}) {
              my $child = $self->{xml_output}->createElement('label');
              foreach my $key (keys %$_) {
                  $child->setAttribute($key, $_->{$key});
              }
              $root->addChild($child);
          }
  
          print $self->{xml_output}->toString(1);
      } elsif (defined($self->{option_results}->{output_json})) {
          $self->create_json_document();
          my $json_content = {data => [] };
          foreach (@{$self->{disco_entries}}) {
              my %values = ();
              foreach my $key (keys %$_) {
                  $values{$key} = $_->{$key};
              }
              push @{$json_content->{data}}, {%values};
          }
          
          print $self->{json_output}->encode($json_content);
      }
  }
  
  sub to_utf8 {
      my ($self, $value) = @_;
      
      if ($self->{encode_utf8_import} == 0) {
          # Some Perl version dont have the following module (like Perl 5.6.x)
          if (centreon::plugins::misc::mymodule_load(no_quit => 1, module => 'Encode',
                                                     error_msg => "Cannot load module 'Encode'.")) {
              print "Cannot load module 'Encode'\n";
              $self->exit(exit_litteral => 'unknown');
          }
          
          $self->{encode_utf8_import} = 1;
          eval '$self->{perlqq} = Encode::PERLQQ';
      }
      
      return centreon::plugins::misc::trim(Encode::decode('UTF-8', $value, $self->{perlqq}));
  }
  
  sub add_disco_entry {
      my ($self, %options) = @_;
      
      push @{$self->{disco_entries}}, {%options};
  }
  
  sub is_disco_format {
      my ($self) = @_;
  
      if (defined($self->{option_results}->{disco_format})) {
          return 1;
      }
      return 0;
  }
  
  sub is_disco_show {
      my ($self) = @_;
  
      if (defined($self->{option_results}->{disco_show})) {
          return 1;
      }
      return 0;
  }
  
  sub is_verbose {
      my ($self) = @_;
  
      if (defined($self->{option_results}->{verbose})) {
          return 1;
      }
      return 0;
  }
  
  sub is_debug {
      my ($self) = @_;
  
      if (defined($self->{option_results}->{debug})) {
          return 1;
      }
      return 0;
  }
  
  sub use_new_perfdata {
      my ($self, %options) = @_;
  
      $self->{option_results}->{use_new_perfdata} = $options{value}
          if (defined($options{value}));
      if (defined($self->{option_results}->{use_new_perfdata})) {
          return 1;
      }
      return 0;
  }
  
  sub get_instance_perfdata_separator {
      my ($self) = @_;
  
      if (defined($self->{option_results}->{use_new_perfdata})) {
          return '~';
      }
      return '_';
  }
  
  sub parse_pfdata_scale {
      my ($self, %options) = @_;
      
      # --extend-perfdata=traffic_in,,scale(Mbps),mbps
      my $args = { unit => 'auto' };
      if ($options{args} =~ /^([KMGTPEkmgtpe])?(B|b|bps|Bps|b\/s|auto)$/) {
          $args->{quantity} = defined($1) ? $1 : '';
          $args->{unit} = $2;
      } elsif ($options{args} ne '') {
          return 1;
      }
      
      return (0, $args);
  }
  
  sub parse_pfdata_math {
      my ($self, %options) = @_;
  
      # --extend-perfdata=perfx,,math(current + 10 - 100, 1)
      my $args = { math => undef, apply_threshold => 0 };
      my ($math, $apply_threshold) = split /\|/, $options{args};
      if ($math =~ /^((?:[\s\.\-\+\*\/0-9\(\)]|current)+)$/) {
          $args->{math} = $1;
      } elsif ($options{args} ne '') {
          return 1;
      }
      
      if (defined($apply_threshold) && $apply_threshold =~ /^\s*(0|1)\s*$/ ) {
          $args->{apply_threshold} = $1;
      }
      
      return (0, $args);
  }
  
  sub parse_group_pfdata {
      my ($self, %options) = @_;
      
      $options{args} =~ s/^\s+//;
      $options{args} =~ s/\s+$//;
      my $args = { pattern_pf => $options{args} };
      return $args;
  }
  
  sub parse_pfdata_min {
      my ($self, %options) = @_;
      
      my $args = $self->parse_group_pfdata(%options);
      return (0, $args);
  }
  
  sub parse_pfdata_max {
      my ($self, %options) = @_;
      
      my $args = $self->parse_group_pfdata(%options);
      return (0, $args);
  }
  
  sub parse_pfdata_average {
      my ($self, %options) = @_;
      
      my $args = $self->parse_group_pfdata(%options);
      return (0, $args);
  }
  
  sub parse_pfdata_sum {
      my ($self, %options) = @_;
      
      my $args = $self->parse_group_pfdata(%options);
      return (0, $args);
  }
  
  sub apply_pfdata_scale {
      my ($self, %options) = @_;
      
      return if (${$options{perf}}->{unit} !~ /^([KMGTPEkmgtpe])?(B|b|bps|Bps|b\/s)$/);
      
      my ($src_quantity, $src_unit) = ($1, $2);
      my ($value, $dst_quantity, $dst_unit) = centreon::plugins::misc::scale_bytesbit(value => ${$options{perf}}->{value},
          src_quantity => $src_quantity, src_unit => $src_unit, dst_quantity => $options{args}->{quantity}, dst_unit => $options{args}->{unit});
      ${$options{perf}}->{value} = sprintf("%.2f", $value);
      if (defined($dst_unit)) {
         ${$options{perf}}->{unit} = $dst_quantity . $dst_unit;
      } else {
          ${$options{perf}}->{unit} = $options{args}->{quantity} . $options{args}->{unit};
      }
      
      if (defined(${$options{perf}}->{max}) && ${$options{perf}}->{max} ne '') {
          ($value) = centreon::plugins::misc::scale_bytesbit(value => ${$options{perf}}->{max},
              src_quantity => $src_quantity, src_unit => $src_unit, 
              dst_quantity => defined($dst_unit) ? $dst_quantity : $options{args}->{quantity}, 
              dst_unit => defined($dst_unit) ? $dst_unit : $options{args}->{unit});
          ${$options{perf}}->{max} = sprintf('%.2f', $value);
      }
      
      foreach my $threshold ('warning', 'critical') {
          next if (${$options{perf}}->{$threshold} eq '');
          my ($status, $result) = centreon::plugins::misc::parse_threshold(threshold => ${$options{perf}}->{$threshold});
          next if ($status == 0);
  
          if ($result->{start} ne '' && $result->{infinite_neg} == 0) {
              ($result->{start}) = centreon::plugins::misc::scale_bytesbit(value => $result->{start},
                  src_quantity => $src_quantity, src_unit => $src_unit, 
                  dst_quantity => defined($dst_unit) ? $dst_quantity : $options{args}->{quantity}, 
                  dst_unit => defined($dst_unit) ? $dst_unit : $options{args}->{unit});
          }
          if ($result->{end} ne '' && $result->{infinite_pos} == 0) {
              ($result->{end}) = centreon::plugins::misc::scale_bytesbit(value => $result->{end},
                  src_quantity => $src_quantity, src_unit => $src_unit, 
                  dst_quantity => defined($dst_unit) ? $dst_quantity : $options{args}->{quantity}, 
                  dst_unit => defined($dst_unit) ? $dst_unit : $options{args}->{unit});
          }
          
          ${$options{perf}}->{$threshold} = centreon::plugins::misc::get_threshold_litteral(%$result);
      }
  }
  
  sub apply_pfdata_invert {
      my ($self, %options) = @_;
      
      return if (!defined(${$options{perf}}->{max}) || ${$options{perf}}->{max} eq '');
      
      ${$options{perf}}->{value} = ${$options{perf}}->{max} - ${$options{perf}}->{value};
      foreach my $threshold ('warning', 'critical') {
          next if (${$options{perf}}->{$threshold} eq '');
          my ($status, $result) = centreon::plugins::misc::parse_threshold(threshold => ${$options{perf}}->{$threshold});
          next if ($status == 0);
          
          my $tmp = { arobase => $result->{arobase}, infinite_pos => 0, infinite_neg => 0, start => $result->{start}, end => $result->{end} };
          $tmp->{infinite_neg} = 1 if ($result->{infinite_pos} == 1);
          $tmp->{infinite_pos} = 1 if ($result->{infinite_neg} == 1);
  
          if ($result->{start} ne '' && $result->{infinite_neg} == 0) {
              $tmp->{end} = ${$options{perf}}->{max} - $result->{start};
          }
          if ($result->{end} ne '' && $result->{infinite_pos} == 0) {
              $tmp->{start} = ${$options{perf}}->{max} - $result->{end};
          }
          
          ${$options{perf}}->{$threshold} = centreon::plugins::misc::get_threshold_litteral(%$tmp);
      }
  }
  
  sub apply_pfdata_percent {
      my ($self, %options) = @_;
  
      return if (!defined(${$options{perf}}->{max}) || ${$options{perf}}->{max} eq '');
      
      ${$options{perf}}->{value} = sprintf('%.2f', ${$options{perf}}->{value} * 100 / ${$options{perf}}->{max});
      ${$options{perf}}->{unit} = '%';
      foreach my $threshold ('warning', 'critical') {
          next if (${$options{perf}}->{$threshold} eq '');
          my ($status, $result) = centreon::plugins::misc::parse_threshold(threshold => ${$options{perf}}->{$threshold});
          next if ($status == 0);
  
          if ($result->{start} ne '' && $result->{infinite_neg} == 0) {
              $result->{start} = sprintf('%.2f', $result->{start} * 100 / ${$options{perf}}->{max});
          }
          if ($result->{end} ne '' && $result->{infinite_pos} == 0) {
              $result->{end} = sprintf('%.2f', $result->{end} * 100 / ${$options{perf}}->{max});
          }
          
          ${$options{perf}}->{$threshold} = centreon::plugins::misc::get_threshold_litteral(%$result);
      }
      
      ${$options{perf}}->{max} = 100; 
  }
  
  sub apply_pfdata_math {
      my ($self, %options) = @_;
      
      my $math = $options{args}->{math};
      $math =~ s/current/\$value/g;
      
      my $value = ${$options{perf}}->{value};
      eval "\${\$options{perf}}->{value} = $math";
      
      return if ($options{args}->{apply_threshold} == 0);
      
      foreach my $threshold ('warning', 'critical') {
          next if (${$options{perf}}->{$threshold} eq '');
          my ($status, $result) = centreon::plugins::misc::parse_threshold(threshold => ${$options{perf}}->{$threshold});
          next if ($status == 0);
  
          if ($result->{start} ne '' && $result->{infinite_neg} == 0) {
              $value = $result->{start};
              eval "\$result->{start} = $math";
          }
          if ($result->{end} ne '' && $result->{infinite_pos} == 0) {
              $value = $result->{end};
              eval "\$result->{end} = $math";
          }
          
          ${$options{perf}}->{$threshold} = centreon::plugins::misc::get_threshold_litteral(%$result);
      }
      
      ${$options{perf}}->{max} = 100;
  }
  
  sub apply_pfdata_min {
      my ($self, %options) = @_;
  
      my $pattern_pf;
      eval "\$pattern_pf = \"$options{args}->{pattern_pf}\"";
      my $min;
      for (my $i = 0; $i < scalar(@{$self->{perfdatas}}); $i++) {
          next if ($self->{perfdatas}->[$i]->{label} !~ /$pattern_pf/);
          next if ($self->{perfdatas}->[$i]->{value} !~ /\d+/);
          $min = $self->{perfdatas}->[$i]->{value}
              if (!defined($min) || $min > $self->{perfdatas}->[$i]->{value});
      }
  
      ${$options{perf}}->{value} = $min
          if (defined($min));
  }
  
  sub apply_pfdata_max {
      my ($self, %options) = @_;
  
      my $pattern_pf;
      eval "\$pattern_pf = \"$options{args}->{pattern_pf}\"";
      my $max;
      for (my $i = 0; $i < scalar(@{$self->{perfdatas}}); $i++) {
          next if ($self->{perfdatas}->[$i]->{label} !~ /$pattern_pf/);
          next if ($self->{perfdatas}->[$i]->{value} !~ /\d+/);
          $max = $self->{perfdatas}->[$i]->{value}
              if (!defined($max) || $max < $self->{perfdatas}->[$i]->{value});
      }
  
      ${$options{perf}}->{value} = $max
          if (defined($max));
  }
  
  sub apply_pfdata_sum {
      my ($self, %options) = @_;
  
      my $pattern_pf;
      eval "\$pattern_pf = \"$options{args}->{pattern_pf}\"";
      my ($sum, $num) = (0, 0);
      for (my $i = 0; $i < scalar(@{$self->{perfdatas}}); $i++) {
          next if ($self->{perfdatas}->[$i]->{label} !~ /$pattern_pf/);
          next if ($self->{perfdatas}->[$i]->{value} !~ /\d+/);
          $sum += $self->{perfdatas}->[$i]->{value};
          $num++;
      }
  
      ${$options{perf}}->{value} = $sum
          if ($num > 0);
  }
  
  sub apply_pfdata_average {
      my ($self, %options) = @_;
  
      my $pattern_pf;
      eval "\$pattern_pf = \"$options{args}->{pattern_pf}\"";
      my ($sum, $num) = (0, 0);
      for (my $i = 0; $i < scalar(@{$self->{perfdatas}}); $i++) {
          next if ($self->{perfdatas}->[$i]->{label} !~ /$pattern_pf/);
          next if ($self->{perfdatas}->[$i]->{value} !~ /\d+/);
          $sum += $self->{perfdatas}->[$i]->{value};
          $num++;
      }
  
      ${$options{perf}}->{value} = sprintf("%.2f", ($sum / $num))
          if ($num > 0);
  }
  
  sub load_perfdata_extend_args {
      my ($self, %options) = @_;
  
      foreach (
          [$self->{option_results}->{change_perfdata}, 1],
          [$self->{option_results}->{extend_perfdata}, 2],
          [$self->{option_results}->{extend_perfdata_group}, 3],
      ) {
          next if (!defined($_->[0]));
          foreach my $arg (@{$_->[0]}) {
              $self->parse_perfdata_extend_args(arg => $arg, type => $_->[1]);
          }
      }
  }
  
  sub parse_perfdata_extend_args {
      my ($self, %options) = @_;
      
      # --extend-perfdata=searchlabel,newlabel,method[,[newuom],[min],[max]]
      my ($pfdata_match, $pfdata_substitute, $method, $uom_sub, $min_sub, $max_sub) = 
          split /,/, $options{arg};
      return if ((!defined($pfdata_match) || $pfdata_match eq '') && $options{type} != 3);
      
      $self->{pfdata_extends} = [] if (!defined($self->{pfdata_extends}));
      my $pfdata_extends = {
          pfdata_match => defined($pfdata_match) && $pfdata_match ne '' ? $pfdata_match : undef,
          pfdata_substitute => defined($pfdata_substitute) && $pfdata_substitute ne '' ? $pfdata_substitute : undef,
          uom_sub => defined($uom_sub) && $uom_sub ne '' ? $uom_sub : undef,
          min_sub => defined($min_sub) && $min_sub ne '' ? $min_sub : undef,
          max_sub => defined($max_sub) && $max_sub ne '' ? $max_sub : undef,
          type => $options{type}
      };
  
      if (defined($method) && $method ne '') {
          if ($method !~ /^\s*(invert|percent|scale|math|min|max|average|sum)\s*\(\s*(.*?)\s*\)\s*$/) {
              $self->output_add(long_msg => "method in argument '$options{arg}' is unknown", debug => 1);
              return ;
          }
          
          $pfdata_extends->{method_name} = $1;
          my $args = $2;
          if (my $func = $self->can('parse_pfdata_' . $pfdata_extends->{method_name})) {
              (my $status, $pfdata_extends->{method_args}) = $func->($self, args => $args);
              if ($status == 1) {
                  $self->output_add(long_msg => "argument in method '$options{arg}' is unknown", debug => 1);
                  return ;
              }
          }
      }
  
      push  @{$self->{pfdata_extends}}, $pfdata_extends;
  }
  
  sub apply_perfdata_explode {
      my ($self, %options) = @_;
      
      return if ($self->{explode_perfdata_total} == 0);
      foreach (@{$self->{perfdatas}}) {
          next if ($_->{max} eq '');
          if ($self->{explode_perfdata_total} == 2) {
              $self->perfdata_add(label => $_->{label} . '_max', value => $_->{max});
              next;
          }
          foreach my $regexp (keys %{$self->{explode_perfdatas}}) {
              if ($_->{label} =~ /$regexp/) {
                  $self->perfdata_add(label => $self->{explode_perfdatas}->{$regexp}, value => $_->{max});
                  last;
              }
          }
      }
  }
  
  sub apply_perfdata_extend {
      my ($self, %options) = @_;
  
      foreach my $extend (@{$self->{pfdata_extends}}) {
          my $new_pfdata = [];
          
          # Manage special case when type group and pfdata_match empty
          if ($extend->{type} == 3 && (!defined($extend->{pfdata_match}) || $extend->{pfdata_match} eq '')) {
              next if (!defined($extend->{pfdata_substitute}) || $extend->{pfdata_substitute} eq '');
              my $new_perf = {
                  label => $extend->{pfdata_substitute}, value => '',
                  unit => defined($extend->{uom_sub}) ? $extend->{uom_sub} : '',
                  warning => '', critical => '',
                  min => defined($extend->{min_sub}) ? $extend->{min_sub} : '',
                  max => defined($extend->{max_sub}) ? $extend->{max_sub} : ''
              };
  
              if (defined($extend->{method_name})) {
                  my $func = $self->can('apply_pfdata_' . $extend->{method_name});
                  $func->($self, perf => \$new_perf, args => $extend->{method_args});
              }
  
              if (length($new_perf->{value})) {
                  push @{$self->{perfdatas}}, $new_perf;
              }
              next;
          }
          
          for (my $i = 0; $i < scalar(@{$self->{perfdatas}}); $i++) {
              next if ($self->{perfdatas}->[$i]->{label} !~ /$extend->{pfdata_match}/);
              
              my $new_perf = { %{$self->{perfdatas}->[$i]} };
              if ($extend->{type} == 3) {
                  $new_perf = { label => $self->{perfdatas}->[$i]->{label}, value => '', unit => '', warning => '', critical => '', min => '', max => '' };
              }
              
              if (defined($extend->{pfdata_substitute})) {
                  eval "\$new_perf->{label} =~ s{$extend->{pfdata_match}}{$extend->{pfdata_substitute}}";
              }
  
              if (defined($extend->{method_name})) {
                  my $func = $self->can('apply_pfdata_' . $extend->{method_name});
                  $func->($self, perf => \$new_perf, args => $extend->{method_args});
              }
              
              $new_perf->{unit} = $extend->{uom_sub} if (defined($extend->{uom_sub}));
              $new_perf->{min} = $extend->{min_sub} if (defined($extend->{min_sub}));
              $new_perf->{max} = $extend->{max_sub} if (defined($extend->{max_sub}));
  
              if ($extend->{type} == 1) {
                  $self->{perfdatas}->[$i] = $new_perf;
              } else {
                  push @$new_pfdata, $new_perf if (length($new_perf->{value}));
              }
          }
  
          push @{$self->{perfdatas}}, @$new_pfdata;
      }
  }
  
  sub change_perfdata {
      my ($self, %options) = @_;
      
      $self->apply_perfdata_extend();
      $self->apply_perfdata_explode();
  }
  
  1;
  
  
  =head1 NAME
  
  Output class
  
  =head1 SYNOPSIS
  
  -
  
  =head1 OUTPUT OPTIONS
  
  =over 8
  
  =item B<--verbose>
  
  Display long output.
  
  =item B<--debug>
  
  Display also debug messages.
  
  =item B<--filter-perfdata>
  
  Filter perfdata that match the regexp.
  
  =item B<--explode-perfdata-max>
  
  Put max perfdata (if it exist) in a specific perfdata 
  (without values: same with '_max' suffix) (Multiple options)
  
  =item B<--change-perfdata> B<--extend-perfdata> 
  
  Change or extend perfdata. 
  Syntax: --extend-perfdata=searchlabel,newlabel,target[,[newuom],[min],[max]]
  
  Common examples:
  
  =over 4
  
  Change storage free perfdata in used: --change-perfdata=free,used,invert()
  
  Change storage free perfdata in used: --change-perfdata=used,free,invert()
  
  Scale traffic values automaticaly: --change-perfdata=traffic,,scale(auto)
  
  Scale traffic values in Mbps: --change-perfdata=traffic_in,,scale(Mbps),mbps
  
  Change traffic values in percent: --change-perfdata=traffic_in,,percent()
  
  =back
  
  =item B<--extend-perfdata-group> 
  
  Extend perfdata from multiple perfdatas (methods in target are: min, max, average, sum)
  Syntax: --extend-perfdata-group=searchlabel,newlabel,target[,newuom]
  
  Common examples:
  
  =over 4
  
  Sum wrong packets from all interfaces (with interface need  --units-errors=absolute): --extend-perfdata-group=',packets_wrong,sum(packets_(discard|error)_(in|out))'
  
  Sum traffic by interface: --extend-perfdata-group='traffic_in_(.*),traffic_$1,sum(traffic_(in|out)_$1)'
  
  =back
  
  =item B<--change-short-output>
  
  Change short output display. --change-short-output=pattern~replace~modifier
  
  =item B<--range-perfdata>
  
  Change perfdata range thresholds display: 
  1 = start value equals to '0' is removed, 2 = threshold range is not display.
  
  =item B<--filter-uom>
  
  Filter UOM that match the regexp.
  
  =item B<--opt-exit>
  
  Optional exit code for an execution error (i.e. wrong option provided,
  SSH connection refused, timeout, etc)
  (Default: unknown).
  
  =item B<--output-xml>
  
  Display output in XML format.
  
  =item B<--output-json>
  
  Display output in JSON format.
  
  =item B<--output-openmetrics>
  
  Display metrics in OpenMetrics format.
  
  =item B<--output-file>
  
  Write output in file (can be used with json and xml options)
  
  =item B<--disco-format>
  
  Display discovery arguments (if the mode manages it).
  
  =item B<--disco-show>
  
  Display discovery values (if the mode manages it).
  
  =item B<--float-precision>
  
  Set the float precision for thresholds (Default: 8).
  
  =head1 DESCRIPTION
  
  B<output>.
  
  =cut
CENTREON_PLUGINS_OUTPUT

$fatpacked{"centreon/plugins/perfdata.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'CENTREON_PLUGINS_PERFDATA';
  #
  # Copyright 2019 Centreon (http://www.centreon.com/)
  #
  # Centreon is a full-fledged industry-strength solution that meets
  # the needs in IT infrastructure and application monitoring for
  # service performance.
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  #
  
  package centreon::plugins::perfdata;
  
  use strict;
  use warnings;
  use centreon::plugins::misc;
  
  sub new {
      my ($class, %options) = @_;
      my $self  = {};
      bless $self, $class;
  
      $self->{output} = $options{output};
      # Typical Nagios Perfdata 'with ~ @ ..'
      $self->{threshold_label} = {};
      $self->{float_precision} = defined($self->{output}->{option_results}->{float_precision}) && $self->{output}->{option_results}->{float_precision} =~ /\d+/ ?  
          int($self->{output}->{option_results}->{float_precision}) : 8;
  
      return $self;
  }
  
  sub get_perfdata_for_output {
      my ($self, %options) = @_;
      # $options{label} : threshold label
      # $options{total} : percent threshold to transform in global
      # $options{cast_int} : cast absolute to int
      # $options{op} : operator to apply to start/end value (uses with 'value'})
      # $options{value} : value to apply with 'op' option
      
      if (!defined($self->{threshold_label}->{$options{label}}->{value}) || $self->{threshold_label}->{$options{label}}->{value} eq '') {
          return '';
      }
      
      my %perf_value = %{$self->{threshold_label}->{$options{label}}};
      
      if (defined($options{op}) && defined($options{value})) {
          eval "\$perf_value{start} = \$perf_value{start} $options{op} \$options{value}" if ($perf_value{infinite_neg} == 0);
          eval "\$perf_value{end} = \$perf_value{end} $options{op} \$options{value}" if ($perf_value{infinite_pos} == 0);
      }
      if (defined($options{total})) {
          $perf_value{start} = $perf_value{start} * $options{total} / 100 if ($perf_value{infinite_neg} == 0);
          $perf_value{end} = $perf_value{end} * $options{total} / 100 if ($perf_value{infinite_pos} == 0);
          $perf_value{start} = sprintf("%.2f", $perf_value{start}) if ($perf_value{infinite_neg} == 0 && (!defined($options{cast_int}) || $options{cast_int} != 1));
          $perf_value{end} = sprintf("%.2f", $perf_value{end}) if ($perf_value{infinite_pos} == 0 && (!defined($options{cast_int}) || $options{cast_int} != 1));
      }
      
      $perf_value{start} = int($perf_value{start}) if ($perf_value{infinite_neg} == 0 && defined($options{cast_int}) && $options{cast_int} == 1);
      $perf_value{end} = int($perf_value{end}) if ($perf_value{infinite_pos} == 0 && defined($options{cast_int}) && $options{cast_int} == 1);
      
      my $perf_output = ($perf_value{arobase} == 1 ? '@' : '') . 
                        (($perf_value{infinite_neg} == 0) ? $perf_value{start} : '~') . 
                        ':' . 
                        (($perf_value{infinite_pos} == 0) ? $perf_value{end} : '');
  
      return $perf_output;
  }
  
  sub threshold_validate {
      my ($self, %options) = @_;
      # $options{label} : threshold label
      # $options{value} : threshold value
  
      my $status = 1;
      $self->{threshold_label}->{$options{label}} = { value => $options{value}, start => undef, end => undef, arobase => undef, infinite_neg => undef, infinite_pos => undef };
      if (!defined($options{value}) || $options{value} eq '') {
          return $status;
      }
  
      ($status, my $result_perf) = 
          centreon::plugins::misc::parse_threshold(threshold => $options{value});
      $self->{threshold_label}->{$options{label}} = { %{$self->{threshold_label}->{$options{label}}}, %$result_perf };
      
      $self->{threshold_label}->{$options{label}}->{start_precision} = $self->{threshold_label}->{$options{label}}->{start};
      if ($self->{threshold_label}->{$options{label}}->{start} =~ /[.,]/) {
          $self->{threshold_label}->{$options{label}}->{start_precision} = sprintf("%.$self->{output}->{option_results}->{float_precision}f", $self->{threshold_label}->{$options{label}}->{start});
      }
      
      $self->{threshold_label}->{$options{label}}->{end_precision} = $self->{threshold_label}->{$options{label}}->{end};
      if ($self->{threshold_label}->{$options{label}}->{end} =~ /[.,]/) {
          $self->{threshold_label}->{$options{label}}->{end_precision} = sprintf("%.$self->{output}->{option_results}->{float_precision}f", $self->{threshold_label}->{$options{label}}->{end});
      }
      
      return $status;
  }
  
  sub threshold_check {
      my ($self, %options) = @_;
      # Can check multiple threshold. First match: out. Order is important
      # options{value}: value to compare
      # options{threshold}: ref to an array (example: [ {label => 'warning', exit_litteral => 'warning' }, {label => 'critical', exit_litteral => 'critical'} ]
      if ($options{value} =~ /[.,]/) {
          $options{value} = sprintf("%.$self->{output}->{option_results}->{float_precision}f", $options{value});
      }
      
      foreach (@{$options{threshold}}) {
          next if (!defined($self->{threshold_label}->{$_->{label}}));
          next if (!defined($self->{threshold_label}->{$_->{label}}->{value}) || $self->{threshold_label}->{$_->{label}}->{value} eq '');
          if ($self->{threshold_label}->{$_->{label}}->{arobase} == 0 && ($options{value} < $self->{threshold_label}->{$_->{label}}->{start_precision} || $options{value} > $self->{threshold_label}->{$_->{label}}->{end_precision})) {
              return $_->{exit_litteral};
          } elsif ($self->{threshold_label}->{$_->{label}}->{arobase}  == 1 && ($options{value} >= $self->{threshold_label}->{$_->{label}}->{start_precision} && $options{value} <= $self->{threshold_label}->{$_->{label}}->{end_precision})) {
              return $_->{exit_litteral};
          }
      }
  
      return 'ok';
  }
  
  sub trim {
      my ($self, $value) = @_;
      
      $value =~ s/^[ \t]+//;
      $value =~ s/[ \t]+$//;
      return $value;
  }
  
  sub change_bytes {
      my ($self, %options) = @_;
  
      my $value = $options{value};
      my $divide = defined($options{network}) ? 1000 : 1024;
      my @units = ('K', 'M', 'G', 'T');
      my $unit = '';
      my $sign = '';
  
      $sign = '-' if ($value != abs($value));
      $value = abs($value);
      
      for (my $i = 0; $i < scalar(@units); $i++) {
          last if (($value / $divide) < 1);
          $unit = $units[$i];
          $value = $value / $divide;
      }
  
      return (sprintf('%.2f', $sign . $value), $unit . (defined($options{network}) ? 'b' : 'B'));
  }
  
  1;
  
  
  =head1 NAME
  
  Perfdata class
  
  =head1 SYNOPSIS
  
  -
  
  =head1 DESCRIPTION
  
  B<perfdata>.
  
  =cut
CENTREON_PLUGINS_PERFDATA

$fatpacked{"centreon/plugins/script.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'CENTREON_PLUGINS_SCRIPT';
  #
  # Copyright 2019 Centreon (http://www.centreon.com/)
  #
  # Centreon is a full-fledged industry-strength solution that meets
  # the needs in IT infrastructure and application monitoring for
  # service performance.
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  #
  
  package centreon::plugins::script;
  
  use strict;
  use warnings;
  use centreon::plugins::output;
  use centreon::plugins::misc;
  use FindBin;
  use Pod::Usage;
  use Pod::Find qw(pod_where);
  
  my %handlers = (DIE => {});
  
  my $global_version = '20190704 (727d0077)';
  my $alternative_fatpacker = 1;
  
  sub new {
      my ($class) = @_;
      my $self  = {};
      bless $self, $class;
  
      $self->{options} = undef;
      $self->{plugin} = undef;
      $self->{help} = undef;
  
      # Avoid to destroy because it keeps a ref on the object. 
      # A problem if we execute it multiple times in the same perl execution
      # Use prepare_destroy
      $self->set_signal_handlers;
      return $self;
  }
  
  sub prepare_destroy {
      my ($self) = @_;
  
      delete $handlers{DIE}->{$self};
  }
  
  sub set_signal_handlers {
      my $self = shift;
  
      $SIG{__DIE__} = \&class_handle_DIE;
      $handlers{DIE}->{$self} = sub { $self->handle_DIE($_[0]) };
  }
  
  sub class_handle_DIE {
      my ($msg) = @_;
  
      foreach (keys %{$handlers{DIE}}) {
          &{$handlers{DIE}->{$_}}($msg);
      }
  }
  
  sub handle_DIE {
      my ($self, $msg) = @_;
  
      return unless defined $^S and $^S == 0; # Ignore errors in eval
      $self->{output}->add_option_msg(short_msg => $msg);
      $self->{output}->die_exit();
  }
  
  sub get_global_version {
      return $global_version;
  }
  
  sub get_plugin {
      my ($self) = @_;
      
      ######
      # Need to load global 'Output' and 'Options'
      ######
      if ($alternative_fatpacker == 0) {
          require centreon::plugins::options;
          $self->{options} = centreon::plugins::options->new();
      } else {
          require centreon::plugins::alternative::FatPackerOptions;
          $self->{options} = centreon::plugins::alternative::FatPackerOptions->new();
      }
      $self->{output} = centreon::plugins::output->new(options => $self->{options});
      $self->{options}->set_output(output => $self->{output});
  
      $self->{options}->add_options(arguments => {
          'plugin:s'          => { name => 'plugin' },
          'list-plugin'       => { name => 'list_plugin' }, 
          'help'              => { name => 'help' },
          'ignore-warn-msg'   => { name => 'ignore_warn_msg' },
          'version'           => { name => 'version' },
          'runas:s'           => { name => 'runas' },
          'environment:s%'    => { name => 'environment' },
          'convert-args:s'    => { name => 'convert_args' },
      });
  
      $self->{options}->parse_options();
  
      $self->{plugin} = $self->{options}->get_option(argument => 'plugin' );
      $self->{list_plugin} = $self->{options}->get_option(argument => 'list_plugin' );
      $self->{help} = $self->{options}->get_option(argument => 'help' );
      $self->{version} = $self->{options}->get_option(argument => 'version' );
      $self->{runas} = $self->{options}->get_option(argument => 'runas' );
      $self->{environment} = $self->{options}->get_option(argument => 'environment' );
      $self->{ignore_warn_msg} = $self->{options}->get_option(argument => 'ignore_warn_msg' );
      $self->{convert_args} = $self->{options}->get_option(argument => 'convert_args' );
  
      $self->{output}->plugin(name => $self->{plugin});
      $self->{output}->check_options(option_results => $self->{options}->get_options());
  
      $self->{options}->clean();
  }
  
  sub convert_args {
      my ($self) = @_;
      
      if ($self->{convert_args} =~ /^(.+?),(.*)/) {
          my ($search, $replace) = ($1, $2);
          for (my $i = 0; $i <= $#ARGV; $i++) {
              eval "\$ARGV[\$i] =~ s/$search/$replace/g";
          }
      }
  }
  
  sub display_local_help {
      my ($self) = @_;
  
      my $stdout;
      if ($self->{help}) {
          local *STDOUT;
          open STDOUT, '>', \$stdout;
          
          if ($alternative_fatpacker == 0) {
              pod2usage(-exitval => 'NOEXIT', -input => pod_where({-inc => 1}, __PACKAGE__));
          } else {
              my $pp = __PACKAGE__ . '.pm';
              $pp =~ s{::}{/}g;
              my $content_class = $INC{$pp}->{$pp};
              open my $str_fh, '<', \$content_class;
              pod2usage(-exitval => 'NOEXIT', -input => $str_fh);
              close $str_fh;
          }
      }
      
      $self->{output}->add_option_msg(long_msg => $stdout) if (defined($stdout));
  }
  
  sub check_directory {
      my ($self, $directory) = @_;
      
      opendir(my $dh, $directory) || return ;
      while (my $filename = readdir $dh) {
          $self->check_directory($directory . '/' . $filename) if ($filename !~ /^\./ && -d $directory . '/' . $filename);
          if ($filename eq 'plugin.pm') {
              my $stdout = '';
              
              {
                  local *STDOUT;
                  open STDOUT, '>', \$stdout;
                  pod2usage(-exitval => 'NOEXIT', -input => $directory . "/" . $filename,
                            -verbose => 99, 
                            -sections => "PLUGIN DESCRIPTION");
              }
              $self->{plugins_result}->{$directory . "/" . $filename} = $stdout;
          }
      }
      closedir $dh;
  }
  
  sub fatpacker_find_plugin {
      my ($self) = @_;
      
      my $plugins = [];
      foreach (@INC) {
          next if (ref($_) !~ /FatPacked/);
          foreach my $name (keys %$_) {
              if ($name =~ /plugin.pm$/) {
                  push @$plugins, $name;
              }
          }
      }
      
      return $plugins;
  }
  
  sub check_plugin_option {
      my ($self) = @_;
      
      if (defined($self->{version})) {
          $self->{output}->add_option_msg(short_msg => 'Global Version: ' . $global_version);
          $self->{output}->option_exit(nolabel => 1);
      }
      
      my $no_plugin = 1;
      if ($alternative_fatpacker == 1) {
          my $integrated_plugins = $self->fatpacker_find_plugin();
          if (scalar(@$integrated_plugins) == 1) {
              $self->{plugin} = $integrated_plugins->[0];
              $no_plugin = 0;
          }
      }
      
      if ($no_plugin == 1) {
          $self->{output}->add_option_msg(short_msg => "Need to specify '--plugin' option.");
          $self->{output}->option_exit();
      }
  }
  
  sub display_list_plugin {
      my ($self) = @_;
      $self->{plugins_result} = {};
      
      if ($alternative_fatpacker == 1) {
          my $integrated_plugins = $self->fatpacker_find_plugin();
          
          foreach my $key (@$integrated_plugins) {
              # Need to load it to get the description
              centreon::plugins::misc::mymodule_load(output => $self->{output}, module => $key, 
                                                     error_msg => 'Cannot load module --plugin.');
                                                 
              my $name = $key;
              $name =~ s/\.pm//g;
              $name =~ s/\//::/g;
              $self->{output}->add_option_msg(long_msg => '-----------------');
              $self->{output}->add_option_msg(long_msg => 'PLUGIN: ' . $name);
              {
                  my $stdout = '';
                  local *STDOUT;
                  open STDOUT, '>', \$stdout;
                  my $content_class = $INC{$key}->{$key};
                  open my $str_fh, '<', \$content_class;
                  pod2usage(-exitval => 'NOEXIT', -input => $str_fh, -verbose => 99, -sections => 'PLUGIN DESCRIPTION');
                  close $str_fh;
                  $self->{output}->add_option_msg(long_msg => $stdout);
              }
          }
          return ;
      }
      
      # Search file 'plugin.pm'
      $self->check_directory($FindBin::Bin);
      foreach my $key (keys %{$self->{plugins_result}}) {
          my $name = $key;
          $name =~ s/^$FindBin::Bin\/(.*)\.pm/$1/;
          $name =~ s/\//::/g;
          $self->{plugins_result}->{$key} =~ s/^Plugin Description/DESCRIPTION/i;
          
          $self->{output}->add_option_msg(long_msg => '-----------------');
          $self->{output}->add_option_msg(long_msg => 'PLUGIN: ' . $name);
          $self->{output}->add_option_msg(long_msg => $self->{plugins_result}->{$key});
      }
  }
  
  sub check_relaunch {
      my $self = shift;
      my $need_restart = 0;
      my $cmd = $FindBin::Bin . "/" . $FindBin::Script;
      my @args = ();
      
      if (defined($self->{environment})) {
          foreach (keys %{$self->{environment}}) {
              if ($_ ne '' && (!defined($ENV{$_}) || $ENV{$_} ne $self->{environment}->{$_})) {
                  $ENV{$_} = $self->{environment}->{$_};
                  $need_restart = 1;
              }
          }
      }
      
      if (defined($self->{runas}) && $self->{runas} ne '') {
          # Check if it's already me and user exist ;)
          my ($name, $passwd, $uid) = getpwnam($self->{runas});
          if (!defined($uid)) {
              $self->{output}->add_option_msg(short_msg => "Runas user '" . $self->{runas} . "' not exist.");
              $self->{output}->option_exit();
          }
          if ($uid != $>) {
              if ($> == 0) {
                  unshift @args, "-s", "/bin/bash", "-l", $self->{runas}, "-c", join(" ", $cmd, "--plugin=" . $self->{plugin}, @ARGV);
                  $cmd = "su";
              } else {
                  unshift @args, "-S", "-u", $self->{runas}, $cmd, "--plugin=" . $self->{plugin}, @ARGV;
                  $cmd = "sudo";
              }
              $need_restart = 1;
          }
      }
  
      if ($need_restart == 1) {
          if (scalar(@args) <= 0) {
              unshift @args, @ARGV, '--plugin=' . $self->{plugin}
          }
  
          my ($lerror, $stdout, $exit_code) = centreon::plugins::misc::backtick(
              command => $cmd,
              arguments => [@args],
              timeout => 30,
              wait_exit => 1
          );
  
          if ($exit_code <= -1000) {
              if ($exit_code == -1000) {
                  $self->{output}->output_add(severity => 'UNKNOWN', 
                                              short_msg => $stdout);
              }
              $self->{output}->display();
              $self->{output}->exit();
          }
          print $stdout;
          # We put unknown
          if (!($exit_code >= 0 && $exit_code <= 4)) {
              exit 3;
          }
          exit $exit_code;
      }
  }
  
  sub run {
      my ($self) = @_;
  
      $self->get_plugin();
  
      if (defined($self->{help}) && !defined($self->{plugin})) {
          $self->display_local_help();
          $self->{output}->option_exit();
      }
      if (defined($self->{list_plugin})) {
          $self->display_list_plugin();
          $self->{output}->option_exit();
      }
      $self->check_plugin_option() if (!defined($self->{plugin}) || $self->{plugin} eq '');
      if (defined($self->{ignore_warn_msg})) {
          $SIG{__WARN__} = sub {};
      }
      $self->convert_args() if (defined($self->{convert_args}));
  
      $self->check_relaunch();
      
      (undef, $self->{plugin}) = 
          centreon::plugins::misc::mymodule_load(output => $self->{output}, module => $self->{plugin}, 
                                                 error_msg => 'Cannot load module --plugin.');
      my $plugin = $self->{plugin}->new(options => $self->{options}, output => $self->{output});
      $plugin->init(help => $self->{help},
                    version => $self->{version});
      $plugin->run();
  }
  
  1;
  
  
  =head1 NAME
  
  centreon_plugins.pl - main program to call Centreon plugins.
  
  =head1 SYNOPSIS
  
  centreon_plugins.pl [options]
  
  =head1 OPTIONS
  
  =over 8
  
  =item B<--plugin>
  
  Specify the path to the plugin.
  
  =item B<--list-plugin>
  
  Print available plugins.
  
  =item B<--version>
  
  Print global version.
  
  =item B<--help>
  
  Print a brief help message and exits.
  
  =item B<--ignore-warn-msg>
  
  Perl warn messages are ignored (not displayed).
  
  =item B<--runas>
  
  Run the script as a different user (prefer to use directly the good user).
  
  =item B<--environment>
  
  Set environment variables for the script (prefer to set it before running it for better performance).
  
  =item B<--convert-args>
  
  Change strings of arguments. Useful to use '!' in nrpe protocol.
  Example: --convert-args='##,\x21'
  
  =back
  
  =head1 DESCRIPTION
  
  B<centreon_plugins.pl> .
  
  =cut
CENTREON_PLUGINS_SCRIPT

$fatpacked{"centreon/plugins/script_simple.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'CENTREON_PLUGINS_SCRIPT_SIMPLE';
  #
  # Copyright 2019 Centreon (http://www.centreon.com/)
  #
  # Centreon is a full-fledged industry-strength solution that meets
  # the needs in IT infrastructure and application monitoring for
  # service performance.
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  #
  
  package centreon::plugins::script_simple;
  
  use strict;
  use warnings;
  
  sub new {
      my ($class, %options) = @_;
      my $self  = {};
      bless $self, $class;
      # $options{package} = parent package caller
      # $options{options} = options object
      # $options{output} = output object
      $self->{options} = $options{options};
      $self->{output} = $options{output};
      
      $self->{options}->add_options(
      arguments => {
              'mode:s'         => { name => 'mode_name' },
              'dyn-mode:s'     => { name => 'dynmode_name' },
              'list-mode'      => { name => 'list_mode' },
              'mode-version:s' => { name => 'mode_version' },
              'sanity-options' => { name => 'sanity_options' }, # keep it for 6 month before remove it
          }
      );
      $self->{version} = '1.0';
      %{$self->{modes}} = ();
      $self->{default} = undef;
      
      $self->{options}->parse_options();
      $self->{option_results} = $self->{options}->get_options();
      foreach (keys %{$self->{option_results}}) {
          $self->{$_} = $self->{option_results}->{$_};
      }
      $self->{options}->clean();
  
      $self->{options}->add_help(package => $options{package}, sections => 'PLUGIN DESCRIPTION');
      $self->{options}->add_help(package => __PACKAGE__, sections => 'GLOBAL OPTIONS');
      $self->{output}->mode(name => $self->{mode_name});
  
      return $self;
  }
  
  sub init {
      my ($self, %options) = @_;
      # $options{version} = string version
      # $options{help} = string help
  
      if (defined($options{help}) && !defined($self->{mode_name}) && !defined($self->{dynmode_name})) {
          $self->{options}->display_help();
          $self->{output}->option_exit();
      }
      if (defined($options{version}) && !defined($self->{mode_name}) && !defined($self->{dynmode_name})) {
          $self->version();
      }
      if (defined($self->{list_mode})) {
          $self->list_mode();
      }
      $self->{options}->set_sanity();
  
      # Output HELP
      $self->{options}->add_help(package => 'centreon::plugins::output', sections => 'OUTPUT OPTIONS');
      
      $self->load_password_mgr();
      
      # Load mode
      if (defined($self->{mode_name}) && $self->{mode_name} ne '') {
          $self->is_mode(mode => $self->{mode_name});
          centreon::plugins::misc::mymodule_load(output => $self->{output}, module => $self->{modes}{$self->{mode_name}}, 
                                                 error_msg => "Cannot load module --mode.");
          $self->{mode} = $self->{modes}{$self->{mode_name}}->new(options => $self->{options}, output => $self->{output}, mode => $self->{mode_name});
      } elsif (defined($self->{dynmode_name}) && $self->{dynmode_name} ne '') {
          (undef, $self->{dynmode_name}) = centreon::plugins::misc::mymodule_load(output => $self->{output}, module => $self->{dynmode_name}, 
                                                                                  error_msg => "Cannot load module --dyn-mode.");
          $self->{mode} = $self->{dynmode_name}->new(options => $self->{options}, output => $self->{output}, mode => $self->{dynmode_name});
      } else {
          $self->{output}->add_option_msg(short_msg => "Need to specify '--mode' or '--dyn-mode' option.");
          $self->{output}->option_exit();
      }
  
      if (defined($options{help})) {
          if (defined($self->{mode_name}) && $self->{mode_name} ne '') {
              $self->{options}->add_help(package => $self->{modes}{$self->{mode_name}}, sections => 'MODE');
          } else {
              $self->{options}->add_help(package => $self->{dynmode_name}, sections => 'MODE');
          }
          $self->{options}->display_help();
          $self->{output}->option_exit();
      }
      if (defined($options{version})) {
          $self->{mode}->version();
          $self->{output}->option_exit(nolabel => 1);
      }
      if (centreon::plugins::misc::minimal_version($self->{mode}->{version}, $self->{mode_version}) == 0) {
          $self->{output}->add_option_msg(short_msg => "Not good version for plugin mode. Excepted at least: " . $self->{mode_version} . ". Get: ".  $self->{mode}->{version});
          $self->{output}->option_exit();
      }
      
      $self->{options}->parse_options();
      $self->{option_results} = $self->{options}->get_options();
  
      $self->{pass_mgr}->manage_options(option_results => $self->{option_results}) if (defined($self->{pass_mgr}));
      $self->{mode}->check_options(option_results => $self->{option_results}, default => $self->{default});
  }
  
  sub load_password_mgr {
      my ($self, %options) = @_;
      
      return if (!defined($self->{option_results}->{pass_manager}) || $self->{option_results}->{pass_manager} eq '');
  
      (undef, my $pass_mgr_name) = centreon::plugins::misc::mymodule_load(
          output => $self->{output}, module => "centreon::plugins::passwordmgr::" . $self->{option_results}->{pass_manager}, 
          error_msg => "Cannot load module 'centreon::plugins::passwordmgr::" . $self->{option_results}->{pass_manager} . "'"
      );
      $self->{pass_mgr} = $pass_mgr_name->new(options => $self->{options}, output => $self->{output});
  }
  
  sub run {
      my $self = shift;
  
      if ($self->{output}->is_disco_format()) {
          $self->{mode}->disco_format();
          $self->{output}->display_disco_format();
          $self->{output}->exit(exit_litteral => 'ok');
      }
      if ($self->{output}->is_disco_show()) {
          $self->{mode}->disco_show(snmp => $self->{snmp});
          $self->{output}->display_disco_show();
          $self->{output}->exit(exit_litteral => 'ok');
      } else {
          $self->{mode}->run();
      }
  }
  
  sub is_mode {
      my ($self, %options) = @_;
      
      # $options->{mode} = mode
      if (!defined($self->{modes}{$options{mode}})) {
          $self->{output}->add_option_msg(short_msg => "mode '" . $options{mode} . "' doesn't exist (use --list-mode option to show available modes).");
          $self->{output}->option_exit();
      }
  }
  
  sub version {
      my $self = shift;    
      $self->{output}->add_option_msg(short_msg => "Plugin Version: " . $self->{version});
      $self->{output}->option_exit(nolabel => 1);
  }
  
  sub list_mode {
      my $self = shift;
      $self->{options}->display_help();
      
      $self->{output}->add_option_msg(long_msg => "Modes Available:");
      foreach (sort keys %{$self->{modes}}) {
          $self->{output}->add_option_msg(long_msg => "   " . $_);
      }
      $self->{output}->option_exit(nolabel => 1);
  }
  
  1;
  
  
  =head1 NAME
  
  -
  
  =head1 SYNOPSIS
  
  -
  
  =head1 GLOBAL OPTIONS
  
  =over 8
  
  =item B<--mode>
  
  Choose a mode.
  
  =item B<--dyn-mode>
  
  Specify a mode with the path (separated by '::').
  
  =item B<--list-mode>
  
  List available modes.
  
  =item B<--mode-version>
  
  Check minimal version of mode. If not, unknown error.
  
  =item B<--version>
  
  Display plugin version.
  
  =back
  
  =head1 DESCRIPTION
  
  B<>.
  
  =cut
CENTREON_PLUGINS_SCRIPT_SIMPLE

$fatpacked{"centreon/plugins/statefile.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'CENTREON_PLUGINS_STATEFILE';
  #
  # Copyright 2019 Centreon (http://www.centreon.com/)
  #
  # Centreon is a full-fledged industry-strength solution that meets
  # the needs in IT infrastructure and application monitoring for
  # service performance.
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  #
  
  package centreon::plugins::statefile;
  
  use strict;
  use warnings;
  use Data::Dumper;
  use vars qw($datas);
  use centreon::plugins::misc;
  
  my $default_dir = '/var/lib/centreon/centplugins';
  
  sub new {
      my ($class, %options) = @_;
      my $self  = {};
      bless $self, $class;
  
      if (defined($options{options})) {
          $options{options}->add_options(arguments => {
              'memcached:s'           => { name => 'memcached' },
              'redis-server:s'        => { name => 'redis_server' },
              'redis-attribute:s%'    => { name => 'redis_attribute' },
              'redis-db:s'            => { name => 'redis_db' },
              'memexpiration:s'       => { name => 'memexpiration', default => 86400 },
              'statefile-dir:s'       => { name => 'statefile_dir', default => $default_dir },
              'statefile-suffix:s'    => { name => 'statefile_suffix', default => '' },
              'statefile-concat-cwd'  => { name => 'statefile_concat_cwd' },
              'statefile-storable'    => { name => 'statefile_storable' },
          });
          $options{options}->add_help(package => __PACKAGE__, sections => 'RETENTION OPTIONS', once => 1);
      }
      
      $self->{error} = 0;
      $self->{output} = $options{output};
      $self->{datas} = {};
      $self->{storable} = 0;
      $self->{memcached_ok} = 0;
      $self->{memcached} = undef;
      
      $self->{statefile_dir} = undef;
      $self->{statefile_suffix} = undef;
      
      return $self;
  }
  
  sub check_options {
      my ($self, %options) = @_;
  
      if (defined($options{option_results}) && defined($options{option_results}->{memcached})) {
          centreon::plugins::misc::mymodule_load(output => $self->{output}, module => 'Memcached::libmemcached',
                                                 error_msg => "Cannot load module 'Memcached::libmemcached'.");
          $self->{memcached} = Memcached::libmemcached->new();
          Memcached::libmemcached::memcached_server_add($self->{memcached}, $options{option_results}->{memcached});
      }
      
      # Check redis
      if (defined($options{option_results}->{redis_server})) {
          $self->{redis_attributes} = '';
          if (defined($options{option_results}->{redis_attribute})) {
              foreach (keys %{$options{option_results}->{redis_attribute}}) {
                  $self->{redis_attributes} .= "$_ => " . $options{option_results}->{redis_attribute}->{$_} . ', ';
              }
          }
          
          centreon::plugins::misc::mymodule_load(output => $self->{output}, module => 'Redis',
                                                 error_msg => "Cannot load module 'Redis'.");
          eval {
              $self->{redis_cnx} = Redis->new(server => $options{option_results}->{redis_server}, 
                                              eval $self->{redis_attributes});
              if (defined($self->{redis_cnx}) && 
                  defined($options{option_results}->{redis_db}) &&
                  $options{option_results}->{redis_db} ne ''
                  ) {
                  $self->{redis_cnx}->select($options{option_results}->{redis_db});
              }
          };
      }
      
      $self->{statefile_dir} = $options{option_results}->{statefile_dir};
      if ($self->{statefile_dir} ne $default_dir && defined($options{option_results}->{statefile_concat_cwd})) {
          centreon::plugins::misc::mymodule_load(output => $self->{output}, module => 'Cwd',
                                                 error_msg => "Cannot load module 'Cwd'.");
          $self->{statefile_dir} = Cwd::cwd() . '/' . $self->{statefile_dir};
      }
      if (defined($options{option_results}->{statefile_storable})) {
          centreon::plugins::misc::mymodule_load(output => $self->{output}, module => 'Storable',
                                                 error_msg => "Cannot load module 'Storable'.");
          $self->{storable} = 1;
      }
      $self->{statefile_suffix} = $options{option_results}->{statefile_suffix};
      $self->{memexpiration} = $options{option_results}->{memexpiration};
  }
  
  sub error {
      my ($self) = shift;
       
      if (@_) {
          $self->{error} = $_[0];
      }
      return $self->{error};
  }
  
  sub read {
      my ($self, %options) = @_;
      $self->{statefile_suffix} = defined($options{statefile_suffix}) ? $options{statefile_suffix} : $self->{statefile_suffix};
      $self->{statefile_dir} = defined($options{statefile_dir}) ? $options{statefile_dir} : $self->{statefile_dir};
      $self->{statefile} = defined($options{statefile}) ? $options{statefile} . $self->{statefile_suffix} : 
                              $self->{statefile};
      $self->{no_quit} = defined($options{no_quit}) && $options{no_quit} == 1 ? 1 : 0;
  
      if (defined($self->{memcached})) {
          # if "SUCCESS" or "NOT FOUND" is ok. Other with use the file
          my $val = Memcached::libmemcached::memcached_get($self->{memcached}, $self->{statefile_dir} . "/" . $self->{statefile});
          if (defined($self->{memcached}->errstr) && $self->{memcached}->errstr =~ /^SUCCESS|NOT FOUND$/i) {
              $self->{memcached_ok} = 1;
              if (defined($val)) {
                  eval( $val );
                  $self->{datas} = $datas;
                  $datas = {};
                  return 1;
              }
              return 0;
          }
      }
      
      if (defined($self->{redis_cnx})) {
          my $val = $self->{redis_cnx}->get($self->{statefile_dir} . "/" . $self->{statefile});
          if (defined($val)) {
              eval($val);
              $self->{datas} = $datas;
              $datas = {};
              return 1;
          }
          
          return 0;
      }
      
      if (! -e $self->{statefile_dir} . '/' . $self->{statefile}) {
          if (! -w $self->{statefile_dir} || ! -x $self->{statefile_dir}) {
              $self->error(1);
              $self->{output}->add_option_msg(short_msg =>  "Cannot write statefile '" . $self->{statefile_dir} . "/" . $self->{statefile} . "'. Need write/exec permissions on directory.");
              if ($self->{no_quit} == 0) {
                  $self->{output}->option_exit();
              }
          }
          return 0;
      } elsif (! -w $self->{statefile_dir} . '/' . $self->{statefile}) {
          $self->error(1);
          $self->{output}->add_option_msg(short_msg => "Cannot write statefile '" . $self->{statefile_dir} . "/" . $self->{statefile} . "'. Need write permissions on file.");
          if ($self->{no_quit} == 0) {
              $self->{output}->option_exit();
          }
          return 1;
      } elsif (! -s $self->{statefile_dir} . '/' . $self->{statefile}) {
          # Empty file. Not a problem. Maybe plugin not manage not values
          return 0;
      }
      
      if ($self->{storable} == 1) {
          open FILE, $self->{statefile_dir} . '/' . $self->{statefile};
          eval {
              $self->{datas} = Storable::fd_retrieve(*FILE);
          };
          # File is corrupted surely. We'll reset it
          if ($@) {
              close FILE;
              return 0;
          }
          close FILE;
      } else {
          unless (my $return = do $self->{statefile_dir} . '/' . $self->{statefile}) {
              # File is corrupted surely. We'll reset it
              return 0;
              #if ($@) {
              #    $self->{output}->add_option_msg(short_msg => "Couldn't parse '" . $self->{statefile_dir} . "/" . $self->{statefile} . "': $@");
              #    $self->{output}->option_exit();
              #}
              #unless (defined($return)) {
              #    $self->{output}->add_option_msg(short_msg => "Couldn't do '" . $self->{statefile_dir} . "/" . $self->{statefile} . "': $!");
              #    $self->{output}->option_exit();
              #}
              #unless ($return) {
              #    $self->{output}->add_option_msg(short_msg => "Couldn't run '" . $self->{statefile_dir} . "/" . $self->{statefile} . "': $!");
              #    $self->{output}->option_exit();
          }
          $self->{datas} = $datas;
          $datas = {};
      }
  
      return 1;
  }
  
  sub get_string_content {
      my ($self, %options) = @_;
  
      return Data::Dumper::Dumper($self->{datas});
  }
  
  sub get {
      my ($self, %options) = @_;
  
      if (defined($self->{datas}->{$options{name}})) {
          return $self->{datas}->{$options{name}};
      }
      return undef;
  }
  
  sub write {
      my ($self, %options) = @_;
  
      if ($self->{memcached_ok} == 1) {
          Memcached::libmemcached::memcached_set($self->{memcached}, $self->{statefile_dir} . '/' . $self->{statefile}, 
                                                 Data::Dumper->Dump([$options{data}], ['datas']), $self->{memexpiration});
          if (defined($self->{memcached}->errstr) && $self->{memcached}->errstr =~ /^SUCCESS$/i) {
              return ;
          }
      }
      if (defined($self->{redis_cnx})) {
          return if (defined($self->{redis_cnx}->set($self->{statefile_dir} . '/' . $self->{statefile}, Data::Dumper->Dump([$options{data}], ['datas']),
                                                    'EX', $self->{memexpiration})));
      }
      open FILE, '>', $self->{statefile_dir} . '/' . $self->{statefile};
      if ($self->{storable} == 1) {
          Storable::store_fd($options{data}, *FILE);
      } else {
          print FILE Data::Dumper->Dump([$options{data}], ['datas']);
      }
      close FILE;
  }
  
  1;
  
  
  =head1 NAME
  
  Statefile class
  
  =head1 SYNOPSIS
  
  -
  
  =head1 RETENTION OPTIONS
  
  =over 8
  
  =item B<--memcached>
  
  Memcached server to use (only one server).
  
  =item B<--redis-server>
  
  Redis server to use (only one server).
  
  =item B<--redis-attribute>
  
  Set Redis Options (--redis-attribute="cnx_timeout=5").
  
  =item B<--redis-db>
  
  Set Redis database index.
  
  =item B<--memexpiration>
  
  Time to keep data in seconds (Default: 86400).
  
  =item B<--statefile-dir>
  
  Directory for statefile (Default: '/var/lib/centreon/centplugins').
  
  =item B<--statefile-suffix>
  
  Add a suffix for the statefile name (Default: '').
  
  =item B<--statefile-concat-cwd>
  
  Concat current working directory with option '--statefile-dir'.
  Useful on Windows when plugin is compiled.
  
  =item B<--statefile-storable>
  
  Use Perl Module 'Storable' (instead Data::Dumper) to store datas.
  
  =back
  
  =head1 DESCRIPTION
  
  B<statefile>.
  
  =cut
CENTREON_PLUGINS_STATEFILE

$fatpacked{"centreon/plugins/templates/catalog_functions.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'CENTREON_PLUGINS_TEMPLATES_CATALOG_FUNCTIONS';
  #
  # Copyright 2018 Centreon (http://www.centreon.com/)
  #
  # Centreon is a full-fledged industry-strength solution that meets
  # the needs in IT infrastructure and application monitoring for
  # service performance.
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  #
  
  package centreon::plugins::templates::catalog_functions;
  
  use strict;
  use warnings;
  use Exporter;
  
  our @ISA = qw(Exporter);
  our @EXPORT_OK = qw(catalog_status_threshold catalog_status_calc);
  
  sub catalog_status_threshold {
      my ($self, %options) = @_;
      my $status = 'ok';
      my $message;
  
      eval {
          local $SIG{__WARN__} = sub { $message = $_[0]; };
          local $SIG{__DIE__} = sub { $message = $_[0]; };
  
          my $label = $self->{label};
          $label =~ s/-/_/g;
          if (defined($self->{instance_mode}->{option_results}->{'ok_' . $label}) && $self->{instance_mode}->{option_results}->{'ok_' . $label} ne '' &&
              eval "$self->{instance_mode}->{option_results}->{'ok_' . $label}") {
              $status = 'ok';
          } elsif (defined($self->{instance_mode}->{option_results}->{'critical_' . $label}) && $self->{instance_mode}->{option_results}->{'critical_' . $label} ne '' &&
              eval "$self->{instance_mode}->{option_results}->{'critical_' . $label}") {
              $status = 'critical';
          } elsif (defined($self->{instance_mode}->{option_results}->{'warning_' . $label}) && $self->{instance_mode}->{option_results}->{'warning_' . $label} ne '' &&
              eval "$self->{instance_mode}->{option_results}->{'warning_' . $label}") {
              $status = 'warning';
          } elsif (defined($self->{instance_mode}->{option_results}->{'unknown_' . $label}) && $self->{instance_mode}->{option_results}->{'unknown_' . $label} ne '' &&
              eval "$self->{instance_mode}->{option_results}->{'unknown_' . $label}") {
              $status = 'unknown';
          }
      };
      if (defined($message)) {
          $self->{output}->output_add(long_msg => 'filter status issue: ' . $message);
      }
  
      return $status;
  }
  
  sub catalog_status_calc {
      my ($self, %options) = @_;
  
      foreach (keys %{$options{new_datas}}) {
          if (/^\Q$self->{instance}\E_(.*)/) {
              $self->{result_values}->{$1} = $options{new_datas}->{$_};
          }
      }
  }
  
  1;
  
  
CENTREON_PLUGINS_TEMPLATES_CATALOG_FUNCTIONS

$fatpacked{"centreon/plugins/templates/counter.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'CENTREON_PLUGINS_TEMPLATES_COUNTER';
  #
  # Copyright 2019 Centreon (http://www.centreon.com/)
  #
  # Centreon is a full-fledged industry-strength solution that meets
  # the needs in IT infrastructure and application monitoring for
  # service performance.
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  #
  
  package centreon::plugins::templates::counter;
  
  use base qw(centreon::plugins::mode);
  
  use strict;
  use warnings;
  use centreon::plugins::values;
  use centreon::plugins::misc;
  
  my $sort_subs = {
      num => sub { $a <=> $b },
      cmp => sub { $a cmp $b },
  };
  
  sub set_counters {
      my ($self, %options) = @_;
      
      if (!defined($self->{maps_counters})) {
          $self->{maps_counters} = {};
      }
      
      $self->{maps_counters_type} = [];
      
      # 0 = mode total
      # 1 = mode instances
      #push @{$self->{maps_counters_type}}, { 
      #    name => 'global', type => 0, message_separator => ', ', cb_prefix_output => undef, cb_init => undef,
      #};
  
      #$self->{maps_counters}->{global} = [
      #    { label => 'client', set => {
      #           key_values => [ { name => 'client' } ],
      #           output_template => 'Current client connections : %s',
      #           perfdatas => [
      #               { label => 'Client', value => 'client_absolute', template => '%s', 
      #                 min => 0, unit => 'con' },
      #           ],
      #       }
      #    },
      #];
      
      # Example for instances
      #push @{$self->{maps_counters_type}}, { 
      #    name => 'cpu', type => 1, message_separator => ', ', cb_prefix_output => undef, cb_init => undef,
      #    message_multiple => 'All CPU usages are ok',
      #};    
  }
  
  sub get_callback {
      my ($self, %options) = @_;
  
      if (defined($options{method_name})) {
          return $self->can($options{method_name});
      }
      
      return undef;
  }
  
  sub call_object_callback {
      my ($self, %options) = @_;
      
      if (defined($options{method_name})) {
          my $method = $self->can($options{method_name});
          if ($method) {
              return $self->$method(%options);
          }
      }
      
      return undef;
  }
  
  sub get_threshold_prefix {
      my ($self, %options) = @_;
      
      my $prefix = '';
      END_LOOP: foreach (@{$self->{maps_counters_type}}) {
          if ($_->{name} eq $options{name}) {
              $prefix = 'instance-' if ($_->{type} == 1);
              last;
          }
          
          if ($_->{type} == 3) {
              foreach (@{$_->{group}}) {
                  if ($_->{name} eq $options{name}) {
                      $prefix = 'instance-' if ($_->{type} == 0);
                      $prefix = 'subinstance-' if ($_->{type} == 1);
                      last END_LOOP;
                  }
              }
          }
      }
  
      return $prefix;
  }
  
  sub new {
      my ($class, %options) = @_;
      my $self = $class->SUPER::new(package => __PACKAGE__, %options);
      bless $self, $class;
      
      $self->{version} = '1.0';
      $options{options}->add_options(arguments => {
          'filter-counters:s'     => { name => 'filter_counters' },
          'display-ok-counters:s' => { name => 'display_ok_counters' },
          'list-counters'         => { name => 'list_counters' },
      });
      $self->{statefile_value} = undef;
      if (defined($options{statefile}) && $options{statefile}) {
          centreon::plugins::misc::mymodule_load(output => $self->{output}, module => 'centreon::plugins::statefile',
                                                 error_msg => "Cannot load module 'centreon::plugins::statefile'.");
          $self->{statefile_value} = centreon::plugins::statefile->new(%options);
      }
      
      $self->{maps_counters} = {} if (!defined($self->{maps_counters}));
      $self->set_counters(%options);
      
      foreach my $key (keys %{$self->{maps_counters}}) {
          foreach (@{$self->{maps_counters}->{$key}}) {
              my $label = $_->{label};
              my $thlabel = $label;
              if ($self->{output}->use_new_perfdata() && defined($_->{nlabel})) {
                  $label = $_->{nlabel};
                  $thlabel = $self->get_threshold_prefix(name => $key) . $label;
              }
              $thlabel =~ s/\./-/g;
              
              if (!defined($_->{threshold}) || $_->{threshold} != 0) {
                  $options{options}->add_options(arguments => {
                      'warning-' . $thlabel . ':s'     => { name => 'warning-' . $thlabel },
                      'critical-' . $thlabel . ':s'    => { name => 'critical-' . $thlabel },
                  });
  
                  if (defined($_->{nlabel})) {
                      $options{options}->add_options(arguments => {
                          'warning-' . $_->{label} . ':s'     => { name => 'warning-' . $_->{label}, redirect => 'warning-' . $thlabel },
                          'critical-' . $_->{label} . ':s'    => { name => 'critical-' . $_->{label}, redirect => 'critical-' . $thlabel },
                      });
                  }
              }
              $_->{obj} = centreon::plugins::values->new(
                  statefile => $self->{statefile_value},
                  output => $self->{output}, perfdata => $self->{perfdata},
                  label => $_->{label}, nlabel => $_->{nlabel}, thlabel => $thlabel,
              );
              $_->{obj}->set(%{$_->{set}});
          }
      }
  
      return $self;
  }
  
  sub check_options {
      my ($self, %options) = @_;
      $self->SUPER::init(%options);
      
      if (defined($self->{option_results}->{list_counters})) {
          my $list_counter = 'counter list:';
          my $th_counter = '';
          foreach my $key (keys %{$self->{maps_counters}}) {
              foreach (@{$self->{maps_counters}->{$key}}) {
                  my $label = $_->{label};
                  $label =~ s/-//g;
                  $list_counter .= " " . $_->{label};
                  $th_counter .= " --warning-$_->{label}='\$_SERVICEWARNING" . uc($label) . "\$' --critical-$_->{label}='\$_SERVICECRITICAL" . uc($label) . "\$'";  
              }
          }
          $self->{output}->output_add(short_msg => $list_counter);
          $self->{output}->output_add(long_msg => 'configuration: ' . $th_counter); 
          $self->{output}->display(nolabel => 1, force_ignore_perfdata => 1);
          $self->{output}->exit();
      }
      foreach my $key (keys %{$self->{maps_counters}}) {
          foreach (@{$self->{maps_counters}->{$key}}) {
              $_->{obj}->{instance_mode} = $self;
              $_->{obj}->init(option_results => $self->{option_results});
          }
      }
      
      if (defined($self->{statefile_value})) {
          $self->{statefile_value}->check_options(%options);
      }
  }
  
  sub run_global {
      my ($self, %options) = @_;
      
      return undef if (defined($options{config}->{cb_init}) && $self->call_object_callback(method_name => $options{config}->{cb_init}) == 1);
      my $resume = defined($options{resume}) && $options{resume} == 1 ? 1 : 0;
      # Can be set when it comes from type 3 counters
      my $called_multiple = defined($options{called_multiple}) && $options{called_multiple} == 1 ? 1 : 0;
      my $multiple_parent = defined($options{multiple_parent}) && $options{multiple_parent} == 1 ? 1 : 0;
      my $force_instance = defined($options{force_instance}) ? $options{force_instance} : undef;
      
      my $message_separator = defined($options{config}->{message_separator}) ? 
          $options{config}->{message_separator}: ', ';
      my ($short_msg, $short_msg_append, $long_msg, $long_msg_append) = ('', '', '', '');
      my @exits;
      foreach (@{$self->{maps_counters}->{$options{config}->{name}}}) {
          my $obj = $_->{obj};
  
          next if (defined($self->{option_results}->{filter_counters}) && $self->{option_results}->{filter_counters} ne '' &&
              $_->{label} !~ /$self->{option_results}->{filter_counters}/);
      
          $obj->set(instance => defined($force_instance) ? $force_instance : $options{config}->{name});
      
          my ($value_check) = $obj->execute(new_datas => $self->{new_datas}, values => $self->{$options{config}->{name}});
  
          next if (defined($options{config}->{skipped_code}) && defined($options{config}->{skipped_code}->{$value_check}));
          if ($value_check != 0) {
              $long_msg .= $long_msg_append . $obj->output_error();
              $long_msg_append = $message_separator;
              next;
          }
          my $exit2 = $obj->threshold_check();
          push @exits, $exit2;
  
          my $output = $obj->output();
          if (!defined($_->{display_ok}) || $_->{display_ok} != 0 ||
              (defined($self->{option_results}->{display_ok_counters}) && $self->{option_results}->{display_ok_counters} ne '' &&
               $_->{label} =~ /$self->{option_results}->{display_ok_counters}/)) {
              $long_msg .= $long_msg_append . $output;
              $long_msg_append = $message_separator;
          }
  
          if (!$self->{output}->is_status(litteral => 1, value => $exit2, compare => 'ok')) {
              $short_msg .= $short_msg_append . $output;
              $short_msg_append = $message_separator;
          }
          
          $obj->perfdata(extra_instance => $multiple_parent);
      }
  
      my ($prefix_output, $suffix_output);
      $prefix_output = $self->call_object_callback(method_name => $options{config}->{cb_prefix_output}) 
          if (defined($options{config}->{cb_prefix_output}));
      $prefix_output = '' if (!defined($prefix_output));
      
      $suffix_output = $self->call_object_callback(method_name => $options{config}->{cb_suffix_output}) 
          if (defined($options{config}->{cb_suffix_output}));
      $suffix_output = '' if (!defined($suffix_output));
      
      if ($called_multiple == 1 && $long_msg ne '') {
          $self->{output}->output_add(long_msg => $options{indent_long_output} . $prefix_output. $long_msg . $suffix_output);
      }
      
      my $exit = $self->{output}->get_most_critical(status => [ @exits ]);
      if (!$self->{output}->is_status(litteral => 1, value => $exit, compare => 'ok')) {
          if ($called_multiple == 0) {
              $self->{output}->output_add(severity => $exit,
                                          short_msg => $prefix_output . $short_msg . $suffix_output);
          } else {
              $self->run_multiple_prefix_output(severity => $exit,
                                                short_msg => $prefix_output . $short_msg . $suffix_output);
          }
      } else {
          if ($long_msg ne '' && $multiple_parent == 0) {
              if ($called_multiple == 0) {
                  $self->{output}->output_add(short_msg => $prefix_output . $long_msg . $suffix_output) ;
              } else {
                  $self->run_multiple_prefix_output(severity => 'ok',
                                                    short_msg => $prefix_output . $long_msg . $suffix_output);
              }
          }
      }
  }
  
  sub run_instances {
      my ($self, %options) = @_;
      
      return undef if (defined($options{config}->{cb_init}) && $self->call_object_callback(method_name => $options{config}->{cb_init}) == 1);
      my $cb_init_counters = $self->get_callback(method_name => $options{config}->{cb_init_counters});
      my $display_status_lo = defined($options{display_status_long_output}) && $options{display_status_long_output} == 1 ? 1 : 0;
      my $resume = defined($options{resume}) && $options{resume} == 1 ? 1 : 0;
      my $no_message_multiple = 1;
      
      $self->{lproblems} = 0;
      $self->{multiple} = 1;
      if (scalar(keys %{$self->{$options{config}->{name}}}) == 1) {
          $self->{multiple} = 0;
      }
      
      my $message_separator = defined($options{config}->{message_separator}) ? 
          $options{config}->{message_separator}: ', ';
  
      my $sort_method = 'cmp';
      $sort_method = $options{config}->{sort_method}
          if (defined($options{config}->{sort_method}));
      foreach my $id (sort { $sort_subs->{$sort_method}->() } keys %{$self->{$options{config}->{name}}}) {
          my ($short_msg, $short_msg_append, $long_msg, $long_msg_append) = ('', '', '', '');
          my @exits = ();
          foreach (@{$self->{maps_counters}->{$options{config}->{name}}}) {
              my $obj = $_->{obj};
  
              next if (defined($self->{option_results}->{filter_counters}) && $self->{option_results}->{filter_counters} ne '' &&
                  $_->{label} !~ /$self->{option_results}->{filter_counters}/);
              next if ($cb_init_counters && $self->$cb_init_counters(%$_) == 1);
  
              $no_message_multiple = 0;
              $obj->set(instance => $id);
          
              my ($value_check) = $obj->execute(new_datas => $self->{new_datas},
                                                values => $self->{$options{config}->{name}}->{$id});
              next if (defined($options{config}->{skipped_code}) && defined($options{config}->{skipped_code}->{$value_check}));
              if ($value_check != 0) {
                  $long_msg .= $long_msg_append . $obj->output_error();
                  $long_msg_append = $message_separator;
                  next;
              }
              my $exit2 = $obj->threshold_check();
              push @exits, $exit2;
  
              my $output = $obj->output();
              if (!defined($_->{display_ok}) || $_->{display_ok} != 0 ||
                  (defined($self->{option_results}->{display_ok_counters}) && $self->{option_results}->{display_ok_counters} ne '' &&
                   $_->{label} =~ /$self->{option_results}->{display_ok_counters}/)) {
                  $long_msg .= $long_msg_append . $output;
                  $long_msg_append = $message_separator;
              }
              
              if (!$self->{output}->is_status(litteral => 1, value => $exit2, compare => 'ok')) {
                  $self->{lproblems}++;
                  $short_msg .= $short_msg_append . $output;
                  $short_msg_append = $message_separator;
              }
              
              $obj->perfdata(extra_instance => $self->{multiple});
          }
  
          my ($prefix_output, $suffix_output);
          $prefix_output = $self->call_object_callback(method_name => $options{config}->{cb_prefix_output}, instance_value => $self->{$options{config}->{name}}->{$id})
              if (defined($options{config}->{cb_prefix_output}));
          $prefix_output = '' if (!defined($prefix_output));
          
          $suffix_output = $self->call_object_callback(method_name => $options{config}->{cb_suffix_output}) 
          if (defined($options{config}->{cb_suffix_output}));
          $suffix_output = '' if (!defined($suffix_output));
  
          my $exit = $self->{output}->get_most_critical(status => [ @exits ]);
          # in mode grouped, we don't display 'ok'
          my $debug = 0;
          $debug = 1 if ($display_status_lo == 1 && $self->{output}->is_status(value => $exit, compare => 'OK', litteral => 1));
          if (scalar @{$self->{maps_counters}->{$options{config}->{name}}} > 0 && $long_msg ne '') {
              $self->{output}->output_add(long_msg => ($display_status_lo == 1 ? lc($exit) . ': ' : '') . $prefix_output . $long_msg . $suffix_output, debug => $debug);
          }
          if ($resume == 1) {
              $self->{most_critical_instance} = $self->{output}->get_most_critical(status => [ $self->{most_critical_instance},  $exit ]);  
              next;
          }
          
          if (!$self->{output}->is_status(litteral => 1, value => $exit, compare => 'ok')) {
              $self->{output}->output_add(severity => $exit,
                                          short_msg => $prefix_output . $short_msg . $suffix_output);
          }
          
          if ($self->{multiple} == 0)  {
              $self->{output}->output_add(short_msg => $prefix_output . $long_msg . $suffix_output);
          }
      }
      
      if ($no_message_multiple == 0 && $self->{multiple} == 1 && $resume == 0) {
          $self->{output}->output_add(short_msg => $options{config}->{message_multiple});
      }
  }
  
  sub run_group {
      my ($self, %options) = @_;
  
      my $multiple = 1;
      return if (scalar(keys %{$self->{$options{config}->{name}}}) <= 0);
      if (scalar(keys %{$self->{$options{config}->{name}}}) == 1) {
          $multiple = 0;
      }
      
      if ($multiple == 1) {
          $self->{output}->output_add(severity => 'OK',
                                      short_msg => $options{config}->{message_multiple});
      }
      
      my $format_output = defined($options{config}->{format_output}) ? $options{config}->{format_output} : '%s problem(s) detected';
      
      my ($global_exit, $total_problems) = ([], 0);
      foreach my $id (sort keys %{$self->{$options{config}->{name}}}) {
          $self->{most_critical_instance} = 'ok';
          if (defined($options{config}->{cb_long_output})) {
              $self->{output}->output_add(long_msg => $self->call_object_callback(method_name => $options{config}->{cb_long_output},
                                                                                  instance_value => $self->{$options{config}->{name}}->{$id}));
          }
          
          foreach my $group (@{$options{config}->{group}}) {
              $self->{$group->{name}} = $self->{$options{config}->{name}}->{$id}->{$group->{name}};
              
              # we resume datas
              $self->run_instances(config => $group, display_status_long_output => 1, resume => 1);
              
              push @{$global_exit}, $self->{most_critical_instance};
              $total_problems += $self->{lproblems};
              
              my $prefix_output;
              $prefix_output = $self->call_object_callback(method_name => $options{config}->{cb_prefix_output}, instance_value => $self->{$options{config}->{name}}->{$id})
              if (defined($options{config}->{cb_prefix_output}));
              $prefix_output = '' if (!defined($prefix_output));
              
              if ($multiple == 0 && (!defined($group->{display}) || $group->{display} != 0)) {
                  $self->{output}->output_add(severity => $self->{most_critical_instance},
                                              short_msg => sprintf("${prefix_output}" . $format_output, $self->{lproblems}));
              }
          }
      }
      
      if ($multiple == 1) {
          my $exit = $self->{output}->get_most_critical(status => [ @{$global_exit} ]);
          if (!$self->{output}->is_status(litteral => 1, value => $exit, compare => 'ok')) {
              $self->{output}->output_add(severity => $exit,
                                          short_msg => sprintf($format_output, $total_problems));
          }
      }
      
      if (defined($options{config}->{display_counter_problem})) {
          $self->{output}->perfdata_add(
              label => $options{config}->{display_counter_problem}->{label},
              nlabel => $options{config}->{display_counter_problem}->{nlabel},
              unit => $options{config}->{display_counter_problem}->{unit},
              value => $total_problems,
              min => $options{config}->{display_counter_problem}->{min}, max => $options{config}->{display_counter_problem}->{max}
          );
      }
  }
  
  sub run_multiple_instances {
      my ($self, %options) = @_;
      
      return undef if (defined($options{config}->{cb_init}) && $self->call_object_callback(method_name => $options{config}->{cb_init}) == 1);
      my $use_new_perfdata = $self->{output}->use_new_perfdata();
      my $multiple_parent = defined($options{multiple_parent}) && $options{multiple_parent} == 1 ? $options{multiple_parent} : 0;
      my $indent_long_output = defined($options{indent_long_output}) ? $options{indent_long_output} : '';
      my $no_message_multiple = 1;
      
      my $multiple = 1;
      if (scalar(keys %{$self->{$options{config}->{name}}}) == 1) {
          $multiple = 0;
      }
      
      my $message_separator = defined($options{config}->{message_separator}) ? 
          $options{config}->{message_separator} : ', ';
      my $sort_method = 'cmp';
      $sort_method = $options{config}->{sort_method}
          if (defined($options{config}->{sort_method}));
      foreach my $id (sort { $sort_subs->{$sort_method}->() } keys %{$self->{$options{config}->{name}}}) {
          my ($short_msg, $short_msg_append, $long_msg, $long_msg_append) = ('', '', '', '');
          my @exits = ();
          foreach (@{$self->{maps_counters}->{$options{config}->{name}}}) {
              my $obj = $_->{obj};
              
              next if (defined($self->{option_results}->{filter_counters}) && $self->{option_results}->{filter_counters} ne '' &&
                  $_->{label} !~ /$self->{option_results}->{filter_counters}/);
              
              my $instance = $id;
              if ($use_new_perfdata || ($multiple_parent == 1 && $multiple == 1)) {
                  $instance = $options{instance_parent} . ($self->{output}->get_instance_perfdata_separator()) . $id;
              } elsif ($multiple_parent == 1 && $multiple == 0) {
                  $instance = $options{instance_parent};
              }
              
              $no_message_multiple = 0;
              $obj->set(instance => $instance);
          
              my ($value_check) = $obj->execute(new_datas => $self->{new_datas},
                                                values => $self->{$options{config}->{name}}->{$id});
              next if (defined($options{config}->{skipped_code}) && defined($options{config}->{skipped_code}->{$value_check}));
              if ($value_check != 0) {
                  $long_msg .= $long_msg_append . $obj->output_error();
                  $long_msg_append = $message_separator;
                  next;
              }
              my $exit2 = $obj->threshold_check();
              push @exits, $exit2;
  
              my $output = $obj->output();
              $long_msg .= $long_msg_append . $output;
              $long_msg_append = $message_separator;
              
              if (!$self->{output}->is_status(litteral => 1, value => $exit2, compare => 'ok')) {
                  $short_msg .= $short_msg_append . $output;
                  $short_msg_append = $message_separator;
              }
              
              if ($multiple_parent == 1 && $multiple == 0) {
                  $obj->perfdata(extra_instance => 1);
              } else {
                  $obj->perfdata(extra_instance => $multiple);
              }
          }
  
          my ($prefix_output, $suffix_output);
          $prefix_output = $self->call_object_callback(method_name => $options{config}->{cb_prefix_output}, instance_value => $self->{$options{config}->{name}}->{$id})
              if (defined($options{config}->{cb_prefix_output}));
          $prefix_output = '' if (!defined($prefix_output));
          
          $suffix_output = $self->call_object_callback(method_name => $options{config}->{cb_suffix_output}) 
          if (defined($options{config}->{cb_suffix_output}));
          $suffix_output = '' if (!defined($suffix_output));
  
          my $exit = $self->{output}->get_most_critical(status => [ @exits ]);
          if (scalar @{$self->{maps_counters}->{$options{config}->{name}}} > 0 && $long_msg ne '') {
              $self->{output}->output_add(long_msg => $indent_long_output . $prefix_output . $long_msg . $suffix_output)
                  if (!defined($options{config}->{display_long}) || $options{config}->{display_long} != 0);
          }
          
          if (!$self->{output}->is_status(litteral => 1, value => $exit, compare => 'ok')) {
              $self->run_multiple_prefix_output(severity => $exit,
                  short_msg => $prefix_output . $short_msg . $suffix_output);
          }
          
          if ($multiple == 0 && $multiple_parent == 0) {
              $self->run_multiple_prefix_output(severity => 'ok', short_msg => $prefix_output . $long_msg . $suffix_output);            
          }
      }
      
      if ($no_message_multiple == 0 && $multiple == 1 && $multiple_parent == 0) {
          $self->{output}->output_add(short_msg => $options{config}->{message_multiple});
      }
  }
  
  sub run_multiple_prefix_output {
      my ($self, %options) = @_;
      
      my %separator;
      if ($self->{prefix_multiple_output_done}->{lc($options{severity})} == 0) {
          $self->{output}->output_add(severity => $options{severity}, short_msg => $self->{prefix_multiple_output});
          $self->{prefix_multiple_output_done}->{lc($options{severity})} = 1;
          $separator{separator} = '';
      }
      
      $self->{output}->output_add(severity => $options{severity}, short_msg => "$options{short_msg}", %separator);
  }
  
  sub run_multiple {
      my ($self, %options) = @_;
  
      my $multiple = 1;
      if (scalar(keys %{$self->{$options{config}->{name}}}) == 1) {
          $multiple = 0;
      }
      
      if ($multiple == 1) {
          $self->{output}->output_add(severity => 'OK',
                                      short_msg => $options{config}->{message_multiple});
      }
      
      foreach my $instance (sort keys %{$self->{$options{config}->{name}}}) {
          if (defined($options{config}->{cb_long_output})) {
              $self->{output}->output_add(long_msg => $self->call_object_callback(method_name => $options{config}->{cb_long_output},
                                                                                  instance_value => $self->{$options{config}->{name}}->{$instance}));
          }
          
          $self->{prefix_multiple_output} = '';
          $self->{prefix_multiple_output_done} = { ok => 0, warning => 0, critical => 0, unknown => 0 };
          $self->{prefix_multiple_output} = $self->call_object_callback(method_name => $options{config}->{cb_prefix_output}, instance_value => $self->{$options{config}->{name}}->{$instance})
               if (defined($options{config}->{cb_prefix_output}));
          my $indent_long_output = '';
          $indent_long_output = $options{config}->{indent_long_output}
              if (defined($options{config}->{indent_long_output}));
          
          foreach my $group (@{$options{config}->{group}}) {
              next if (!defined($self->{$options{config}->{name}}->{$instance}->{$group->{name}}));
              $self->{$group->{name}} = $self->{$options{config}->{name}}->{$instance}->{$group->{name}};
              
              if ($group->{type} == 1) {
                  $self->run_multiple_instances(config => $group, multiple_parent => $multiple, instance_parent => $instance, indent_long_output => $indent_long_output);
              } elsif ($group->{type} == 0) {
                  $self->run_global(config => $group, multiple_parent => $multiple, called_multiple => 1, force_instance => $instance, indent_long_output => $indent_long_output);
              }
          }
      }
  }
  
  sub run {
      my ($self, %options) = @_;
      
      $self->manage_selection(%options);
      
      $self->{new_datas} = undef;
      if (defined($self->{statefile_value})) {
          $self->{new_datas} = {};
          $self->{statefile_value}->read(statefile => $self->{cache_name}) if (defined($self->{cache_name}));
          $self->{new_datas}->{last_timestamp} = time();
      }
      
      foreach my $entry (@{$self->{maps_counters_type}}) {
          if ($entry->{type} == 0) {
              $self->run_global(config => $entry);
          } elsif ($entry->{type} == 1) {
              $self->run_instances(config => $entry);
          } elsif ($entry->{type} == 2) {
              $self->run_group(config => $entry);
          } elsif ($entry->{type} == 3) {
              $self->run_multiple(config => $entry);
          }
      }
          
      if (defined($self->{statefile_value})) {
          $self->{statefile_value}->write(data => $self->{new_datas});
      }
      $self->{output}->display();
      $self->{output}->exit();
  }
  
  sub manage_selection {
      my ($self, %options) = @_;
  
      # example for snmp
      #use Digest::MD5 qw(md5_hex);
      #$self->{cache_name} = "choose_name_" . $options{snmp}->get_hostname()  . '_' . $options{snmp}->get_port() . '_' . $self->{mode} . '_' . 
      #    (defined($self->{option_results}->{filter_counters}) ? md5_hex($self->{option_results}->{filter_counters}) : md5_hex('all'));
  }
  
  sub change_macros {
      my ($self, %options) = @_;
  
      foreach (@{$options{macros}}) {
          if (defined($self->{option_results}->{$_})) {
              $self->{option_results}->{$_} =~ s/%\{(.*?)\}/\$self->{result_values}->{$1}/g;
          }
      }
  }
      
  1;
  
  
  =head1 MODE
  
  Default template for counters. Should be extended.
  
  =over 8
  
  =item B<--filter-counters>
  
  Only display some counters (regexp can be used).
  Example to check SSL connections only : --filter-counters='^xxxx|yyyy$'
  
  =item B<--warning-*>
  
  Threshold warning.
  Can be: 'xxx', 'xxx'.
  
  =item B<--critical-*>
  
  Threshold critical.
  Can be: 'xxx', 'xxx'.
  
  =back
  
  =cut
CENTREON_PLUGINS_TEMPLATES_COUNTER

$fatpacked{"centreon/plugins/templates/hardware.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'CENTREON_PLUGINS_TEMPLATES_HARDWARE';
  #
  # Copyright 2019 Centreon (http://www.centreon.com/)
  #
  # Centreon is a full-fledged industry-strength solution that meets
  # the needs in IT infrastructure and application monitoring for
  # service performance.
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  #
  
  package centreon::plugins::templates::hardware;
  
  use base qw(centreon::plugins::mode);
  
  use strict;
  use warnings;
  
  sub set_system {
      my ($self, %options) = @_;
      
      # To check with a regexp
      #$self->{regexp_threshold_overload_check_section_option} = '';
      #$self->{cb_threshold_overload_check_section_option} = 'callbackname';
      
      #$self->{regexp_threshold_numeric_check_section_option} = '';
      #$self->{cb_threshold_numeric_check_section_option} = 'callbackname';
      
      # Some callbacks 
      #$self->{cb_hook1} = 'callbackname'; # before the loads
      #$self->{cb_hook2} = 'callbackname'; # between loads and requests
      #$self->{cb_hook3} = 'callbackname'; # after requests
      #$self->{cb_hook4} = 'callbackname'; # after output
      
      # Example for threshold:
      #$self->{thresholds} = {
      #    fan => [
      #        ['bad', 'CRITICAL'],
      #        ['good', 'OK'],
      #        ['notPresent', 'OK'],
      #    ],
      #};
      
      # Unset the call to load components
      #$self->{components_exec_load} = 0;
      
      # Set the path_info
      #$self->{components_path} = 'network::xxxx::mode::components';
      
      # Set the components
      #$self->{components_module} = ['cpu', 'memory', ...];
  }
  
  sub call_object_callback {
      my ($self, %options) = @_;
      
      if (defined($options{method_name})) {
          my $method = $self->can($options{method_name});
          if ($method) {
              return $self->$method(%options);
          }
      }
      
      return undef;
  }
  
  sub new {
      my ($class, %options) = @_;
      my $self = $class->SUPER::new(package => __PACKAGE__, %options);
      bless $self, $class;
      
      $self->{version} = '1.0';
      $options{options}->add_options(arguments => {
          'component:s'             => { name => 'component', default => '.*' },
          'no-component:s'          => { name => 'no_component' },
          'threshold-overload:s@'   => { name => 'threshold_overload' },
          'add-name-instance'       => { name => 'add_name_instance' },
      });
      
      $self->{performance} = (defined($options{no_performance}) && $options{no_performance} == 1) ?
          0 : 1;
      if ($self->{performance} == 1) {
          $options{options}->add_options(arguments => {
              'warning:s@'     => { name => 'warning' },
              'critical:s@'   => { name => 'critical' },
          });
      }
      
      $self->{filter_exclude} = (defined($options{no_filter_exclude}) && $options{no_filter_exclude} == 1) ?
          0 : 1;
      if ($self->{filter_exclude} == 1) {
          $options{options}->add_options(arguments => {
              'exclude:s'     => { name => 'exclude' },
              'filter:s@'     => { name => 'filter' },
          });
      }
      $self->{absent} = (defined($options{no_absent}) && $options{no_absent} == 1) ?
          0 : 1;
      if ($self->{absent} == 1) {
          $options{options}->add_options(arguments => {
              'absent-problem:s@'       => { name => 'absent_problem' },
          });
      }
      
      $self->{load_components} = (defined($options{no_load_components}) && $options{no_load_components} == 1) ?
          0 : 1;
      $self->{components} = {};
      $self->{no_components} = undef;
      
      $self->{components_module} = [];
      $self->{components_exec_load} = 1;
      $self->set_system();
  
      $self->{count} = (defined($options{no_count}) && $options{no_count} == 1) ?
          0 : 1;
      if ($self->{count} == 1) {
          foreach my $component (@{$self->{components_module}}) {
              $options{options}->add_options(arguments => {
                  'warning-count-' . $component . ':s'    => { name => 'warning_count_' . $component },
                  'critical-count-' . $component . ':s'    => { name => 'critical_count_' . $component },
              });
          }
      }
  
      $self->{request} = [];
      
      return $self;
  }
  
  sub check_options {
      my ($self, %options) = @_;
      $self->SUPER::init(%options);
      
      if (defined($self->{option_results}->{no_component})) {
          if ($self->{option_results}->{no_component} ne '') {
              $self->{no_components} = $self->{option_results}->{no_component};
          } else {
              $self->{no_components} = 'critical';
          }
      }
      
      if ($self->{filter_exclude} == 1) {
          $self->{filter} = [];
          foreach my $val (@{$self->{option_results}->{filter}}) {
              next if (!defined($val) || $val eq '');
              my @values = split (/,/, $val);
              push @{$self->{filter}}, { filter => $values[0], instance => $values[1] }; 
          }
      }
      
      if ($self->{absent} == 1) {
          $self->{absent_problem} = [];
          foreach my $val (@{$self->{option_results}->{absent_problem}}) {
              next if (!defined($val) || $val eq '');
              my @values = split (/,/, $val);
              push @{$self->{absent_problem}}, { filter => $values[0], instance => $values[1] }; 
          }
      }
      
      $self->{overload_th} = {};
      foreach my $val (@{$self->{option_results}->{threshold_overload}}) {
          next if (!defined($val) || $val eq '');
          my @values = split (/,/, $val);
          if (scalar(@values) < 3) {
              $self->{output}->add_option_msg(short_msg => "Wrong threshold-overload option '" . $val . "'.");
              $self->{output}->option_exit();
          }
          my ($section, $instance, $status, $filter);
          if (scalar(@values) == 3) {
              ($section, $status, $filter) = @values;
              $instance = '.*';
          } else {
               ($section, $instance, $status, $filter) = @values;
          }
          if (defined($self->{regexp_threshold_overload_check_section_option}) && 
              $section !~ /$self->{regexp_threshold_overload_check_section_option}/) {
              $self->{output}->add_option_msg(short_msg => "Wrong threshold-overload section '" . $val . "'.");
              $self->{output}->option_exit();
          }
          $self->call_object_callback(method_name => $self->{cb_threshold_overload_check_section_option}, 
                                      section => $section, option_value => $val);
  
          if ($self->{output}->is_litteral_status(status => $status) == 0) {
              $self->{output}->add_option_msg(short_msg => "Wrong threshold-overload status '" . $val . "'.");
              $self->{output}->option_exit();
          }
          $self->{overload_th}->{$section} = [] if (!defined($self->{overload_th}->{$section}));
          push @{$self->{overload_th}->{$section}}, {filter => $filter, status => $status, instance => $instance };
      }
      
      if ($self->{performance} == 1) {
          $self->{numeric_threshold} = {};
          foreach my $option (('warning', 'critical')) {
              foreach my $val (@{$self->{option_results}->{$option}}) {
                  next if (!defined($val) || $val eq '');
                  if ($val !~ /^(.*?),(.*?),(.*)$/) {
                      $self->{output}->add_option_msg(short_msg => "Wrong $option option '" . $val . "'.");
                      $self->{output}->option_exit();
                  }
                  my ($section, $instance, $value) = ($1, $2, $3);                
                  if (defined($self->{regexp_threshold_numeric_check_section_option}) && 
                      $section !~ /$self->{regexp_threshold_numeric_check_section_option}/) {
                      $self->{output}->add_option_msg(short_msg => "Wrong $option option '" . $val . "'.");
                      $self->{output}->option_exit();
                  }   
                  $self->call_object_callback(method_name => $self->{cb_threshold_numeric_check_section_option}, 
                                              section => $section, option_name => $option, option_value => $val);
  
                  my $position = 0;
                  if (defined($self->{numeric_threshold}->{$section})) {
                      $position = scalar(@{$self->{numeric_threshold}->{$section}});
                  }
                  if (($self->{perfdata}->threshold_validate(label => $option . '-' . $section . '-' . $position, value => $value)) == 0) {
                      $self->{output}->add_option_msg(short_msg => "Wrong $option threshold '" . $value . "'.");
                      $self->{output}->option_exit();
                  }
                  $self->{numeric_threshold}->{$section} = [] if (!defined($self->{numeric_threshold}->{$section}));
                  push @{$self->{numeric_threshold}->{$section}}, { label => $option . '-' . $section . '-' . $position, threshold => $option, instance => $instance };
              }
          }
      }
      
      if ($self->{count} == 1) {
          foreach my $comp (@{$self->{components_module}}) {
              foreach my $threshold (('warning', 'critical')) {
                  if (($self->{perfdata}->threshold_validate(label => $threshold . '-count-' . $comp, value => $self->{option_results}->{$threshold . '_count_' . $comp})) == 0) {
                      $self->{output}->add_option_msg(short_msg => "Wrong " . $threshold . " threshold '" . $self->{option_results}->{$threshold . '_count_' . $comp} . "'.");
                      $self->{output}->option_exit();
                  }
              }
          }
      }
  }
  
  sub load_components {
      my ($self, %options) = @_;
      
      foreach (@{$self->{components_module}}) {
          if (/$self->{option_results}->{component}/) {
              my $mod_name = $self->{components_path} . "::$_";
              centreon::plugins::misc::mymodule_load(output => $self->{output}, module => $mod_name,
                                                     error_msg => "Cannot load module '$mod_name'.") if ($self->{load_components} == 1);
              $self->{loaded} = 1;
              if ($self->{components_exec_load} == 1) {
                  my $func = $mod_name->can('load');
                  $func->($self);
              }
          }
      }
  }
  
  sub exec_components {
      my ($self, %options) = @_;
      
      foreach (@{$self->{components_module}}) {
          if (/$self->{option_results}->{component}/) {
              my $mod_name = $self->{components_path} . "::$_";
              my $func = $mod_name->can('check');
              $func->($self); 
          }
      }
  }
  
  sub display {
      my ($self, %options) = @_;
      
      my $total_components = 0;
      my $display_by_component = '';
      my $display_by_component_append = '';
      my $exit = 'OK';
      my $exits = [];
      my ($warn, $crit);
  
      foreach my $comp (sort(keys %{$self->{components}})) {
          # Skipping short msg when no components
          next if ($self->{components}->{$comp}->{total} == 0 && $self->{components}->{$comp}->{skip} == 0);
  
          if ($self->{count} == 1) {
              ($exit, $warn, $crit) = $self->get_severity_count(label => $comp, value => $self->{components}->{$comp}->{total});
              if (!$self->{output}->is_status(value => $exit, compare => 'ok', litteral => 1)) {
                  $self->{output}->output_add(severity => $exit,
                                              short_msg => sprintf("'%s' components '%s' checked",
                                                              $self->{components}->{$comp}->{total},
                                                              $comp));
              }
              $self->{output}->perfdata_add(
                  label => 'count_' . $comp,
                  nlabel => 'hardware.' . $comp . '.count',
                  value => $self->{components}->{$comp}->{total},
                  warning => $warn,
                  critical => $crit
              );
              push @{$exits}, $exit;
          }
  
          $total_components += $self->{components}->{$comp}->{total} + $self->{components}->{$comp}->{skip};
          my $count_by_components = $self->{components}->{$comp}->{total} + $self->{components}->{$comp}->{skip}; 
          $display_by_component .= $display_by_component_append . $self->{components}->{$comp}->{total} . '/' . $count_by_components . ' ' . $self->{components}->{$comp}->{name};
          $display_by_component_append = ', ';
      }
  
      $exit = $self->{output}->get_most_critical(status => $exits) if (scalar(@{$exits}) > 0);
      
      if ($self->{output}->is_status(value => $exit, compare => 'ok', litteral => 1)) {
          $self->{output}->output_add(short_msg => sprintf('All %s components are ok [%s].', 
                                                          $total_components,
                                                          $display_by_component)
                                      );
      }
  
      if (defined($self->{option_results}->{no_component}) && $total_components == 0) {
          $self->{output}->output_add(severity => $self->{no_components},
                                      short_msg => 'No components are checked.');
      }
  }
  
  sub run {
      my ($self, %options) = @_;
  
      $self->{loaded} = 0;  
      $self->call_object_callback(method_name => $self->{cb_hook1}, %options);
  
      $self->load_components(%options);
      if ($self->{loaded} == 0) {
          $self->{output}->add_option_msg(short_msg => "Wrong option. Cannot find component '" . $self->{option_results}->{component} . "'.");
          $self->{output}->option_exit();
      }
      
      $self->call_object_callback(method_name => $self->{cb_hook2}, %options);
      $self->exec_components(%options);
      $self->call_object_callback(method_name => $self->{cb_hook3}, %options);
      
      $self->display();
  
      $self->call_object_callback(method_name => $self->{cb_hook4}, %options);
      
      $self->{output}->display();
      $self->{output}->exit();
  }
  
  sub check_filter {
      my ($self, %options) = @_;
      
      # Old compatibility variable. We'll be deleted
      if (defined($self->{option_results}->{exclude})) {
          if (defined($options{instance})) {
              if ($self->{option_results}->{exclude} =~ /(^|\s|,)${options{section}}[^,]*#\Q$options{instance}\E#/) {
                  $self->{components}->{$options{section}}->{skip}++;
                  $self->{output}->output_add(long_msg => sprintf("skipping $options{section} section $options{instance} instance."));
                  return 1;
              }
          } elsif (defined($self->{option_results}->{exclude}) && $self->{option_results}->{exclude} =~ /(^|\s|,)$options{section}(\s|,|$)/) {
              $self->{output}->output_add(long_msg => sprintf("skipping $options{section} section."));
              return 1;
          }
      }
  
      $options{instance} .= '#' . $options{name} if (defined($self->{option_results}->{add_name_instance}) && defined($options{name}));   
      foreach (@{$self->{filter}}) {
          if ($options{section} =~ /$_->{filter}/) {
              if (!defined($options{instance}) && !defined($_->{instance})) {
                  $self->{output}->output_add(long_msg => sprintf("skipping $options{section} section."));
                  return 1;
              } elsif (defined($options{instance}) && $options{instance} =~ /$_->{instance}/) {
                  $self->{output}->output_add(long_msg => sprintf("skipping $options{section} section $options{instance} instance."));
                  return 1;
              }
          }
      }
      
      return 0;
  }
  
  sub absent_problem {
      my ($self, %options) = @_;
  
      $options{instance} .= '#' . $options{name} if (defined($self->{option_results}->{add_name_instance}) && defined($options{name}));
      foreach (@{$self->{absent_problem}}) {
          if ($options{section} =~ /$_->{filter}/) {
              if (!defined($_->{instance}) || $options{instance} =~ /$_->{instance}/) {
                  $self->{output}->output_add(severity => 'CRITICAL',
                                              short_msg => sprintf("Component '%s' instance '%s' is not present", 
                                                                   $options{section}, $options{instance}));
                  $self->{output}->output_add(long_msg => sprintf("Skipping $options{section} section $options{instance} instance (not present)"));
                  $self->{components}->{$options{section}}->{skip}++;
                  return 1;
              }
          }
      }
      
      return 0;
  }
  
  sub get_severity_count {
      my ($self, %options) = @_;
      my $status = 'OK'; # default
      my $thresholds = { warning => undef, critical => undef };
      
      $status = $self->{perfdata}->threshold_check(value => $options{value},
                                                   threshold => [ { label => 'critical-count-' . $options{label}, 'exit_litteral' => 'critical' }, 
                                                                  { label => 'warning-count-' . $options{label}, 'exit_litteral' => 'warning' } ]);
      $thresholds->{critical} = $self->{perfdata}->get_perfdata_for_output(label => 'critical-count-' . $options{label});
      $thresholds->{warning} = $self->{perfdata}->get_perfdata_for_output(label => 'warning-count-' . $options{label});
  
      return ($status, $thresholds->{warning}, $thresholds->{critical});
  }
  
  sub get_severity_numeric {
      my ($self, %options) = @_;
      my $status = 'OK'; # default
      my $thresholds = { warning => undef, critical => undef };
      my $checked = 0;
  
      $options{instance} .= '#' . $options{name} if (defined($self->{option_results}->{add_name_instance}) && defined($options{name}));
      if (defined($self->{numeric_threshold}->{$options{section}})) {
          my $exits = [];
          foreach (@{$self->{numeric_threshold}->{$options{section}}}) {
              if ($options{instance} =~ /$_->{instance}/) {
                  push @{$exits}, $self->{perfdata}->threshold_check(value => $options{value}, threshold => [ { label => $_->{label}, exit_litteral => $_->{threshold} } ]);
                  $thresholds->{$_->{threshold}} = $self->{perfdata}->get_perfdata_for_output(label => $_->{label});
                  $checked = 1;
              }
          }
          $status = $self->{output}->get_most_critical(status => $exits) if (scalar(@{$exits}) > 0);
      }
      
      return ($status, $thresholds->{warning}, $thresholds->{critical}, $checked);
  }
  
  sub get_severity {
      my ($self, %options) = @_;
      my $status = 'UNKNOWN'; # default 
      
      if (defined($self->{overload_th}->{$options{section}})) {
          foreach (@{$self->{overload_th}->{$options{section}}}) {            
              if ($options{value} =~ /$_->{filter}/i && 
                  (!defined($options{instance}) || $options{instance} =~ /$_->{instance}/)) {
                  $status = $_->{status};
                  return $status;
              }
          }
      }
      my $label = defined($options{label}) ? $options{label} : $options{section};
      foreach (@{$self->{thresholds}->{$label}}) {
          if ($options{value} =~ /$$_[0]/i) {
              $status = $$_[1];
              return $status;
          }
      }
      
      return $status;
  }
      
  1;
  
  
  =head1 MODE
  
  Default template for hardware. Should be extended.
  
  =over 8
  
  =item B<--component>
  
  Which component to check (Default: '.*').
  Can be: 'xxx', 'yyy'.
  
  =item B<--filter>
  
  Exclude some parts (comma seperated list) (Example: --filter=xxx --filter=yyyy)
  Can also exclude specific instance: --filter=xxxxx,instancevalue
  
  =item B<--absent-problem>
  
  Return an error if an entity is not 'present' (default is skipping) (comma seperated list)
  Can be specific or global: --absent-problem=xxxx,instancevalue
  
  =item B<--no-component>
  
  Return an error if no compenents are checked.
  If total (with skipped) is 0. (Default: 'critical' returns).
  
  =item B<--threshold-overload>
  
  Set to overload default threshold values (syntax: section,[instance,]status,regexp)
  It used before default thresholds (order stays).
  Example: --threshold-overload='xxxxx,CRITICAL,^(?!(normal)$)'
  
  =item B<--warning>
  
  Set warning threshold for temperatures (syntax: type,instance,threshold)
  Example: --warning='xxxxx,.*,30'
  
  =item B<--critical>
  
  Set critical threshold for temperatures (syntax: type,instance,threshold)
  Example: --critical='xxxxx,.*,40'
  
  =item B<--warning-count-xxxx>
  
  Set warning threshold for component count.
  
  =item B<--critical-count-xxxx>
  
  Set critical threshold for component count.
  
  =back
  
  =cut
CENTREON_PLUGINS_TEMPLATES_HARDWARE

$fatpacked{"centreon/plugins/values.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'CENTREON_PLUGINS_VALUES';
  #
  # Copyright 2019 Centreon (http://www.centreon.com/)
  #
  # Centreon is a full-fledged industry-strength solution that meets
  # the needs in IT infrastructure and application monitoring for
  # service performance.
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  #
  
  package centreon::plugins::values;
  
  use strict;
  use warnings;
  # Warning message with sprintf and too much arguments.
  # Really annoying. Need to disable that warning
  no if ($^V gt v5.22.0), 'warnings' => 'redundant';
  
  sub new {
      my ($class, %options) = @_;
      my $self  = {};
      bless $self, $class;
  
      $self->{statefile} = $options{statefile};
      $self->{output} = $options{output};
      $self->{perfdata} = $options{perfdata};
      $self->{label} = $options{label};
      $self->{nlabel} = $options{nlabel};
      $self->{thlabel} = defined($options{thlabel}) ? $options{thlabel} : $self->{label};
  
      $self->{perfdatas} = [];
      
      $self->{output_template} = $self->{label} . ' : %s';
      $self->{output_use} = undef;
      $self->{output_change_bytes} = 0;
      $self->{output_absolute_unit} = '';
      $self->{output_per_second_unit} = '';
      
      $self->{output_error_template} = $self->{label} . ' : %s';
      
      $self->{threshold_use} = undef;
      $self->{threshold_warn} = undef;
      $self->{threshold_crit} = undef;
  
      $self->{per_second} = 0;
      $self->{manual_keys} = 0;
      $self->{last_timestamp} = undef;
  
      $self->{result_values} = {};
      
      return $self;
  }
  
  sub init {
      my ($self, %options) = @_;
      my $warn = defined($self->{threshold_warn}) ? $self->{threshold_warn} : 'warning-' . $self->{thlabel};
      my $crit = defined($self->{threshold_crit}) ? $self->{threshold_crit} : 'critical-' . $self->{thlabel}; 
      
      if (($self->{perfdata}->threshold_validate(label => $warn, value => $options{option_results}->{$warn})) == 0) {
          $self->{output}->add_option_msg(short_msg => "Wrong $warn threshold '" . $options{option_results}->{$warn} . "'.");
          $self->{output}->option_exit();
      }
      if (($self->{perfdata}->threshold_validate(label => $crit, value => $options{option_results}->{$crit})) == 0) {
          $self->{output}->add_option_msg(short_msg => "Wrong $crit threshold '" . $options{option_results}->{$crit} . "'.");
          $self->{output}->option_exit();
      }
  }
  
  sub set {
      my ($self, %options) = @_;
  
      foreach (keys %options) {
          $self->{$_} = $options{$_};
      }
  }
  
  sub calc {
      my ($self, %options) = @_;
  
      # manage only one value ;)
      foreach my $value (@{$self->{key_values}}) {
          if (defined($value->{diff}) && $value->{diff} == 1) { 
              if (defined($self->{per_second}) && $self->{per_second} == 1) {
                  $self->{result_values}->{$value->{name} . '_per_second'} = ($options{new_datas}->{$self->{instance} . '_' . $value->{name}} - $options{old_datas}->{$self->{instance} . '_' . $value->{name}}) / $options{delta_time};
              }
              $self->{result_values}->{$value->{name} . '_absolute'} = $options{new_datas}->{$self->{instance} . '_' . $value->{name}} - $options{old_datas}->{$self->{instance} . '_' . $value->{name}};
          } else {
              # absolute one. nothing to do. Can be used for values.
              $self->{result_values}->{$value->{name} . '_absolute'} = $options{new_datas}->{$self->{instance} . '_' . $value->{name}};
          }
      }
  
      return 0;
  }
  
  sub threshold_check {
      my ($self, %options) = @_;
      
      if (defined($self->{closure_custom_threshold_check})) {
          return &{$self->{closure_custom_threshold_check}}($self, %options);
      }
      
      my $warn = defined($self->{threshold_warn}) ? $self->{threshold_warn} : 'warning-' . $self->{thlabel};
      my $crit = defined($self->{threshold_crit}) ? $self->{threshold_crit} : 'critical-' . $self->{thlabel};
      
      my $first = defined($self->{key_values}->[0]) ? $self->{key_values}->[0]->{name} : '';
      my $value;
  
      if (!defined($self->{threshold_use})) {
          $value = $self->{result_values}->{$first . '_absolute'};
          if (defined($self->{per_second}) && $self->{per_second} == 1) {
              $value = $self->{result_values}->{$first . '_per_second'};
          }
      } else {
          $value = $self->{result_values}->{$self->{threshold_use}};
      }
  
      return $self->{perfdata}->threshold_check(value => $value, threshold => [ { label => $crit, 'exit_litteral' => 'critical' },
                                                                                { label => $warn, 'exit_litteral' => 'warning' }]);
  }
  
  sub output_error {
      my ($self, %options) = @_;
      
      return sprintf($self->{output_error_template}, $self->{error_msg});
  }
  
  sub output {
      my ($self, %options) = @_;
       
      if (defined($self->{closure_custom_output})) {
          return $self->{closure_custom_output}->($self);
      }
      my $first = $self->{key_values}->[0]->{name};
      my ($value, $unit) = (defined($first) ? $self->{result_values}->{$first . '_absolute'} : '', $self->{output_absolute_unit});
      
      if (!defined($self->{output_use})) {
          if ($self->{per_second} == 1) {
              $value = $self->{result_values}->{$first . '_per_second'};
              $unit = $self->{output_per_second_unit};
          }
      } else {
          $value = $self->{result_values}->{$self->{output_use}};
      }
  
      if ($self->{output_change_bytes} == 1) {
          ($value, $unit) = $self->{perfdata}->change_bytes(value => $value);
      } elsif ($self->{output_change_bytes} == 2) {
          ($value, $unit) = $self->{perfdata}->change_bytes(value => $value, network => 1);
      }
      
      return sprintf($self->{output_template}, $value, $unit);
  }
  
  sub use_instances {
      my ($self, %options) = @_;
  
      if (!defined($options{extra_instance}) || $options{extra_instance} != 0 || $self->{output}->use_new_perfdata()) {
          return 1;
      }
      
      return 0;
  }
  
  sub perfdata {
      my ($self, %options) = @_;
      
      if (defined($self->{closure_custom_perfdata})) {
          return &{$self->{closure_custom_perfdata}}($self, %options);
      }
      
      my $warn = defined($self->{threshold_warn}) ? $self->{threshold_warn} : 'warning-' . $self->{thlabel};
      my $crit = defined($self->{threshold_crit}) ? $self->{threshold_crit} : 'critical-' . $self->{thlabel}; 
      
      foreach my $perf (@{$self->{perfdatas}}) {
          my ($label, $extra_label, $min, $max, $th_total) = ($self->{label}, '');
          my $cast_int = (defined($perf->{cast_int}) && $perf->{cast_int} == 1) ? 1 : 0;
          my $template = '%s';
          
          $template = $perf->{template} if (defined($perf->{template}));
          $label = $perf->{label} if (defined($perf->{label}));
          if (defined($perf->{min})) {
              $min = ($perf->{min} =~ /[^0-9]/) ? $self->{result_values}->{$perf->{min}} : $perf->{min};
          }
          if (defined($perf->{max})) {
              $max = ($perf->{max} =~ /[^0-9]/) ? $self->{result_values}->{$perf->{max}} : $perf->{max};
          }
          if (defined($perf->{threshold_total})) {
              $th_total = ($perf->{threshold_total} =~ /[^0-9]/) ? $self->{result_values}->{$perf->{threshold_total}} : $perf->{threshold_total};
          }
          
          my $instances;
          if (defined($perf->{label_extra_instance}) && $perf->{label_extra_instance} == 1) {
              my $instance = '';
              if (defined($perf->{instance_use})) {
                  $instance = $self->{result_values}->{$perf->{instance_use}};
              } else {
                  $instance = $self->{instance};
              }
              
              if (!defined($options{extra_instance}) || $options{extra_instance} != 0 || $self->{output}->use_new_perfdata()) {
                  $instances = $instance;
              }
          }
  
          $self->{output}->perfdata_add(
              label => $label,
              instances => $instances,
              nlabel => $self->{nlabel},
              unit => $perf->{unit},
              value => $cast_int == 1 ? int($self->{result_values}->{$perf->{value}}) : sprintf($template, $self->{result_values}->{$perf->{value}}),
              warning => $self->{perfdata}->get_perfdata_for_output(label => $warn, total => $th_total, cast_int => $cast_int),
              critical => $self->{perfdata}->get_perfdata_for_output(label => $crit, total => $th_total, cast_int => $cast_int),
              min => $min, max => $max
          );
      }
  }
  
  sub execute {
      my ($self, %options) = @_;
      my $old_datas = {};
  
      $self->{result_values} = {},
      $self->{error_msg} = undef;
      my $quit = 0;
      my $per_second = 0;
      
      $options{new_datas} = {} if (!defined($options{new_datas}));
      foreach my $value (@{$self->{key_values}}) {
          if (!defined($options{values}->{$value->{name}}) || 
              defined($value->{no_value}) && $options{values}->{$value->{name}} eq $value->{no_value}) {
              $quit = 2;
              last;
          }
      
          if (defined($value->{diff}) && $value->{diff} == 1) {            
              $options{new_datas}->{$self->{instance} . '_' . $value->{name}} = $options{values}->{$value->{name}};
              $old_datas->{$self->{instance} . '_' . $value->{name}} = $self->{statefile}->get(name => $self->{instance} . '_' . $value->{name});
              if (!defined($old_datas->{$self->{instance} . '_' . $value->{name}})) {
                  $quit = 1;
                  next;
              }
              if ($old_datas->{$self->{instance} . '_' . $value->{name}} > $options{new_datas}->{$self->{instance} . '_' . $value->{name}}) {
                  $old_datas->{$self->{instance} . '_' . $value->{name}} = 0;
              }
          } else {
              $options{new_datas}->{$self->{instance} . '_' . $value->{name}} = $options{values}->{$value->{name}};
              if (defined($self->{statefile})) {
                  $old_datas->{$self->{instance} . '_' . $value->{name}} = $self->{statefile}->get(name => $self->{instance} . '_' . $value->{name});
              }
          }
      }
      
      # Very manual
      if ($self->{manual_keys} == 1) {
          foreach my $name (keys %{$options{values}}) {
              $options{new_datas}->{$self->{instance} . '_' . $name} = $options{values}->{$name};
              if (defined($self->{statefile})) {
                  $old_datas->{$self->{instance} . '_' . $name} = $self->{statefile}->get(name => $self->{instance} . '_' . $name);
              }
          }
      }
  
      if ($quit == 2) {
          $self->{error_msg} = "skipped (no value(s))";
          return -10;
      }
      
      if ($quit == 1) {
          $self->{error_msg} = "Buffer creation";
          return -1;
      }
      
      if (defined($self->{per_second}) && $self->{per_second} == 1) {
          if (!defined($self->{last_timestamp})) {
              $self->{last_timestamp} = $self->{statefile}->get(name => 'last_timestamp');
          }
          if (!defined($self->{last_timestamp})) {
              $self->{error_msg} = "Buffer creation";
              return -1;
          }
      }
     
      my $delta_time;
      if (defined($self->{per_second}) && $self->{per_second} == 1) {
          $delta_time = $options{new_datas}->{last_timestamp} - $self->{last_timestamp};
          if ($delta_time <= 0) {
              $delta_time = 1;
          }
      }
  
      if (defined($self->{closure_custom_calc})) {
          return $self->{closure_custom_calc}->($self, old_datas => $old_datas, new_datas => $options{new_datas}, delta_time => $delta_time, extra_options => $self->{closure_custom_calc_extra_options});
      }
      return $self->calc(old_datas => $old_datas, new_datas => $options{new_datas}, delta_time => $delta_time);
  }
  
  1;
  
  
CENTREON_PLUGINS_VALUES

$fatpacked{"os/linux/local/mode/cmdreturn.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'OS_LINUX_LOCAL_MODE_CMDRETURN';
  #
  # Copyright 2019 Centreon (http://www.centreon.com/)
  #
  # Centreon is a full-fledged industry-strength solution that meets
  # the needs in IT infrastructure and application monitoring for
  # service performance.
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  #
  
  package os::linux::local::mode::cmdreturn;
  
  use base qw(centreon::plugins::mode);
  
  use strict;
  use warnings;
  use centreon::plugins::misc;
  
  sub new {
      my ($class, %options) = @_;
      my $self = $class->SUPER::new(package => __PACKAGE__, %options);
      bless $self, $class;
      
      $options{options}->add_options(arguments =>
                                  { 
                                    "hostname:s"        => { name => 'hostname' },
                                    "remote"            => { name => 'remote' },
                                    "ssh-option:s@"     => { name => 'ssh_option' },
                                    "ssh-path:s"        => { name => 'ssh_path' },
                                    "ssh-command:s"     => { name => 'ssh_command', default => 'ssh' },
                                    "timeout:s"         => { name => 'timeout', default => 30 },
                                    "sudo"              => { name => 'sudo' },
                                    "command:s"         => { name => 'command' },
                                    "command-path:s"    => { name => 'command_path' },
                                    "command-options:s" => { name => 'command_options' },
                                    "manage-returns:s"  => { name => 'manage_returns', default => '' },
                                  });
      $self->{manage_returns} = {};
      return $self;
  }
  
  sub check_options {
      my ($self, %options) = @_;
      $self->SUPER::init(%options);
      
      if (!defined($self->{option_results}->{command})) {
         $self->{output}->add_option_msg(short_msg => "Need to specify command option.");
         $self->{output}->option_exit();
      }
      
      foreach my $entry (split(/#/, $self->{option_results}->{manage_returns})) {
          next if (!($entry =~ /(.*?),(.*?),(.*)/));
          next if (!$self->{output}->is_litteral_status(status => $2));
          if ($1 ne '') {
              $self->{manage_returns}->{$1} = {return => $2, msg => $3};
          } else {
              $self->{manage_returns}->{default} = {return => $2, msg => $3};
          }
      }
      if ($self->{option_results}->{manage_returns} eq '' || scalar(keys %{$self->{manage_returns}}) == 0) {
         $self->{output}->add_option_msg(short_msg => "Need to specify manage-returns option correctly.");
         $self->{output}->option_exit();
      }
  }
  
  sub run {
      my ($self, %options) = @_;
  
      my ($stdout, $exit_code) = centreon::plugins::misc::execute(output => $self->{output},
                                                                  options => $self->{option_results},
                                                                  sudo => $self->{option_results}->{sudo},
                                                                  command => $self->{option_results}->{command},
                                                                  command_path => $self->{option_results}->{command_path},
                                                                  command_options => $self->{option_results}->{command_options},
                                                                  no_quit => 1);
      my $long_msg = $stdout;
      $long_msg =~ s/\|/~/mg;
      $self->{output}->output_add(long_msg => $long_msg);
      
      if (defined($self->{manage_returns}->{$exit_code})) {
          $self->{output}->output_add(severity => $self->{manage_returns}->{$exit_code}->{return}, 
                                      short_msg => $self->{manage_returns}->{$exit_code}->{msg});
      } elsif (defined($self->{manage_returns}->{default})) {
          $self->{output}->output_add(severity => $self->{manage_returns}->{default}->{return}, 
                                      short_msg => $self->{manage_returns}->{default}->{msg});
      } else {
          $self->{output}->output_add(severity => 'UNKNWON', 
                                      short_msg => 'Exit code from command');
      }
      
      if (defined($exit_code)) {
          $self->{output}->perfdata_add(label => "code",
                                        value => $exit_code);
      }
      
      $self->{output}->display();
      $self->{output}->exit();
  }
  
  1;
  
  
  =head1 MODE
  
  Check command returns.
  
  =over 8
  
  =item B<--manage-returns>
  
  Set action according command exit code.
  Example: 0,OK,File xxx exist#1,CRITICAL,File xxx not exist#,UNKNOWN,Command problem
  
  =item B<--remote>
  
  Execute command remotely in 'ssh'.
  
  =item B<--hostname>
  
  Hostname to query (need --remote).
  
  =item B<--ssh-option>
  
  Specify multiple options like the user (example: --ssh-option='-l=centreon-engine' --ssh-option='-p=52').
  
  =item B<--ssh-path>
  
  Specify ssh command path (default: none)
  
  =item B<--ssh-command>
  
  Specify ssh command (default: 'ssh'). Useful to use 'plink'.
  
  =item B<--timeout>
  
  Timeout in seconds for the command (Default: 30).
  
  =item B<--sudo>
  
  Use 'sudo' to execute the command.
  
  =item B<--command>
  
  Command to test (Default: none).
  You can use 'sh' to use '&&' or '||'.
  
  =item B<--command-path>
  
  Command path (Default: none).
  
  =item B<--command-options>
  
  Command options (Default: none).
  
  =back
  
  =cut
OS_LINUX_LOCAL_MODE_CMDRETURN

$fatpacked{"os/linux/local/mode/connections.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'OS_LINUX_LOCAL_MODE_CONNECTIONS';
  #
  # Copyright 2019 Centreon (http://www.centreon.com/)
  #
  # Centreon is a full-fledged industry-strength solution that meets
  # the needs in IT infrastructure and application monitoring for
  # service performance.
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  #
  
  package os::linux::local::mode::connections;
  
  use base qw(centreon::plugins::mode);
  
  use strict;
  use warnings;
  use centreon::plugins::misc;
  
  my %map_ss_states = (
      UNCONN => 'closed',
      LISTEN => 'listen',
      'SYN-SENT' => 'synSent',
      'SYN-RECV' => 'synReceived',
      ESTAB => 'established',
      'FIN-WAIT-1' => 'finWait1',
      'FIN-WAIT-2' => 'finWait2',
      'CLOSE-WAIT' => 'closeWait',
      'LAST-ACK' => 'lastAck',
      CLOSING => 'closing',
      'TIME-WAIT' => 'timeWait',
      UNKNOWN => 'unknown',
  );
  
  my %map_states = (
      CLOSED => 'closed',
      LISTEN => 'listen',
      SYN_SENT => 'synSent',
      SYN_RECV => 'synReceived',
      ESTABLISHED => 'established',
      FIN_WAIT1 => 'finWait1',
      FIN_WAIT2 => 'finWait2',
      CLOSE_WAIT => 'closeWait',
      LAST_ACK => 'lastAck',
      CLOSING => 'closing',
      TIME_WAIT => 'timeWait',
      UNKNOWN => 'unknown',
  );
  
  sub new {
      my ($class, %options) = @_;
      my $self = $class->SUPER::new(package => __PACKAGE__, %options);
      bless $self, $class;
      
      $options{options}->add_options(arguments =>
                                  { 
                                    "hostname:s"        => { name => 'hostname' },
                                    "remote"            => { name => 'remote' },
                                    "ssh-option:s@"     => { name => 'ssh_option' },
                                    "ssh-path:s"        => { name => 'ssh_path' },
                                    "ssh-command:s"     => { name => 'ssh_command', default => 'ssh' },
                                    "timeout:s"         => { name => 'timeout', default => 30 },
                                    "sudo"              => { name => 'sudo' },
                                    "command:s"         => { name => 'command', },
                                    "command-path:s"    => { name => 'command_path', },
                                    "command-options:s" => { name => 'command_options', },
                                    "warning:s"       => { name => 'warning', },
                                    "critical:s"      => { name => 'critical', },
                                    "service:s@"      => { name => 'service', },
                                    "application:s@"  => { name => 'application', },
                                    "con-mode:s"      => { name => 'con_mode', default => 'netstat' },
                                  });
      @{$self->{connections}} = ();
      $self->{services} = { total => { filter => '(?!(udp*))#.*?#.*?#.*?#.*?#(?!(listen))', builtin => 1, number => 0, msg => 'Total connections: %d' } };
      $self->{applications} = {};
      $self->{states} = { closed => 0, listen => 0, synSent => 0, synReceived => 0,
                          established => 0, finWait1 => 0, finWait2 => 0, closeWait => 0,
                          lastAck => 0, closing => 0, timeWait => 0 };
      return $self;
  }
  
  sub netstat_build {
      my ($self, %options) = @_;
  
      foreach my $line (split /\n/, $self->{stdout}) {
          next if ($line !~ /^(tcp|udp)\s+\S+\s+\S+\s+(\S+)\s+(\S+)\s*(\S*)/);
          my ($type, $src, $dst, $state) = ($1, $2, $3, $4);
          $src =~ /(.*):(\d+|\*)$/;
          my ($src_addr, $src_port) = ($1, $2);
          $dst =~ /(.*):(\d+|\*)$/;
          my ($dst_addr, $dst_port) = ($1, $2);
          $type .= '6' if ($src_addr !~ /^\d+\.\d+\.\d+\.\d+$/);
          
          if ($type =~ /^udp/) {
              if ($dst_port eq '*') {
                  $state = 'listen';
              } else {
                  $state = 'established';
              }
          } else {
              $state = $map_states{$state};
              $self->{states}->{$state}++;
          }
          
          push @{$self->{connections}}, $type . "#$src_addr#$src_port#$dst_addr#$dst_port#" . lc($state);
      }
  }
  
  sub ss_build {
      my ($self, %options) = @_;
  
      foreach my $line (split /\n/, $self->{stdout}) {
          next if ($line !~ /^(tcp|udp)\s+(\S+)\s+\S+\s+\S+\s+(\S+)\s*(\S+)/);
          my ($type, $src, $dst, $state) = ($1, $3, $4, $2);
          $src =~ /(.*):(\d+|\*)$/;
          my ($src_addr, $src_port) = ($1, $2);
          $dst =~ /(.*):(\d+|\*)$/;
          my ($dst_addr, $dst_port) = ($1, $2);
          $type .= '6' if ($src_addr !~ /^\d+\.\d+\.\d+\.\d+$/);
          
          if ($type =~ /^udp/) {
              if ($dst_port eq '*') {
                  $state = 'listen';
              } else {
                  $state = 'established';
              }
          } else {
              $state = $map_ss_states{$state};
              $self->{states}->{$state}++;
          }
          
          push @{$self->{connections}}, $type . "#$src_addr#$src_port#$dst_addr#$dst_port#" . lc($state);
      }
  }
  
  sub build_connections {
      my ($self, %options) = @_;
      
      if ($self->{option_results}->{con_mode} !~ /^ss|netstat$/) {
          $self->{output}->add_option_msg(short_msg => "Unknown --con-mode option.");
          $self->{output}->option_exit();
      }
      
      if (!defined($self->{option_results}->{command})) {
          if ($self->{option_results}->{con_mode} eq 'netstat') {
              $self->{option_results}->{command} = 'netstat';
              $self->{option_results}->{command_options} = '-antu 2>&1';
          } else {
              $self->{option_results}->{command} = 'ss';
              $self->{option_results}->{command_options} = '-a -A tcp,udp -n 2>&1';
          }
      }
      
      $self->{stdout} = centreon::plugins::misc::execute(output => $self->{output},
                                                         options => $self->{option_results},
                                                         sudo => $self->{option_results}->{sudo},
                                                         command => $self->{option_results}->{command},
                                                         command_path => $self->{option_results}->{command_path},
                                                         command_options => $self->{option_results}->{command_options});
      if ($self->{option_results}->{command} eq 'ss') {
          $self->ss_build();
      } else {
          $self->netstat_build();
      }
  }
  
  sub check_services {
      my ($self, %options) = @_;
      
      foreach my $service (@{$self->{option_results}->{service}}) {
          my ($tag, $ipv, $state, $port_src, $port_dst, $filter_ip_src, $filter_ip_dst, $warn, $crit) = split /,/, $service;
          
          if (!defined($tag) || $tag eq '') {
              $self->{output}->add_option_msg(short_msg => "Tag for service '" . $service . "' must be defined.");
              $self->{output}->option_exit();
          }
          if (defined($self->{services}->{$tag})) {
              $self->{output}->add_option_msg(short_msg => "Tag '" . $tag . "' (service) already exists.");
              $self->{output}->option_exit();
          }
          
          $self->{services}->{$tag} = { filter => ((defined($ipv) && $ipv ne '') ? $ipv : '.*?') . '#' . 
                                                  ((defined($filter_ip_src) && $filter_ip_src ne '') ? $filter_ip_src : '.*?') . '#' . 
                                                  ((defined($port_src) && $port_src ne '') ? $port_src : '.*?') . '#' . 
                                                  ((defined($filter_ip_dst) && $filter_ip_dst ne '') ? $filter_ip_dst : '.*?') . '#' . 
                                                  ((defined($port_dst) && $port_dst ne '') ? $port_dst : '.*?') . '#' . 
                                                  ((defined($state) && $state ne '') ? lc($state) : '(?!(listen))')
                                                  , 
                                        builtin => 0, number => 0 };
          if (($self->{perfdata}->threshold_validate(label => 'warning-service-' . $tag, value => $warn)) == 0) {
              $self->{output}->add_option_msg(short_msg => "Wrong warning threshold '" . $warn . "' for service '$tag'.");
              $self->{output}->option_exit();
          }
          if (($self->{perfdata}->threshold_validate(label => 'critical-service-' . $tag, value => $crit)) == 0) {
              $self->{output}->add_option_msg(short_msg => "Wrong critical threshold '" . $crit . "' for service '$tag'.");
              $self->{output}->option_exit();
          }
      }
  }
  
  sub check_applications {
      my ($self, %options) = @_;
      
      foreach my $app (@{$self->{option_results}->{application}}) {
          my ($tag, $services, $warn, $crit) = split /,/, $app;
          
          if (!defined($tag) || $tag eq '') {
              $self->{output}->add_option_msg(short_msg => "Tag for application '" . $app . "' must be defined.");
              $self->{output}->option_exit();
          }
          if (defined($self->{applications}->{$tag})) {
              $self->{output}->add_option_msg(short_msg => "Tag '" . $tag . "' (application) already exists.");
              $self->{output}->option_exit();
          }
          
          $self->{applications}->{$tag} = {
                                              services => {},
                                          };
          foreach my $service (split /\|/, $services) {
              if (!defined($self->{services}->{$service})) {
                  $self->{output}->add_option_msg(short_msg => "Service '" . $service . "' is not defined.");
                  $self->{output}->option_exit();
              }
              $self->{applications}->{$tag}->{services}->{$service} = 1;
          }
          
          if (($self->{perfdata}->threshold_validate(label => 'warning-app-' . $tag, value => $warn)) == 0) {
              $self->{output}->add_option_msg(short_msg => "Wrong warning threshold '" . $warn . "' for application '$tag'.");
              $self->{output}->option_exit();
          }
          if (($self->{perfdata}->threshold_validate(label => 'critical-app-' . $tag, value => $crit)) == 0) {
              $self->{output}->add_option_msg(short_msg => "Wrong critical threshold '" . $crit . "' for application '$tag'.");
              $self->{output}->option_exit();
          }
      }
  }
  
  sub test_services {
      my ($self, %options) = @_;
      
      foreach my $tag (keys %{$self->{services}}) {
          foreach (@{$self->{connections}}) {
              if (/$self->{services}->{$tag}->{filter}/) {
                  $self->{services}->{$tag}->{number}++;
              }
          }        
          
          my $exit_code = $self->{perfdata}->threshold_check(value => $self->{services}->{$tag}->{number}, 
                                 threshold => [ { label => 'critical-service-' . $tag, 'exit_litteral' => 'critical' }, { label => 'warning-service-' . $tag, exit_litteral => 'warning' } ]);
          my ($perf_label, $msg) = ('service_' . $tag, "Service '$tag' connections: %d");
          if ($self->{services}->{$tag}->{builtin} == 1) {
              ($perf_label, $msg) = ($tag, $self->{services}->{$tag}->{msg});
          }
          
          $self->{output}->output_add(severity => $exit_code,
                                      short_msg => sprintf($msg, $self->{services}->{$tag}->{number}));
          $self->{output}->perfdata_add(label => $perf_label,
                                        value => $self->{services}->{$tag}->{number},
                                        warning => $self->{perfdata}->get_perfdata_for_output(label => 'warning-service-' . $tag),
                                        critical => $self->{perfdata}->get_perfdata_for_output(label => 'critical-service-' . $tag),
                                        min => 0);
      }
  }
  
  sub test_applications {
      my ($self, %options) = @_;
  
      foreach my $tag (keys %{$self->{applications}}) {
          my $number = 0;
          
          foreach (keys %{$self->{applications}->{$tag}->{services}}) {
              $number += $self->{services}->{$_}->{number};
          }
          
          my $exit_code = $self->{perfdata}->threshold_check(value => $number, 
                                 threshold => [ { label => 'critical-app-' . $tag, 'exit_litteral' => 'critical' }, { label => 'warning-app-' . $tag, exit_litteral => 'warning' } ]);
          $self->{output}->output_add(severity => $exit_code,
                                      short_msg => sprintf("Applicatin '%s' connections: %d", $tag, $number));
          $self->{output}->perfdata_add(label => 'app_' . $tag,
                                        value => $number,
                                        warning => $self->{perfdata}->get_perfdata_for_output(label => 'warning-app-' . $tag),
                                        critical => $self->{perfdata}->get_perfdata_for_output(label => 'critical-app-' . $tag),
                                        min => 0);
      }
  }
  
  sub check_options {
      my ($self, %options) = @_;
      $self->SUPER::init(%options);
  
      if (($self->{perfdata}->threshold_validate(label => 'warning-service-total', value => $self->{option_results}->{warning})) == 0) {
          $self->{output}->add_option_msg(short_msg => "Wrong warning threshold '" . $self->{option_results}->{warning} . "'.");
          $self->{output}->option_exit();
      }
      if (($self->{perfdata}->threshold_validate(label => 'critical-service-total', value => $self->{option_results}->{critical})) == 0) {
          $self->{output}->add_option_msg(short_msg => "Wrong critical threshold '" . $self->{option_results}->{critical} . "'.");
          $self->{output}->option_exit();
      }
      $self->check_services();
      $self->check_applications();
  }
  
  sub run {
      my ($self, %options) = @_;
      $self->{snmp} = $options{snmp};
      
      $self->build_connections();
      $self->test_services();
      $self->test_applications();
      
      foreach (keys %{$self->{states}}) {
          $self->{output}->perfdata_add(label => 'con_' . $_,
                                        value => $self->{states}->{$_},
                                        min => 0);
      }
  
      $self->{output}->display();
      $self->{output}->exit();
  }
  
  1;
  
  
  =head1 MODE
  
  Check tcp/udp connections (udp connections are not in total. Use option '--service' to check it).
  'ipx', 'x25' connections are not checked (need output to do it. If you have, you can post it in forge :)
  
  =over 8
  
  =item B<--warning>
  
  Threshold warning for total connections.
  
  =item B<--critical>
  
  Threshold critical for total connections.
  
  =item B<--service>
  
  Check tcp connections following rules:
  tag,[type],[state],[port-src],[port-dst],[filter-ip-src],[filter-ip-dst],[threshold-warning],[threshold-critical]
  
  Example to test SSH connections on the server: --service="ssh,,,22,,,,10,20" 
  
  =over 16
  
  =item <tag>
  
  Name to identify service (must be unique and couldn't be 'total').
  
  =item <type>
  
  regexp - can use 'ipv4', 'ipv6', 'udp', 'udp6'. Empty means all.
  
  =item <state>
  
  regexp - can use 'finWait1', 'established',... Empty means all (minus listen).
  For udp connections, there are 'established' and 'listen'.
  
  =item <filter-ip-*>
  
  regexp - can use to exclude or include some IPs.
  
  =item <threshold-*>
  
  nagios-perfdata - number of connections.
  
  =back
  
  =item B<--application>
  
  Check tcp connections of mutiple services:
  tag,[services],[threshold-warning],[threshold-critical]
  
  Example:
  --application="web,http|https,100,200"
  
  =over 16
  
  =item <tag>
  
  Name to identify application (must be unique).
  
  =item <services>
  
  List of services (used the tag name. Separated by '|').
  
  =item <threshold-*>
  
  nagios-perfdata - number of connections.
  
  =back
  
  =item B<--remote>
  
  Execute command remotely in 'ssh'.
  
  =item B<--hostname>
  
  Hostname to query (need --remote).
  
  =item B<--ssh-option>
  
  Specify multiple options like the user (example: --ssh-option='-l=centreon-engine' --ssh-option='-p=52').
  
  =item B<--ssh-path>
  
  Specify ssh command path (default: none)
  
  =item B<--ssh-command>
  
  Specify ssh command (default: 'ssh'). Useful to use 'plink'.
  
  =item B<--timeout>
  
  Timeout in seconds for the command (Default: 30).
  
  =item B<--sudo>
  
  Use 'sudo' to execute the command.
  
  =item B<--command>
  
  Command to get information (Default: 'netstat').
  Can be changed if you have output in a file.
  If --con-mode='ss', command 'ss' will be used.
  
  =item B<--command-path>
  
  Command path (Default: none).
  
  =item B<--command-options>
  
  Command options (Default: '-antu 2>&1').
  If --con-mode='ss', argument default will '-a -A tcp,udp -n'.
  
  =item B<--con-mode>
  
  Default mode for parsing and command (Default: 'netstat').
  
  =back
  
  =cut
OS_LINUX_LOCAL_MODE_CONNECTIONS

$fatpacked{"os/linux/local/mode/cpu.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'OS_LINUX_LOCAL_MODE_CPU';
  #
  # Copyright 2019 Centreon (http://www.centreon.com/)
  #
  # Centreon is a full-fledged industry-strength solution that meets
  # the needs in IT infrastructure and application monitoring for
  # service performance.
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  #
  
  package os::linux::local::mode::cpu;
  
  use base qw(centreon::plugins::mode);
  
  use strict;
  use warnings;
  use centreon::plugins::misc;
  use centreon::plugins::statefile;
  
  sub new {
      my ($class, %options) = @_;
      my $self = $class->SUPER::new(package => __PACKAGE__, %options);
      bless $self, $class;
      
      $options{options}->add_options(arguments =>
                                  { 
                                    "hostname:s"        => { name => 'hostname' },
                                    "remote"            => { name => 'remote' },
                                    "ssh-option:s@"     => { name => 'ssh_option' },
                                    "ssh-path:s"        => { name => 'ssh_path' },
                                    "ssh-command:s"     => { name => 'ssh_command', default => 'ssh' },
                                    "timeout:s"         => { name => 'timeout', default => 30 },
                                    "sudo"              => { name => 'sudo' },
                                    "command:s"         => { name => 'command', default => 'cat' },
                                    "command-path:s"    => { name => 'command_path' },
                                    "command-options:s" => { name => 'command_options', default => '/proc/stat 2>&1' },
                                    "warning:s"         => { name => 'warning', },
                                    "critical:s"        => { name => 'critical', },
                                  });
      $self->{statefile_cache} = centreon::plugins::statefile->new(%options);
      $self->{hostname} = undef;
      return $self;
  }
  
  sub check_options {
      my ($self, %options) = @_;
      $self->SUPER::init(%options);
  
      if (($self->{perfdata}->threshold_validate(label => 'warning', value => $self->{option_results}->{warning})) == 0) {
         $self->{output}->add_option_msg(short_msg => "Wrong warning threshold '" . $self->{option_results}->{warning} . "'.");
         $self->{output}->option_exit();
      }
      if (($self->{perfdata}->threshold_validate(label => 'critical', value => $self->{option_results}->{critical})) == 0) {
         $self->{output}->add_option_msg(short_msg => "Wrong critical threshold '" . $self->{option_results}->{critical} . "'.");
         $self->{output}->option_exit();
      }
      
      $self->{statefile_cache}->check_options(%options);
      $self->{hostname} = $self->{option_results}->{hostname};
      if (!defined($self->{hostname})) {
          $self->{hostname} = 'me';
      }
  }
  
  sub run {
      my ($self, %options) = @_;
  
      my $stdout = centreon::plugins::misc::execute(output => $self->{output},
                                                    options => $self->{option_results},
                                                    sudo => $self->{option_results}->{sudo},
                                                    command => $self->{option_results}->{command},
                                                    command_path => $self->{option_results}->{command_path},
                                                    command_options => $self->{option_results}->{command_options});
      $self->{statefile_cache}->read(statefile => 'cache_linux_local_' . $self->{hostname}  . '_' .  $self->{mode});
      my $old_timestamp = $self->{statefile_cache}->get(name => 'last_timestamp');
      my $datas = {};
      $datas->{last_timestamp} = time();
      
      my ($cpu, $i) = (0, 0);
      foreach (split(/\n/, $stdout)) {
          next if (!/cpu(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)/);
          my $cpu_number = $1;
          $datas->{'cpu_idle_' . $cpu_number} = $5;
          $datas->{'cpu_system_' . $cpu_number} = $4;
          $datas->{'cpu_user_' . $cpu_number} = $2;
          $datas->{'cpu_iowait_' . $cpu_number} = $6;
          
          if (!defined($old_timestamp)) {
              next;
          }
          my $old_cpu_idle = $self->{statefile_cache}->get(name => 'cpu_idle_' . $cpu_number);
          my $old_cpu_system = $self->{statefile_cache}->get(name => 'cpu_system_' . $cpu_number);
          my $old_cpu_user = $self->{statefile_cache}->get(name => 'cpu_user_' . $cpu_number);
          my $old_cpu_iowait = $self->{statefile_cache}->get(name => 'cpu_iowait_' . $cpu_number);
          if (!defined($old_cpu_system) || !defined($old_cpu_idle) || !defined($old_cpu_user) || !defined($old_cpu_iowait)) {
              next;
          }
          
          if ($datas->{'cpu_idle_' . $cpu_number} < $old_cpu_idle) {
              # We set 0. Has reboot.
              $old_cpu_user = 0;
              $old_cpu_idle = 0;
              $old_cpu_system = 0;
              $old_cpu_iowait = 0;
          }
          
          my $total_elapsed = ($datas->{'cpu_idle_' . $cpu_number} + $datas->{'cpu_user_' . $cpu_number} + $datas->{'cpu_system_' . $cpu_number} + $datas->{'cpu_iowait_' . $cpu_number}) - ($old_cpu_user + $old_cpu_idle + $old_cpu_system + $old_cpu_iowait);
          if ($total_elapsed == 0) {
              $self->{output}->output_add(severity => 'OK',
                                          short_msg => "No new values for cpu counters");
              $self->{output}->display();
              $self->{output}->exit();
          }
          my $idle_elapsed = $datas->{'cpu_idle_' . $cpu_number} - $old_cpu_idle;
          my $cpu_ratio_usetime = 100 * $idle_elapsed / $total_elapsed;
          $cpu_ratio_usetime = 100 - $cpu_ratio_usetime;        
          
          $cpu += $cpu_ratio_usetime;
          $i++;
          $self->{output}->output_add(long_msg => sprintf("CPU %d Usage is %.2f%%", $cpu_number, $cpu_ratio_usetime));
          $self->{output}->perfdata_add(label => 'cpu' . $cpu_number, unit => '%',
                                        value => sprintf("%.2f", $cpu_ratio_usetime),
                                        min => 0, max => 100);
      }
      
      if ($i > 0) {
          my $avg_cpu = $cpu / $i;
          my $exit_code = $self->{perfdata}->threshold_check(value => $avg_cpu, 
                                                             threshold => [ { label => 'critical', exit_litteral => 'critical' }, { label => 'warning', exit_litteral => 'warning' } ]);
          $self->{output}->output_add(severity => $exit_code,
                                      short_msg => sprintf("CPU(s) average usage is: %.2f%%", $avg_cpu));
          $self->{output}->perfdata_add(label => 'total_cpu_avg', unit => '%',
                                        value => sprintf("%.2f", $avg_cpu),
                                        warning => $self->{perfdata}->get_perfdata_for_output(label => 'warning'),
                                        critical => $self->{perfdata}->get_perfdata_for_output(label => 'critical'),
                                        min => 0, max => 100);
      }
  
      $self->{statefile_cache}->write(data => $datas);
      if (!defined($old_timestamp)) {
          $self->{output}->output_add(severity => 'OK',
                                      short_msg => "Buffer creation...");
      }
   
      $self->{output}->display();
      $self->{output}->exit();
  }
  
  1;
  
  
  =head1 MODE
  
  Check system CPUs (need '/proc/stat' file).
  
  =over 8
  
  =item B<--warning>
  
  Threshold warning in percent.
  
  =item B<--critical>
  
  Threshold critical in percent.
  
  =item B<--remote>
  
  Execute command remotely in 'ssh'.
  
  =item B<--hostname>
  
  Hostname to query (need --remote).
  
  =item B<--ssh-option>
  
  Specify multiple options like the user (example: --ssh-option='-l=centreon-engine' --ssh-option='-p=52').
  
  =item B<--ssh-path>
  
  Specify ssh command path (default: none)
  
  =item B<--ssh-command>
  
  Specify ssh command (default: 'ssh'). Useful to use 'plink'.
  
  =item B<--timeout>
  
  Timeout in seconds for the command (Default: 30).
  
  =item B<--sudo>
  
  Use 'sudo' to execute the command.
  
  =item B<--command>
  
  Command to get information (Default: 'cat').
  Can be changed if you have output in a file.
  
  =item B<--command-path>
  
  Command path (Default: none).
  
  =item B<--command-options>
  
  Command options (Default: '/proc/stat 2>&1').
  
  =back
  
  =cut
OS_LINUX_LOCAL_MODE_CPU

$fatpacked{"os/linux/local/mode/cpudetailed.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'OS_LINUX_LOCAL_MODE_CPUDETAILED';
  #
  # Copyright 2019 Centreon (http://www.centreon.com/)
  #
  # Centreon is a full-fledged industry-strength solution that meets
  # the needs in IT infrastructure and application monitoring for
  # service performance.
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  #
  
  package os::linux::local::mode::cpudetailed;
  
  use base qw(centreon::plugins::mode);
  
  use strict;
  use warnings;
  use centreon::plugins::misc;
  use centreon::plugins::statefile;
  
  my $maps = [
      { counter => 'user', output => 'User %.2f %%', position => 1 },
      { counter => 'nice', output => 'Nice %.2f %%', position => 2 }, 
      { counter => 'system', output => 'System %.2f %%', position => 3 },
      { counter => 'idle', output => 'Idle %.2f %%', position => 4 },
      { counter => 'wait', output => 'Wait %.2f %%', position => 5 },
      { counter => 'interrupt', output => 'Interrupt %.2f %%', position => 6 },
      { counter => 'softirq', output => 'Soft Irq %.2f %%', position => 7 },
      { counter => 'steal', output => 'Steal %.2f %%', position => 8 },
      { counter => 'guest', output => 'Guest %.2f %%', position => 9 },
      { counter => 'guestnice', output => 'Guest Nice %.2f %%', position => 10 },
  ];
  
  sub new {
      my ($class, %options) = @_;
      my $self = $class->SUPER::new(package => __PACKAGE__, %options);
      bless $self, $class;
      
      $options{options}->add_options(arguments =>
                                  { 
                                    "hostname:s"        => { name => 'hostname' },
                                    "remote"            => { name => 'remote' },
                                    "ssh-option:s@"     => { name => 'ssh_option' },
                                    "ssh-path:s"        => { name => 'ssh_path' },
                                    "ssh-command:s"     => { name => 'ssh_command', default => 'ssh' },
                                    "timeout:s"         => { name => 'timeout', default => 30 },
                                    "sudo"              => { name => 'sudo' },
                                    "command:s"         => { name => 'command', default => 'cat' },
                                    "command-path:s"    => { name => 'command_path' },
                                    "command-options:s" => { name => 'command_options', default => '/proc/stat 2>&1' },
                                  });
      foreach (@{$maps}) {
          $options{options}->add_options(arguments => {
                                                      'warning-' . $_->{counter} . ':s'    => { name => 'warning_' . $_->{counter} },
                                                      'critical-' . $_->{counter} . ':s'    => { name => 'critical_' . $_->{counter} },
                                                      });
      }
      
      $self->{statefile_cache} = centreon::plugins::statefile->new(%options);
      $self->{hostname} = undef;
      return $self;
  }
  
  sub check_options {
      my ($self, %options) = @_;
      $self->SUPER::init(%options);
  
      foreach (@{$maps}) {
          if (($self->{perfdata}->threshold_validate(label => 'warning-' . $_->{counter}, value => $self->{option_results}->{'warning_' . $_->{counter}})) == 0) {
              $self->{output}->add_option_msg(short_msg => "Wrong warning-" . $_->{counter} . " threshold '" . $self->{option_results}->{'warning_' . $_->{counter}} . "'.");
              $self->{output}->option_exit();
          }
          if (($self->{perfdata}->threshold_validate(label => 'critical-' . $_->{counter}, value => $self->{option_results}->{'critical_' . $_->{counter}})) == 0) {
              $self->{output}->add_option_msg(short_msg => "Wrong critical-" . $_->{counter} . " threshold '" . $self->{option_results}->{'critical_' . $_->{counter}} . "'.");
              $self->{output}->option_exit();
          }
      }
      
      $self->{statefile_cache}->check_options(%options);
      $self->{hostname} = $self->{option_results}->{hostname};
      if (!defined($self->{hostname})) {
          $self->{hostname} = 'me';
      }
  }
  
  sub run {
      my ($self, %options) = @_;
  
      my $stdout = centreon::plugins::misc::execute(output => $self->{output},
                                                    options => $self->{option_results},
                                                    sudo => $self->{option_results}->{sudo},
                                                    command => $self->{option_results}->{command},
                                                    command_path => $self->{option_results}->{command_path},
                                                    command_options => $self->{option_results}->{command_options});
      $self->{statefile_cache}->read(statefile => 'cache_linux_local_' . $self->{hostname}  . '_' .  $self->{mode});
      # Manage values
      my ($buffer_creation, $exit) = (0, 0);
      my $save_datas = {};
      my $new_datas = {};
      my $old_datas = {};
      my ($total_datas, $total_cpu_num) = ({}, 0);
      
      foreach my $line (split(/\n/, $stdout)) {
          next if ($line !~ /cpu(\d+)\s+/);
          my $cpu_number = $1;
          my @values = split /\s+/, $line;
          
          foreach (@{$maps}) {
              next if (!defined($values[$_->{position}]));
              if (!defined($new_datas->{$cpu_number})) {
                  $new_datas->{$cpu_number} = { total => 0 };
                  $old_datas->{$cpu_number} = { total => 0 };
              }
              $new_datas->{$cpu_number}->{$_->{counter}} = $values[$_->{position}];
              $save_datas->{'cpu' . $cpu_number . '_' . $_->{counter}} = $values[$_->{position}];
              my $tmp_value = $self->{statefile_cache}->get(name => 'cpu' . $cpu_number . '_' . $_->{counter});
              if (!defined($tmp_value)) {
                  $buffer_creation = 1;
                  next;
              }
              if ($new_datas->{$cpu_number}->{$_->{counter}} < $tmp_value) {
                  $buffer_creation = 1;
                  next;
              }
              
              $exit = 1;
              $old_datas->{$cpu_number}->{$_->{counter}} = $tmp_value;
              $new_datas->{$cpu_number}->{total} += $new_datas->{$cpu_number}->{$_->{counter}};
              $old_datas->{$cpu_number}->{total} += $old_datas->{$cpu_number}->{$_->{counter}};
          }
      }
      
      $self->{statefile_cache}->write(data => $save_datas);
      if ($buffer_creation == 1) {
          $self->{output}->output_add(severity => 'OK',
                                      short_msg => "Buffer creation...");
          if ($exit == 0) {
              $self->{output}->display();
              $self->{output}->exit();
          }
      }
      
      $self->{output}->output_add(severity => 'OK', 
                                  short_msg => "CPUs usages are ok.");
      
      foreach my $cpu_number (sort keys(%$new_datas)) {
          # In buffer creation. New cpu
          next if (scalar(keys %{$old_datas->{$cpu_number}}) <= 1);
          
          if ($new_datas->{$cpu_number}->{total} - $old_datas->{$cpu_number}->{total} == 0) {
              $self->{output}->output_add(severity => 'OK',
                                          short_msg => "Counter not moved. Have to wait.");
              $self->{output}->display();
              $self->{output}->exit();
          }
          $total_cpu_num++;
          
          my @exits;
          foreach (@{$maps}) {
              next if (!defined($new_datas->{$cpu_number}->{$_->{counter}}));
              my $value = (($new_datas->{$cpu_number}->{$_->{counter}} - $old_datas->{$cpu_number}->{$_->{counter}}) * 100) / 
                           ($new_datas->{$cpu_number}->{total} - $old_datas->{$cpu_number}->{total});
              push @exits, $self->{perfdata}->threshold_check(value => $value, threshold => [ { label => 'critical-' . $_->{counter}, 'exit_litteral' => 'critical' }, { label => 'warning-' . $_->{counter}, 'exit_litteral' => 'warning' }]);
          }
  
          $exit = $self->{output}->get_most_critical(status => [ @exits ]);
          my $str_output = "CPU '$cpu_number' Usage: ";
          my $str_append = '';
          foreach (@{$maps}) {
              next if (!defined($new_datas->{$cpu_number}->{$_->{counter}}));
          
              my $value = (($new_datas->{$cpu_number}->{$_->{counter}} - $old_datas->{$cpu_number}->{$_->{counter}}) * 100) / 
                           ($new_datas->{$cpu_number}->{total} - $old_datas->{$cpu_number}->{total});
              $total_datas->{$_->{counter}} = 0 if (!defined($total_datas->{$_->{counter}}));
              $total_datas->{$_->{counter}} += $value;
              $str_output .= $str_append . sprintf($_->{output}, $value);
              $str_append = ', ';
              my $warning = $self->{perfdata}->get_perfdata_for_output(label => 'warning-' . $_->{counter});
              my $critical = $self->{perfdata}->get_perfdata_for_output(label => 'critical-' . $_->{counter});
  
              $self->{output}->perfdata_add(label => 'cpu' . $cpu_number . '_' . $_->{counter}, unit => '%',
                                            value => sprintf("%.2f", $value),
                                            warning => $warning,
                                            critical => $critical,
                                            min => 0, max => 100);
          }
          $self->{output}->output_add(long_msg => $str_output);
          if (!$self->{output}->is_status(value => $exit, compare => 'ok', litteral => 1)) {
              $self->{output}->output_add(severity => $exit,
                                          short_msg => $str_output);
          }
      }
      
      # We can display a total (some buffer creation and counters have moved)
      if ($total_cpu_num != 0) {
          foreach my $counter (sort keys %{$total_datas}) {
              $self->{output}->perfdata_add(label => 'total_cpu_' . $counter . '_avg', unit => '%',
                                            value => sprintf("%.2f", $total_datas->{$counter} / $total_cpu_num),
                                            min => 0, max => 100);
          }
      }
   
      $self->{output}->display();
      $self->{output}->exit();
  }
  
  1;
  
  
  =head1 MODE
  
  Check average usage for each CPUs (need '/proc/stat' file)
  (User, Nice, System, Idle, Wait, Interrupt, SoftIRQ, Steal, Guest, GuestNice)
  
  =over 8
  
  =item B<--warning-*>
  
  Threshold warning in percent.
  Can be: 'user', 'nice', 'system', 'idle', 'wait', 'interrupt', 'softirq', 'steal', 'guest', 'guestnice'.
  
  =item B<--critical-*>
  
  Threshold critical in percent.
  Can be: 'user', 'nice', 'system', 'idle', 'wait', 'interrupt', 'softirq', 'steal', 'guest', 'guestnice'.
  
  =item B<--remote>
  
  Execute command remotely in 'ssh'.
  
  =item B<--hostname>
  
  Hostname to query (need --remote).
  
  =item B<--ssh-option>
  
  Specify multiple options like the user (example: --ssh-option='-l=centreon-engine' --ssh-option='-p=52').
  
  =item B<--ssh-path>
  
  Specify ssh command path (default: none)
  
  =item B<--ssh-command>
  
  Specify ssh command (default: 'ssh'). Useful to use 'plink'.
  
  =item B<--timeout>
  
  Timeout in seconds for the command (Default: 30).
  
  =item B<--sudo>
  
  Use 'sudo' to execute the command.
  
  =item B<--command>
  
  Command to get information (Default: 'cat').
  Can be changed if you have output in a file.
  
  =item B<--command-path>
  
  Command path (Default: none).
  
  =item B<--command-options>
  
  Command options (Default: '/proc/stat 2>&1').
  
  =back
  
  =cut
OS_LINUX_LOCAL_MODE_CPUDETAILED

$fatpacked{"os/linux/local/mode/directlvmusage.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'OS_LINUX_LOCAL_MODE_DIRECTLVMUSAGE';
  #
  # Copyright 2019 Centreon (http://www.centreon.com/)
  #
  # Centreon is a full-fledged industry-strength solution that meets
  # the needs in IT infrastructure and application monitoring for
  # service performance.
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  #
  
  package os::linux::local::mode::directlvmusage;
  
  use base qw(centreon::plugins::templates::counter);
  
  use strict;
  use warnings;
  use centreon::plugins::misc;
  
  sub set_counters {
      my ($self, %options) = @_;
      
      $self->{maps_counters_type} = [
          { name => 'dlvm', type => 1, cb_prefix_output => 'prefix_dlvm_output', message_multiple => 'All direct LVM are ok' }
      ];
      
      $self->{maps_counters}->{dlvm} = [
          { label => 'data-usage', set => {
                  key_values => [ { name => 'data' }, { name => 'display' } ],
                  output_template => 'Data Usage : %.2f %%',
                  perfdatas => [
                      { label => 'data_used', value => 'data_absolute', template => '%.2f',
                        unit => '%', min => 0, max => 100, label_extra_instance => 1, instance_use => 'display_absolute' },
                  ],
              }
          },
          { label => 'meta-usage', set => {
                  key_values => [ { name => 'meta' }, { name => 'display' } ],
                  output_template => 'Meta Usage : %.2f %%',
                  perfdatas => [
                      { label => 'meta_used', value => 'meta_absolute', template => '%.2f',
                        unit => '%', min => 0, max => 100, label_extra_instance => 1, instance_use => 'display_absolute' },
                  ],
              }
          },
      ];
  }
  
  sub prefix_dlvm_output {
      my ($self, %options) = @_;
      
      return "Direct LVM '" . $options{instance_value}->{display} . "' ";
  }
  
  sub new {
      my ($class, %options) = @_;
      my $self = $class->SUPER::new(package => __PACKAGE__, %options);
      bless $self, $class;
      
      $options{options}->add_options(arguments =>
                                  {
                                    "hostname:s"        => { name => 'hostname' },
                                    "remote"            => { name => 'remote' },
                                    "ssh-option:s@"     => { name => 'ssh_option' },
                                    "ssh-path:s"        => { name => 'ssh_path' },
                                    "ssh-command:s"     => { name => 'ssh_command', default => 'ssh' },
                                    "timeout:s"         => { name => 'timeout', default => 30 },
                                    "sudo"              => { name => 'sudo' },
                                    "command:s"         => { name => 'command', default => 'lvs' },
                                    "command-path:s"    => { name => 'command_path' },
                                    "command-options:s" => { name => 'command_options', default => '--separator="," 2>&1' },
                                    "filter-lv:s"       => { name => 'filter_lv', },
                                    "filter-vg:s"       => { name => 'filter_vg', },
                                  });
      $self->{result} = {};
      return $self;
  }
  
  sub manage_selection {
      my ($self, %options) = @_;
  
      my ($stdout, $exit_code) = centreon::plugins::misc::execute(
          output => $self->{output},
          options => $self->{option_results},
          sudo => $self->{option_results}->{sudo},
          command => $self->{option_results}->{command},
          command_path => $self->{option_results}->{command_path},
          command_options => $self->{option_results}->{command_options},
          no_quit => 1
      );
      $self->{dlvm} = {};
      
      #  LV,VG,Attr,LSize,Pool,Origin,Data%,Meta%,Move,Log,Cpy%Sync,Convert
      #  thinpool,docker,twi-aot---,71.25g,,,1.95,0.06,,,,
      #  lv_controlm,vg_sys,-wi-ao----,5.00g,,,,,,,,
      #  ...
      my @lines = split /\n/, $stdout;
      shift @lines;
      foreach my $line (@lines) {
          my @fields = split /,/, $line;
          my ($vg, $lv, $data, $meta) = ($fields[1], $fields[0], $fields[6], $fields[7]);
          next if (!defined($data) || $data !~ /[0-9]/);
          
          my $display = centreon::plugins::misc::trim($vg) . '.' . centreon::plugins::misc::trim($lv);
          if (defined($self->{option_results}->{filter_lv}) && $self->{option_results}->{filter_lv} ne '' &&
              $lv !~ /$self->{option_results}->{filter_lv}/) {
              $self->{output}->output_add(long_msg => "skipping '" . $display . "': no matching filter.", debug => 1);
              next;
          }
          if (defined($self->{option_results}->{filter_vg}) && $self->{option_results}->{filter_vg} ne '' &&
              $vg !~ /$self->{option_results}->{filter_vg}/) {
              $self->{output}->output_add(long_msg => "skipping '" . $display . "': no matching filter.", debug => 1);
              next;
          }
   
          $self->{dlvm}->{$display} = { display => $display, data => $data, meta => $meta };
      }
      
      if (scalar(keys %{$self->{dlvm}}) <= 0) {
          if ($exit_code != 0) {
              $self->{output}->output_add(long_msg => "command output:" . $stdout);
          }
          $self->{output}->add_option_msg(short_msg => "No direct lvm found (filters or command issue)");
          $self->{output}->option_exit();
      }
  }
  
  1;
  
  
  =head1 MODE
  
  Check directl lvm usage.
  
  =over 8
  
  =item B<--remote>
  
  Execute command remotely in 'ssh'.
  
  =item B<--hostname>
  
  Hostname to query (need --remote).
  
  =item B<--ssh-option>
  
  Specify multiple options like the user (example: --ssh-option='-l=centreon-engine' --ssh-option='-p=52').
  
  =item B<--ssh-path>
  
  Specify ssh command path (default: none)
  
  =item B<--ssh-command>
  
  Specify ssh command (default: 'ssh'). Useful to use 'plink'.
  
  =item B<--timeout>
  
  Timeout in seconds for the command (Default: 30).
  
  =item B<--sudo>
  
  Use 'sudo' to execute the command.
  
  =item B<--command>
  
  Command to get information (Default: 'lvs').
  Can be changed if you have output in a file.
  
  =item B<--command-path>
  
  Command path (Default: none).
  
  =item B<--command-options>
  
  Command options (Default: '--separator="," 2>&1').
  
  =item B<--warning-*>
  
  Threshold warning.
  Can be: 'data-usage' (%), 'meta-usage' (%).
  
  =item B<--critical-*>
  
  Threshold critical.
  Can be: 'data-usage' (%), 'meta-usage' (%).
  
  =item B<--filter-vg>
  
  Filter virtual group (regexp can be used).
  
  =item B<--filter-lv>
  
  Filter logical volume (regexp can be used).
  
  =back
  
  =cut
OS_LINUX_LOCAL_MODE_DIRECTLVMUSAGE

$fatpacked{"os/linux/local/mode/discoverysnmp.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'OS_LINUX_LOCAL_MODE_DISCOVERYSNMP';
  #
  # Copyright 2019 Centreon (http://www.centreon.com/)
  #
  # Centreon is a full-fledged industry-strength solution that meets
  # the needs in IT infrastructure and application monitoring for
  # service performance.
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  #
  
  package os::linux::local::mode::discoverysnmp;
  
  use base qw(centreon::plugins::mode);
  
  use strict;
  use warnings;
  use centreon::plugins::snmp;
  use NetAddr::IP;
  use JSON::XS;
  
  sub new {
      my ($class, %options) = @_;
      my $self = $class->SUPER::new(package => __PACKAGE__, %options);
      bless $self, $class;
      
      $options{options}->add_options(arguments => {
          "subnet:s"              => { name => 'subnet' },
          "snmp-port:s"           => { name => 'snmp_port', default => 161 },
          "snmp-version:s@"       => { name => 'snmp_version' },
          "snmp-community:s@"     => { name => 'snmp_community' },
          "snmp-timeout:s"        => { name => 'snmp_timeout', default => 1 },
          "prettify"              => { name => 'prettify' },
      });
      
      $self->{snmp} = centreon::plugins::snmp->new(%options, noptions => 1);
                                  
      return $self;
  }
  
  sub check_options {
      my ($self, %options) = @_;
      $self->SUPER::init(%options);
  
      if (!defined($self->{option_results}->{subnet}) ||
          $self->{option_results}->{subnet} !~ /(\d+)\.(\d+)\.(\d+)\.(\d+)\/(\d+)/) {
          $self->{output}->add_option_msg(short_msg => "Need to specify --subnet option (<ip>/<cidr>).");
          $self->{output}->option_exit();
      }
      if (!defined($self->{option_results}->{snmp_community}) || $self->{option_results}->{snmp_community} eq '') {
          $self->{output}->add_option_msg(short_msg => "Need to specify --snmp-community option.");
          $self->{output}->option_exit();
      }
      if (!defined($self->{option_results}->{snmp_version}) || $self->{option_results}->{snmp_version} eq '') {
          $self->{output}->add_option_msg(short_msg => "Need to specify --snmp-version option.");
          $self->{output}->option_exit();
      }
      if (!defined($self->{option_results}->{snmp_timeout}) || $self->{option_results}->{snmp_timeout} !~ /(\d+)/) {
          $self->{output}->add_option_msg(short_msg => "Need to specify --snmp-timeout option.");
          $self->{output}->option_exit();
      }
  
      $self->{snmp}->set_snmp_connect_params(Timeout => $self->{option_results}->{snmp_timeout} * (10**6));
      $self->{snmp}->set_snmp_connect_params(Retries => 0);
      $self->{snmp}->set_snmp_params(subsetleef => 1);
      $self->{snmp}->set_snmp_params(snmp_autoreduce => 0);
      $self->{snmp}->set_snmp_params(snmp_errors_exit => 'unknown');
  }
  
  my $lookup_type = [
      { type => 'cisco standard', re => qr/Cisco IOS Software/i },
      { type => 'emc data domain', re => qr/Data Domain/i },
      { type => 'sonicwall', re => qr/SonicWALL/i },
      { type => 'silverpeak', re => qr/Silver Peak/i },
      { type => 'stonesoft', re => qr/Forcepoint/i },
      { type => 'redback', re => qr/Redback/i },
      { type => 'palo alto', re => qr/Palo Alto/i },
      { type => 'hp procurve', re => qr/HP ProCurve/i },
      { type => 'hp standard', re => qr/HPE Comware/i },
      { type => 'hp msl', re => qr/HP MSL/i },
      { type => 'mrv optiswitch', re => qr/OptiSwitch/i },
      { type => 'netapp', re => qr/Netapp/i },
      { type => 'linux', re => qr/linux/i },
      { type => 'windows', re => qr/windows/i },
      { type => 'macos', re => qr/Darwin/i },
      { type => 'hp-ux', re => qr/HP-UX/i },
      { type => 'freebsd', re => qr/FreeBSD/i },
  ];
  
  sub define_type {
      my ($self, %options) = @_;
  
      foreach (@$lookup_type) {
          if ($options{desc} =~ /$_->{re}/) {
              return $_->{type};
          }
      }
  
      return "unknown";
  }
  
  sub snmp_request {
      my ($self, %options) = @_;
  
      $self->{snmp}->set_snmp_connect_params(DestHost => $options{ip});
      $self->{snmp}->set_snmp_connect_params(Community => $options{community});
      $self->{snmp}->set_snmp_connect_params(Version => $options{version});
      $self->{snmp}->set_snmp_connect_params(RemotePort => $options{port});
      $self->{snmp}->connect();
      return $self->{snmp}->get_leef(oids => [ $self->{oid_sysDescr}, $self->{oid_sysName} ],
          nothing_quit => 0, dont_quit => 1);
  }
  
  sub run {
      my ($self, %options) = @_;
  
      $self->{oid_sysDescr} = ".1.3.6.1.2.1.1.1.0";
      $self->{oid_sysName} = ".1.3.6.1.2.1.1.5.0";
  
      my @disco_data;
      my $disco_stats;
      
      my $last_version;
      my $last_community;
      my $subnet = NetAddr::IP->new($self->{option_results}->{subnet});
  
      $disco_stats->{start_time} = time();
  
      foreach my $ip (@{$subnet->splitref($subnet->bits())}) {
          my $result;
          foreach my $community (@{$self->{option_results}->{snmp_community}}) {
              foreach my $version (@{$self->{option_results}->{snmp_version}}) {
                  $result = $self->snmp_request(ip => $ip->addr, community => $community, version => $version,
                      port => $self->{option_results}->{snmp_port});
                  $last_version = $version;
                  $last_community = $community;
                  last if (defined($result));
              }
          }
          next if (!defined($result) || $result eq '');
  
          my %host;
          $host{type} = $self->define_type(desc => $result->{$self->{oid_sysDescr}});
          $host{desc} = $result->{$self->{oid_sysDescr}};
          $host{ip} = $ip->addr;
          $host{hostname} = $result->{$self->{oid_sysName}};
          $host{snmp_version} = $last_version;
          $host{snmp_community} = $last_community;
          $host{snmp_port} = $self->{option_results}->{snmp_port};
          push @disco_data, \%host;
      }
      
      $disco_stats->{end_time} = time();
      $disco_stats->{duration} = $disco_stats->{end_time} - $disco_stats->{start_time};
      $disco_stats->{discovered_items} = @disco_data;
      $disco_stats->{results} = \@disco_data;
  
      my $encoded_data;
      eval {
          if (defined($self->{option_results}->{prettify})) {
              $encoded_data = JSON::XS->new->utf8->pretty->encode($disco_stats);
          } else {
              $encoded_data = JSON::XS->new->utf8->encode($disco_stats);
          }
      };
      if ($@) {
          $encoded_data = '{"code":"encode_error","message":"Cannot encode discovered data into JSON format"}';
      }
      
      $self->{output}->output_add(short_msg => $encoded_data);
      $self->{output}->display(nolabel => 1, force_ignore_perfdata => 1);
      $self->{output}->exit();
  }
      
  1;
  
  
  =head1 MODE
  
  Resources discovery.
  
  =over 8
  
  =item B<--subnet>
  
  Specify subnet from which discover
  resources (Must be <ip>/<cidr> format) (Mandatory).
  
  =item B<--snmp-port>
  
  Specify SNMP port (Default: 161).
  
  =item B<--snmp-version>
  
  Specify SNMP version (Can be multiple) (Mandatory).
  
  =item B<--snmp-community>
  
  Specify SNMP community (Can be multiple) (Mandatory).
  
  =item B<--snmp-timeout>
  
  Specify SNMP timeout in second (Default: 1).
  
  =item B<--prettify>
  
  Prettify JSON output.
  
  =back
  
  =cut
OS_LINUX_LOCAL_MODE_DISCOVERYSNMP

$fatpacked{"os/linux/local/mode/diskio.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'OS_LINUX_LOCAL_MODE_DISKIO';
  #
  # Copyright 2019 Centreon (http://www.centreon.com/)
  #
  # Centreon is a full-fledged industry-strength solution that meets
  # the needs in IT infrastructure and application monitoring for
  # service performance.
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  #
  
  package os::linux::local::mode::diskio;
  
  use base qw(centreon::plugins::mode);
  
  use strict;
  use warnings;
  use centreon::plugins::misc;
  use centreon::plugins::statefile;
  use Digest::MD5 qw(md5_hex);
  
  sub new {
      my ($class, %options) = @_;
      my $self = $class->SUPER::new(package => __PACKAGE__, %options);
      bless $self, $class;
      
      $options{options}->add_options(arguments =>
                                  {
                                    "hostname:s"        => { name => 'hostname' },
                                    "remote"            => { name => 'remote' },
                                    "ssh-option:s@"     => { name => 'ssh_option' },
                                    "ssh-path:s"        => { name => 'ssh_path' },
                                    "ssh-command:s"     => { name => 'ssh_command', default => 'ssh' },
                                    "timeout:s"         => { name => 'timeout', default => 30 },
                                    "sudo"              => { name => 'sudo' },
                                    "command:s"         => { name => 'command', default => 'tail' },
                                    "command-path:s"    => { name => 'command_path', },
                                    "command-options:s" => { name => 'command_options', default => '-n +1 /proc/stat /proc/diskstats 2>&1' },
                                    "warning-bytes-read:s"    => { name => 'warning_bytes_read' },
                                    "critical-bytes-read:s"   => { name => 'critical_bytes_read' },
                                    "warning-bytes-write:s"   => { name => 'warning_bytes_write' },
                                    "critical-bytes-write:s"  => { name => 'critical_bytes_write' },
                                    "warning-utils:s"         => { name => 'warning_utils' },
                                    "critical-utils:s"        => { name => 'critical_utils' },
                                    "name:s"                  => { name => 'name' },
                                    "regexp"                  => { name => 'use_regexp' },
                                    "regexp-isensitive"       => { name => 'use_regexpi' },
                                    "interrupt-frequency:s"   => { name => 'interrupt_frequency', default => 1000 },
                                    "bytes_per_sector:s"      => { name => 'bytes_per_sector', default => 512 },
                                    "skip"                    => { name => 'skip', },
                                  });
      $self->{result} = { cpu => {}, total_cpu => 0, disks => {} };
      $self->{hostname} = undef;
      $self->{statefile_value} = centreon::plugins::statefile->new(%options);
      return $self;
  }
  
  sub check_options {
      my ($self, %options) = @_;
      $self->SUPER::init(%options);
  
      if (($self->{perfdata}->threshold_validate(label => 'warning-bytes-read', value => $self->{option_results}->{warning_bytes_read})) == 0) {
          $self->{output}->add_option_msg(short_msg => "Wrong warning-bytes-read threshold '" . $self->{option_results}->{warning_bytes_read} . "'.");
          $self->{output}->option_exit();
      }
      if (($self->{perfdata}->threshold_validate(label => 'critical-bytes-read', value => $self->{option_results}->{critical_bytes_read})) == 0) {
          $self->{output}->add_option_msg(short_msg => "Wrong critical-bytes-read threshold '" . $self->{option_results}->{critical_bytes_read} . "'.");
          $self->{output}->option_exit();
      }
      if (($self->{perfdata}->threshold_validate(label => 'warning-bytes-write', value => $self->{option_results}->{warning_bytes_write})) == 0) {
          $self->{output}->add_option_msg(short_msg => "Wrong warning-bytes-write threshold '" . $self->{option_results}->{warning_bytes_write} . "'.");
          $self->{output}->option_exit();
      }
      if (($self->{perfdata}->threshold_validate(label => 'critical-bytes-write', value => $self->{option_results}->{critical_bytes_write})) == 0) {
          $self->{output}->add_option_msg(short_msg => "Wrong critical-bytes-write threshold '" . $self->{option_results}->{critical_bytes_writes} . "'.");
          $self->{output}->option_exit();
      }
      if (($self->{perfdata}->threshold_validate(label => 'warning-utils', value => $self->{option_results}->{warning_utils})) == 0) {
          $self->{output}->add_option_msg(short_msg => "Wrong warning-utils threshold '" . $self->{option_results}->{warning_utils} . "'.");
          $self->{output}->option_exit();
      }
      if (($self->{perfdata}->threshold_validate(label => 'critical-utils', value => $self->{option_results}->{critical_utils})) == 0) {
          $self->{output}->add_option_msg(short_msg => "Wrong critical-utils threshold '" . $self->{option_results}->{critical_utils} . "'.");
          $self->{output}->option_exit();
      }
      
      $self->{statefile_value}->check_options(%options);
      $self->{hostname} = $self->{option_results}->{hostname};
      if (!defined($self->{hostname})) {
          $self->{hostname} = 'me';
      }
  }
  
  sub manage_selection {
      my ($self, %options) = @_;
  
      my $stdout = centreon::plugins::misc::execute(output => $self->{output},
                                                    options => $self->{option_results},
                                                    sudo => $self->{option_results}->{sudo},
                                                    command => $self->{option_results}->{command},
                                                    command_path => $self->{option_results}->{command_path},
                                                    command_options => $self->{option_results}->{command_options});
      
      $stdout =~ /\/proc\/stat(.*)\/proc\/diskstats(.*)/msg;
      my ($cpu_parts, $disk_parts) = ($1, $2);
      
      # Manage CPU Parts
      $cpu_parts =~ /^cpu\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)/ms;
      $self->{result}->{cpu}->{idle} = $4;
      $self->{result}->{cpu}->{system} = $3;
      $self->{result}->{cpu}->{user} = $1;
      $self->{result}->{cpu}->{iowait} = $5;
      
      while ($cpu_parts =~ /^cpu(\d+)/msg) {
          $self->{result}->{total_cpu}++;
      }
      
      # Manage Disk Parts
      while ($disk_parts =~ /^\s*(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+/msg) {
          my ($partition_name, $read_sector, $write_sector, $read_ms, $write_ms, $ms_ticks) = ($3, $6, $10, $7, $11, $13);
          
          next if (defined($self->{option_results}->{name}) && defined($self->{option_results}->{use_regexp}) && defined($self->{option_results}->{use_regexpi}) 
              && $partition_name !~ /$self->{option_results}->{name}/i);
          next if (defined($self->{option_results}->{name}) && defined($self->{option_results}->{use_regexp}) && !defined($self->{option_results}->{use_regexpi}) 
              && $partition_name !~ /$self->{option_results}->{name}/);
          next if (defined($self->{option_results}->{name}) && !defined($self->{option_results}->{use_regexp}) && !defined($self->{option_results}->{use_regexpi})
              && $partition_name ne $self->{option_results}->{name});
  
          if (defined($self->{option_results}->{skip}) && $read_sector == 0 && $write_sector == 0) {
              $self->{output}->output_add(long_msg => "Skipping partition '" . $partition_name . "': no read/write IO.");
              next;
          }
              
          $self->{result}->{disks}->{$partition_name} = { read_sectors => $read_sector, write_sectors => $write_sector,
                                                          read_ms => $read_ms, write_ms => $write_ms, ticks => $ms_ticks};
      }
      
      if (scalar(keys %{$self->{result}->{disks}}) <= 0) {
          if (defined($self->{option_results}->{name})) {
              $self->{output}->add_option_msg(short_msg => "No partition found for name '" . $self->{option_results}->{name} . "'.");
          } else {
              $self->{output}->add_option_msg(short_msg => "No partition found.");
          }
          $self->{output}->option_exit();
      }
  }
  
  sub run {
      my ($self, %options) = @_;
  	
      $self->manage_selection();
      
      my $new_datas = {};
      $self->{statefile_value}->read(statefile => "cache_linux_local_" . $self->{hostname}  . '_' . $self->{mode} . '_' . (defined($self->{option_results}->{name}) ? md5_hex($self->{option_results}->{name}) : md5_hex('all')));
      $new_datas->{last_timestamp} = time();
      my $old_timestamp = $self->{statefile_value}->get(name => 'last_timestamp');
      
      if (!defined($self->{option_results}->{name}) || defined($self->{option_results}->{use_regexp})) {
          $self->{output}->output_add(severity => 'OK',
                                      short_msg => 'All partitions are ok.');
      }
      
      foreach my $name (sort(keys %{$self->{result}->{disks}})) {
   
          my $old_datas = {};
          my $next = 0;
          foreach (keys %{$self->{result}->{disks}->{$name}}) {
              $new_datas->{$_ . '_' . $name} = $self->{result}->{disks}->{$name}->{$_};
              $old_datas->{$_ . '_' . $name} = $self->{statefile_value}->get(name => $_ . '_' . $name);
              if (!defined($old_datas->{$_ . '_' . $name})) {
                  $next = 1;
              } elsif ($new_datas->{$_ . '_' . $name} < $old_datas->{$_ . '_' . $name}) {
                  # We set 0. has reboot
                  $old_datas->{$_ . '_' . $name} = 0;
              }
          }
          foreach (keys %{$self->{result}->{cpu}}) {
              $new_datas->{'cpu_' . $_} = $self->{result}->{cpu}->{$_};
              $old_datas->{'cpu_' . $_} = $self->{statefile_value}->get(name => 'cpu_' . $_);
              if (!defined($old_datas->{'cpu_' . $_})) {
                  $next = 1;
              } elsif ($new_datas->{'cpu_' . $_} < $old_datas->{'cpu_' . $_}) {
                  # We set 0. has reboot
                  $old_datas->{'cpu_' . $_} = 0;
              }
          }
          
          if (!defined($old_timestamp) || $next == 1) {
              next;
          }
          my $time_delta = $new_datas->{last_timestamp} - $old_timestamp;
          if ($time_delta <= 0) {
              # At least one second. two fast calls ;)
              $time_delta = 1;
          }
   
          ############
  
          # Do calc
          my $read_bytes_per_seconds = ($new_datas->{'read_sectors_' . $name} - $old_datas->{'read_sectors_' . $name}) * $self->{option_results}->{bytes_per_sector} / $time_delta;
          my $write_bytes_per_seconds = ($new_datas->{'write_sectors_' . $name} - $old_datas->{'write_sectors_' . $name}) * $self->{option_results}->{bytes_per_sector} / $time_delta;
          my $read_ms = $new_datas->{'read_ms_' . $name} - $old_datas->{'read_ms_' . $name};
          my $write_ms = $new_datas->{'write_ms_' . $name} - $old_datas->{'write_ms_' . $name};
          my $delta_ms = $self->{option_results}->{interrupt_frequency} * (($new_datas->{cpu_idle} + $new_datas->{cpu_iowait} + $new_datas->{cpu_user} + $new_datas->{cpu_system}) 
                                                                            - 
                                                                           ($old_datas->{cpu_idle} + $old_datas->{cpu_iowait} + $old_datas->{cpu_user} + $old_datas->{cpu_system})) 
                          / $self->{result}->{total_cpu} / 100;
          my $utils = 100 * ($new_datas->{'ticks_' . $name} - $old_datas->{'ticks_' . $name}) / $delta_ms;
          if ($utils > 100) {
              $utils = 100;
          }
         
          ###########
          # Manage Output
          ###########
          
          my $exit1 = $self->{perfdata}->threshold_check(value => $read_bytes_per_seconds, threshold => [ { label => 'critical-bytes-read', 'exit_litteral' => 'critical' }, { label => 'warning-bytes-read', exit_litteral => 'warning' } ]);
          my $exit2 = $self->{perfdata}->threshold_check(value => $write_bytes_per_seconds, threshold => [ { label => 'critical-bytes-write', 'exit_litteral' => 'critical' }, { label => 'warning-bytes-write', exit_litteral => 'warning' } ]);
          my $exit3 = $self->{perfdata}->threshold_check(value => $utils, threshold => [ { label => 'critical-utils', 'exit_litteral' => 'critical' }, { label => 'warning-utils', exit_litteral => 'warning' } ]);
  
          my $exit = $self->{output}->get_most_critical(status => [ $exit1, $exit2, $exit3 ]);
          
          my ($read_value, $read_unit) = $self->{perfdata}->change_bytes(value => $read_bytes_per_seconds);
          my ($write_value, $write_unit) = $self->{perfdata}->change_bytes(value => $write_bytes_per_seconds);
          
          $self->{output}->output_add(long_msg => sprintf("Partition '%s' Read I/O : %s/s, Write I/O : %s/s, Write Time : %s ms, Read Time : %s ms, %%Utils: %.2f %%", $name,
                                                          $read_value . $read_unit,
                                                          $write_value . $write_unit,
                                                          $read_ms, $write_ms, $utils
                                                          ));
          if (!$self->{output}->is_status(value => $exit, compare => 'ok', litteral => 1) || (defined($self->{option_results}->{name}) && !defined($self->{option_results}->{use_regexp}))) {
              $self->{output}->output_add(severity => $exit,
                                          short_msg => sprintf("Partition '%s' Read I/O : %s/s, Write I/O : %s/s, Write Time : %s ms, Read Time : %s ms, %%Utils: %.2f %%", $name,
                                                          $read_value . $read_unit,
                                                          $write_value . $write_unit,
                                                          $read_ms, $write_ms, $utils
                                                          ));
          }
  
          my $extra_label = '';
          $extra_label = '_' . $name if (!defined($self->{option_results}->{name}) || defined($self->{option_results}->{use_regexp}));
          $self->{output}->perfdata_add(label => 'readio' . $extra_label, unit => 'B/s',
                                        value => sprintf("%.2f", $read_bytes_per_seconds),
                                        warning => $self->{perfdata}->get_perfdata_for_output(label => 'warning-bytes-read'),
                                        critical => $self->{perfdata}->get_perfdata_for_output(label => 'critical-bytes-read'),
                                        min => 0);
          $self->{output}->perfdata_add(label => 'writeio' . $extra_label, unit => 'B/s',
                                        value => sprintf("%.2f", $write_bytes_per_seconds),
                                        warning => $self->{perfdata}->get_perfdata_for_output(label => 'warning-bytes-write'),
                                        critical => $self->{perfdata}->get_perfdata_for_output(label => 'critical-bytes-write'),
                                        min => 0);
          $self->{output}->perfdata_add(label => 'readtime' . $extra_label, unit => 'ms',
                                        value => $read_ms,
                                        min => 0);
          $self->{output}->perfdata_add(label => 'writetime' . $extra_label, unit => 'ms',
                                        value => $write_ms,
                                        min => 0);
          $self->{output}->perfdata_add(label => 'utils' . $extra_label, unit => '%',
                                        value => sprintf("%.2f", $utils),
                                        warning => $self->{perfdata}->get_perfdata_for_output(label => 'warning-utils'),
                                        critical => $self->{perfdata}->get_perfdata_for_output(label => 'critical-util'),
                                        min => 0, max => 100);
      }
      
      $self->{statefile_value}->write(data => $new_datas);    
      if (!defined($old_timestamp)) {
          $self->{output}->output_add(severity => 'OK',
                                      short_msg => "Buffer creation...");
      }
      
      $self->{output}->display();
      $self->{output}->exit();
  }
  
  1;
  
  
  =head1 MODE
  
  Check some disk io counters:
  read and writes bytes per seconds, milliseconds time spent reading and writing, %util (like iostat) 
  
  =over 8
  
  =item B<--remote>
  
  Execute command remotely in 'ssh'.
  
  =item B<--hostname>
  
  Hostname to query (need --remote).
  
  =item B<--ssh-option>
  
  Specify multiple options like the user (example: --ssh-option='-l=centreon-engine' --ssh-option='-p=52').
  
  =item B<--ssh-path>
  
  Specify ssh command path (default: none)
  
  =item B<--ssh-command>
  
  Specify ssh command (default: 'ssh'). Useful to use 'plink'.
  
  =item B<--timeout>
  
  Timeout in seconds for the command (Default: 30).
  
  =item B<--sudo>
  
  Use 'sudo' to execute the command.
  
  =item B<--command>
  
  Command to get information (Default: 'tail').
  Can be changed if you have output in a file.
  
  =item B<--command-path>
  
  Command path (Default: none).
  
  =item B<--command-options>
  
  Command options (Default: '-n +1 /proc/stat /proc/diskstats 2>&1').
  
  =item B<--warning-bytes-read>
  
  Threshold warning in bytes per seconds read.
  
  =item B<--critical-bytes-read>
  
  Threshold critical in bytes per seconds read.
  
  =item B<--warning-bytes-write>
  
  Threshold warning in bytes per seconds write.
  
  =item B<--critical-bytes-write>
  
  Threshold critical in bytes per seconds write.
  
  =item B<--warning-utils>
  
  Threshold warning in %utils.
  
  =item B<--critical-utils>
  
  Threshold critical in %utils.
  
  =item B<--name>
  
  Set the partition name (empty means 'check all partitions')
  
  =item B<--regexp>
  
  Allows to use regexp to filter partition name (with option --name).
  
  =item B<--regexp-isensitive>
  
  Allows to use regexp non case-sensitive (with --regexp).
  
  =item B<--bytes-per-sector>
  
  Bytes per sector (Default: 512)
  
  =item B<--interrupt-frequency>
  
  Linux Kernel Timer Interrupt Frequency (Default: 1000)
  
  =item B<--skip>
  
  Skip partitions with 0 sectors read/write.
  
  =back
  
  =cut
OS_LINUX_LOCAL_MODE_DISKIO

$fatpacked{"os/linux/local/mode/filesdate.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'OS_LINUX_LOCAL_MODE_FILESDATE';
  #
  # Copyright 2019 Centreon (http://www.centreon.com/)
  #
  # Centreon is a full-fledged industry-strength solution that meets
  # the needs in IT infrastructure and application monitoring for
  # service performance.
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  #
  
  package os::linux::local::mode::filesdate;
  
  use base qw(centreon::plugins::mode);
  
  use strict;
  use warnings;
  use centreon::plugins::misc;
  
  sub new {
      my ($class, %options) = @_;
      my $self = $class->SUPER::new(package => __PACKAGE__, %options);
      bless $self, $class;
      
      $options{options}->add_options(arguments =>
                                  { 
                                    "hostname:s"        => { name => 'hostname' },
                                    "remote"            => { name => 'remote' },
                                    "ssh-option:s@"     => { name => 'ssh_option' },
                                    "ssh-path:s"        => { name => 'ssh_path' },
                                    "ssh-command:s"     => { name => 'ssh_command', default => 'ssh' },
                                    "timeout:s"         => { name => 'timeout', default => 30 },
                                    "sudo"              => { name => 'sudo' },
                                    "command-path:s"    => { name => 'command_path' },
                                    "warning:s"         => { name => 'warning', },
                                    "critical:s"        => { name => 'critical', },
                                    "separate-dirs"     => { name => 'separate_dirs', },
                                    "max-depth:s"       => { name => 'max_depth', },
                                    "exclude-du:s@"     => { name => 'exclude_du', },
                                    "filter-plugin:s"   => { name => 'filter_plugin', },
                                    "files:s"           => { name => 'files', },
                                    "time:s"            => { name => 'time', },
                                  });
  
      return $self;
  }
  
  sub check_options {
      my ($self, %options) = @_;
      $self->SUPER::init(%options);
  
      if (($self->{perfdata}->threshold_validate(label => 'warning', value => $self->{option_results}->{warning})) == 0) {
         $self->{output}->add_option_msg(short_msg => "Wrong warning threshold '" . $self->{option_results}->{warning} . "'.");
         $self->{output}->option_exit();
      }
      if (($self->{perfdata}->threshold_validate(label => 'critical', value => $self->{option_results}->{critical})) == 0) {
         $self->{output}->add_option_msg(short_msg => "Wrong critical threshold '" . $self->{option_results}->{critical} . "'.");
         $self->{output}->option_exit();
      }
      if (!defined($self->{option_results}->{files}) || $self->{option_results}->{files} eq '') {
         $self->{output}->add_option_msg(short_msg => "Need to specify files option.");
         $self->{output}->option_exit();
      }
      
      #### Create command_options
      $self->{option_results}->{command} = 'du';
      $self->{option_results}->{command_options} = '-x --time-style=+%s';
      if (defined($self->{option_results}->{separate_dirs})) {
          $self->{option_results}->{command_options} .= ' --separate-dirs';
      }
      if (defined($self->{option_results}->{max_depth})) {
          $self->{option_results}->{command_options} .= ' --max-depth=' . $self->{option_results}->{max_depth};
      }
      if (defined($self->{option_results}->{time})) {
          $self->{option_results}->{command_options} .= ' --time=' . $self->{option_results}->{time};
      } else {
          $self->{option_results}->{command_options} .= ' --time';
      }
      foreach my $exclude (@{$self->{option_results}->{exclude_du}}) {
          $self->{option_results}->{command_options} .= " --exclude='" . $exclude . "'";
      }
      $self->{option_results}->{command_options} .= ' ' . $self->{option_results}->{files};
      $self->{option_results}->{command_options} .= ' 2>&1';
  }
  
  sub run {
      my ($self, %options) = @_;
      my $total_size = 0;
      my $current_time = time();
  
      my $stdout = centreon::plugins::misc::execute(output => $self->{output},
                                                    options => $self->{option_results},
                                                    sudo => $self->{option_results}->{sudo},
                                                    command => $self->{option_results}->{command},
                                                    command_path => $self->{option_results}->{command_path},
                                                    command_options => $self->{option_results}->{command_options});
      
      $self->{output}->output_add(severity => 'OK', 
                                  short_msg => "All file/directory times are ok.");
      foreach (split(/\n/, $stdout)) {
          next if (!/(\d+)\t+(\d+)\t+(.*)/);
          my ($size, $time, $name) = ($1, $2, centreon::plugins::misc::trim($3));
          my $diff_time = $current_time - $time;
          
          next if (defined($self->{option_results}->{filter_plugin}) && $self->{option_results}->{filter_plugin} ne '' &&
                   $name !~ /$self->{option_results}->{filter_plugin}/);
          
          my $exit_code = $self->{perfdata}->threshold_check(value => $diff_time, 
                                                             threshold => [ { label => 'critical', 'exit_litteral' => 'critical' }, { label => 'warning', exit_litteral => 'warning' } ]);
          $self->{output}->output_add(long_msg => sprintf("%s: %s seconds (time: %s)", $name, $diff_time, scalar(localtime($time))));
          if (!$self->{output}->is_status(litteral => 1, value => $exit_code, compare => 'ok')) {
              $self->{output}->output_add(severity => $exit_code,
                                          short_msg => sprintf("%s: %s seconds (time: %s)", $name, $diff_time, scalar(localtime($time))));
          }
          $self->{output}->perfdata_add(label => $name, unit => 's',
                                        value => $diff_time,
                                        warning => $self->{perfdata}->get_perfdata_for_output(label => 'warning'),
                                        critical => $self->{perfdata}->get_perfdata_for_output(label => 'critical'),
                                        );
      }
        
      $self->{output}->display();
      $self->{output}->exit();
  }
  
  1;
  
  
  =head1 MODE
  
  Check time (modified, creation,...) of files/directories.
  
  =over 8
  
  =item B<--files>
  
  Files/Directories to check. (Shell expansion is ok)
  
  =item B<--warning>
  
  Threshold warning in seconds for each files/directories (diff time).
  
  =item B<--critical>
  
  Threshold critical in seconds for each files/directories (diff time).
  
  =item B<--separate-dirs>
  
  Do not include size of subdirectories.
  
  =item B<--max-depth>
  
  Don't check fewer levels. (can be use --separate-dirs)
  
  =item B<--time>
  
  Check another time than modified time.
  
  =item B<--exclude-du>
  
  Exclude files/directories with 'du' command. Values from exclude files/directories are not counted in parent directories.
  Shell pattern can be used.
  
  =item B<--filter-plugin>
  
  Filter files/directories in the plugin. Values from exclude files/directories are counted in parent directories!!!
  Perl Regexp can be used.
  
  =item B<--remote>
  
  Execute command remotely in 'ssh'.
  
  =item B<--hostname>
  
  Hostname to query (need --remote).
  
  =item B<--ssh-option>
  
  Specify multiple options like the user (example: --ssh-option='-l=centreon-engine' --ssh-option='-p=52').
  
  =item B<--ssh-path>
  
  Specify ssh command path (default: none)
  
  =item B<--ssh-command>
  
  Specify ssh command (default: 'ssh'). Useful to use 'plink'.
  
  =item B<--timeout>
  
  Timeout in seconds for the command (Default: 30).
  
  =item B<--sudo>
  
  Use 'sudo' to execute the command.
  
  =item B<--command-path>
  
  Command path (Default: none).
  
  =back
  
  =cut
OS_LINUX_LOCAL_MODE_FILESDATE

$fatpacked{"os/linux/local/mode/filessize.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'OS_LINUX_LOCAL_MODE_FILESSIZE';
  #
  # Copyright 2019 Centreon (http://www.centreon.com/)
  #
  # Centreon is a full-fledged industry-strength solution that meets
  # the needs in IT infrastructure and application monitoring for
  # service performance.
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  #
  
  package os::linux::local::mode::filessize;
  
  use base qw(centreon::plugins::mode);
  
  use strict;
  use warnings;
  use centreon::plugins::misc;
  
  sub new {
      my ($class, %options) = @_;
      my $self = $class->SUPER::new(package => __PACKAGE__, %options);
      bless $self, $class;
      
      $options{options}->add_options(arguments =>
                                  { 
                                    "hostname:s"        => { name => 'hostname' },
                                    "remote"            => { name => 'remote' },
                                    "ssh-option:s@"     => { name => 'ssh_option' },
                                    "ssh-path:s"        => { name => 'ssh_path' },
                                    "ssh-command:s"     => { name => 'ssh_command', default => 'ssh' },
                                    "timeout:s"         => { name => 'timeout', default => 30 },
                                    "sudo"              => { name => 'sudo' },
                                    "command-path:s"    => { name => 'command_path' },
                                    "warning-one:s"     => { name => 'warning_one', },
                                    "critical-one:s"    => { name => 'critical_one', },
                                    "warning-total:s"   => { name => 'warning_total', },
                                    "critical-total:s"  => { name => 'critical_total', },
                                    "separate-dirs"     => { name => 'separate_dirs', },
                                    "max-depth:s"       => { name => 'max_depth', },
                                    "all-files"         => { name => 'all_files', },
                                    "exclude-du:s@"     => { name => 'exclude_du', },
                                    "filter-plugin:s"   => { name => 'filter_plugin', },
                                    "files:s"           => { name => 'files', },
                                  });
  
      return $self;
  }
  
  sub check_options {
      my ($self, %options) = @_;
      $self->SUPER::init(%options);
  
      if (($self->{perfdata}->threshold_validate(label => 'warning_one', value => $self->{option_results}->{warning_one})) == 0) {
         $self->{output}->add_option_msg(short_msg => "Wrong warning-one threshold '" . $self->{warning_one} . "'.");
         $self->{output}->option_exit();
      }
      if (($self->{perfdata}->threshold_validate(label => 'critical_one', value => $self->{option_results}->{critical_one})) == 0) {
         $self->{output}->add_option_msg(short_msg => "Wrong critical-one threshold '" . $self->{critical_one} . "'.");
         $self->{output}->option_exit();
      }
      if (($self->{perfdata}->threshold_validate(label => 'warning_total', value => $self->{option_results}->{warning_total})) == 0) {
         $self->{output}->add_option_msg(short_msg => "Wrong warning-total threshold '" . $self->{warning_total} . "'.");
         $self->{output}->option_exit();
      }
      if (($self->{perfdata}->threshold_validate(label => 'critical_total', value => $self->{option_results}->{critical_total})) == 0) {
         $self->{output}->add_option_msg(short_msg => "Wrong critical-total threshold '" . $self->{critical_total} . "'.");
         $self->{output}->option_exit();
      }
      if (!defined($self->{option_results}->{files}) || $self->{option_results}->{files} eq '') {
         $self->{output}->add_option_msg(short_msg => "Need to specify files option.");
         $self->{output}->option_exit();
      }
      
      #### Create command_options
      $self->{option_results}->{command} = 'du';
      $self->{option_results}->{command_options} = '-x -b';
      if (defined($self->{option_results}->{separate_dirs})) {
          $self->{option_results}->{command_options} .= ' --separate-dirs';
      }
      if (defined($self->{option_results}->{max_depth})) {
          $self->{option_results}->{command_options} .= ' --max-depth=' . $self->{option_results}->{max_depth};
      }
      if (defined($self->{option_results}->{all_files})) {
          $self->{option_results}->{command_options} .= ' --all';
      }
      foreach my $exclude (@{$self->{option_results}->{exclude_du}}) {
          $self->{option_results}->{command_options} .= " --exclude='" . $exclude . "'";
      }
      $self->{option_results}->{command_options} .= ' ' . $self->{option_results}->{files};
      $self->{option_results}->{command_options} .= ' 2>&1';
  }
  
  sub run {
      my ($self, %options) = @_;
      my $total_size = 0;
  
      my $stdout = centreon::plugins::misc::execute(output => $self->{output},
                                                    options => $self->{option_results},
                                                    sudo => $self->{option_results}->{sudo},
                                                    command => $self->{option_results}->{command},
                                                    command_path => $self->{option_results}->{command_path},
                                                    command_options => $self->{option_results}->{command_options});
      
      $self->{output}->output_add(severity => 'OK', 
                                  short_msg => "All file/directory sizes are ok.");
      foreach (split(/\n/, $stdout)) {
          next if (!/(\d+)\t+(.*)/);
          my ($size, $name) = ($1, centreon::plugins::misc::trim($2));
          
          next if (defined($self->{option_results}->{filter_plugin}) && $self->{option_results}->{filter_plugin} ne '' &&
                   $name !~ /$self->{option_results}->{filter_plugin}/);
          
          $total_size += $size;
          my $exit_code = $self->{perfdata}->threshold_check(value => $size, 
                                                             threshold => [ { label => 'critical_one', exit_litteral => 'critical' }, { label => 'warning_one', exit_litteral => 'warning' } ]);
          my ($size_value, $size_unit) = $self->{perfdata}->change_bytes(value => $size);
          $self->{output}->output_add(long_msg => sprintf("%s: %s", $name, $size_value . ' ' . $size_unit));
          if (!$self->{output}->is_status(litteral => 1, value => $exit_code, compare => 'ok')) {
              $self->{output}->output_add(severity => $exit_code,
                                          short_msg => sprintf("'%s' size is %s", $name, $size_value . ' ' . $size_unit));
          }
          $self->{output}->perfdata_add(label => $name, unit => 'B',
                                        value => $size,
                                        warning => $self->{perfdata}->get_perfdata_for_output(label => 'warning_one'),
                                        critical => $self->{perfdata}->get_perfdata_for_output(label => 'critical_one'),
                                        min => 0);
      }
   
      # Total Size
      my $exit_code = $self->{perfdata}->threshold_check(value => $total_size, 
                                                         threshold => [ { label => 'critical_total', exit_litteral => 'critical' }, { label => 'warning_total', exit_litteral => 'warning' } ]);
      my ($size_value, $size_unit) = $self->{perfdata}->change_bytes(value => $total_size);
      $self->{output}->output_add(long_msg => sprintf("Total: %s", $size_value . ' ' . $size_unit));
      if (!$self->{output}->is_status(litteral => 1, value => $exit_code, compare => 'ok')) {
          $self->{output}->output_add(severity => $exit_code,
                                     short_msg => sprintf("Total size is %s", $size_value . ' ' . $size_unit));
      }
      $self->{output}->perfdata_add(label => 'total', unit => 'B',
                                    value => $total_size,
                                    warning => $self->{perfdata}->get_perfdata_for_output(label => 'warning_total'),
                                    critical => $self->{perfdata}->get_perfdata_for_output(label => 'critical_total'),
                                    min => 0);
        
      $self->{output}->display();
      $self->{output}->exit();
  }
  
  1;
  
  
  =head1 MODE
  
  Check size of files/directories.
  
  =over 8
  
  =item B<--files>
  
  Files/Directories to check. (Shell expansion is ok)
  
  =item B<--warning-one>
  
  Threshold warning in bytes for each files/directories.
  
  =item B<--critical-one>
  
  Threshold critical in bytes for each files/directories.
  
  =item B<--warning-total>
  
  Threshold warning in bytes for all files/directories.
  
  =item B<--critical-total>
  
  Threshold critical in bytes for all files/directories.
  
  =item B<--separate-dirs>
  
  Do not include size of subdirectories.
  
  =item B<--max-depth>
  
  Don't check fewer levels. (can be use --separate-dirs)
  
  =item B<--all-files>
  
  Add files when you check directories.
  
  =item B<--exclude-du>
  
  Exclude files/directories with 'du' command. Values from exclude files/directories are not counted in parent directories.
  Shell pattern can be used.
  
  =item B<--filter-plugin>
  
  Filter files/directories in the plugin. Values from exclude files/directories are counted in parent directories!!!
  Perl Regexp can be used.
  
  =item B<--remote>
  
  Execute command remotely in 'ssh'.
  
  =item B<--hostname>
  
  Hostname to query (need --remote).
  
  =item B<--ssh-option>
  
  Specify multiple options like the user (example: --ssh-option='-l=centreon-engine' --ssh-option='-p=52').
  
  =item B<--ssh-path>
  
  Specify ssh command path (default: none)
  
  =item B<--ssh-command>
  
  Specify ssh command (default: 'ssh'). Useful to use 'plink'.
  
  =item B<--timeout>
  
  Timeout in seconds for the command (Default: 30).
  
  =item B<--sudo>
  
  Use 'sudo' to execute the command.
  
  =item B<--command-path>
  
  Command path (Default: none).
  
  =back
  
  =cut
OS_LINUX_LOCAL_MODE_FILESSIZE

$fatpacked{"os/linux/local/mode/inodes.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'OS_LINUX_LOCAL_MODE_INODES';
  #
  # Copyright 2019 Centreon (http://www.centreon.com/)
  #
  # Centreon is a full-fledged industry-strength solution that meets
  # the needs in IT infrastructure and application monitoring for
  # service performance.
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  #
  
  package os::linux::local::mode::inodes;
  
  use base qw(centreon::plugins::templates::counter);
  
  use strict;
  use warnings;
  use centreon::plugins::misc;
  
  sub set_counters {
      my ($self, %options) = @_;
      
      $self->{maps_counters_type} = [
          { name => 'inodes', type => 1, cb_prefix_output => 'prefix_inodes_output', message_multiple => 'All inode partitions are ok' }
      ];
      
      $self->{maps_counters}->{inodes} = [
          { label => 'usage', set => {
                  key_values => [ { name => 'used' }, { name => 'display' } ],
                  output_template => 'Used: %s %%',
                  perfdatas => [
                      { label => 'used', value => 'used_absolute', template => '%d',
                        unit => '%', min => 0, max => 100, label_extra_instance => 1, instance_use => 'display_absolute' },
                  ],
              }
          },
      ];
  }
  
  sub prefix_inodes_output {
      my ($self, %options) = @_;
      
      return "Inodes partition '" . $options{instance_value}->{display} . "' ";
  }
  
  sub new {
      my ($class, %options) = @_;
      my $self = $class->SUPER::new(package => __PACKAGE__, %options);
      bless $self, $class;
      
      $options{options}->add_options(arguments =>
                                  {
                                    "hostname:s"        => { name => 'hostname' },
                                    "remote"            => { name => 'remote' },
                                    "ssh-option:s@"     => { name => 'ssh_option' },
                                    "ssh-path:s"        => { name => 'ssh_path' },
                                    "ssh-command:s"     => { name => 'ssh_command', default => 'ssh' },
                                    "timeout:s"         => { name => 'timeout', default => 30 },
                                    "sudo"              => { name => 'sudo' },
                                    "command:s"         => { name => 'command', default => 'df' },
                                    "command-path:s"    => { name => 'command_path' },
                                    "command-options:s" => { name => 'command_options', default => '-P -i -T 2>&1' },
                                    "filter-type:s"     => { name => 'filter_type', },
                                    "filter-fs:s"       => { name => 'filter_fs', },
                                    "name:s"            => { name => 'name' },
                                    "regexp"              => { name => 'use_regexp' },
                                    "regexp-isensitive"   => { name => 'use_regexpi' },
                                  });
      $self->{result} = {};
      return $self;
  }
  
  sub manage_selection {
      my ($self, %options) = @_;
  
      my ($stdout, $exit_code) = centreon::plugins::misc::execute(
          output => $self->{output},
          options => $self->{option_results},
          sudo => $self->{option_results}->{sudo},
          command => $self->{option_results}->{command},
          command_path => $self->{option_results}->{command_path},
          command_options => $self->{option_results}->{command_options},
          no_quit => 1
      );
      $self->{inodes} = {};
      my @lines = split /\n/, $stdout;
      foreach my $line (@lines) {
          next if ($line !~ /^(\S+)\s+(\S+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\S+)\s+(.*)/);
          my ($fs, $type, $size, $used, $available, $percent, $mount) = ($1, $2, $3, $4, $5, $6, $7);
          
          next if (defined($self->{option_results}->{filter_fs}) && $self->{option_results}->{filter_fs} ne '' &&
                   $fs !~ /$self->{option_results}->{filter_fs}/);
          next if (defined($self->{option_results}->{filter_type}) && $self->{option_results}->{filter_type} ne '' &&
                   $type !~ /$self->{option_results}->{filter_type}/);
          
          next if (defined($self->{option_results}->{name}) && defined($self->{option_results}->{use_regexp}) && defined($self->{option_results}->{use_regexpi}) 
              && $mount !~ /$self->{option_results}->{name}/i);
          next if (defined($self->{option_results}->{name}) && defined($self->{option_results}->{use_regexp}) && !defined($self->{option_results}->{use_regexpi}) 
              && $mount !~ /$self->{option_results}->{name}/);
          next if (defined($self->{option_results}->{name}) && !defined($self->{option_results}->{use_regexp}) && !defined($self->{option_results}->{use_regexpi})
              && $mount ne $self->{option_results}->{name});
          
          $percent =~ s/%//g;
          $self->{inodes}->{$mount} = { display => $mount, fs => $fs, type => $type, total => $size, used => $percent };
      }
      
      if (scalar(keys %{$self->{inodes}}) <= 0) {
          if ($exit_code != 0) {
              $self->{output}->output_add(long_msg => "command output:" . $stdout);
          }
          $self->{output}->add_option_msg(short_msg => "No storage found (filters or command issue)");
          $self->{output}->option_exit();
      }
  }
  
  1;
  
  
  =head1 MODE
  
  Check Inodes space usage on partitions.
  
  =over 8
  
  =item B<--remote>
  
  Execute command remotely in 'ssh'.
  
  =item B<--hostname>
  
  Hostname to query (need --remote).
  
  =item B<--ssh-option>
  
  Specify multiple options like the user (example: --ssh-option='-l=centreon-engine' --ssh-option='-p=52').
  
  =item B<--ssh-path>
  
  Specify ssh command path (default: none)
  
  =item B<--ssh-command>
  
  Specify ssh command (default: 'ssh'). Useful to use 'plink'.
  
  =item B<--timeout>
  
  Timeout in seconds for the command (Default: 30).
  
  =item B<--sudo>
  
  Use 'sudo' to execute the command.
  
  =item B<--command>
  
  Command to get information (Default: 'df').
  Can be changed if you have output in a file.
  
  =item B<--command-path>
  
  Command path (Default: none).
  
  =item B<--command-options>
  
  Command options (Default: '-P -i -T 2>&1').
  
  =item B<--warning-usage>
  
  Threshold warning in percent.
  
  =item B<--critical-usage>
  
  Threshold critical in percent.
  
  =item B<--name>
  
  Set the storage mount point (empty means 'check all storages')
  
  =item B<--regexp>
  
  Allows to use regexp to filter storage mount point (with option --name).
  
  =item B<--regexp-isensitive>
  
  Allows to use regexp non case-sensitive (with --regexp).
  
  =item B<--filter-type>
  
  Filter filesystem type (regexp can be used).
  
  =item B<--filter-fs>
  
  Filter filesystem (regexp can be used).
  
  =back
  
  =cut
OS_LINUX_LOCAL_MODE_INODES

$fatpacked{"os/linux/local/mode/listinterfaces.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'OS_LINUX_LOCAL_MODE_LISTINTERFACES';
  #
  # Copyright 2019 Centreon (http://www.centreon.com/)
  #
  # Centreon is a full-fledged industry-strength solution that meets
  # the needs in IT infrastructure and application monitoring for
  # service performance.
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  #
  
  package os::linux::local::mode::listinterfaces;
  
  use base qw(centreon::plugins::mode);
  
  use strict;
  use warnings;
  use centreon::plugins::misc;
  
  sub new {
      my ($class, %options) = @_;
      my $self = $class->SUPER::new(package => __PACKAGE__, %options);
      bless $self, $class;
      
      $options{options}->add_options(arguments => {
          "hostname:s"        => { name => 'hostname' },
          "remote"            => { name => 'remote' },
          "ssh-option:s@"     => { name => 'ssh_option' },
          "ssh-path:s"        => { name => 'ssh_path' },
          "ssh-command:s"     => { name => 'ssh_command', default => 'ssh' },
          "timeout:s"         => { name => 'timeout', default => 30 },
          "sudo"              => { name => 'sudo' },
          "command:s"         => { name => 'command', default => 'ip' },
          "command-path:s"    => { name => 'command_path', default => '/sbin' },
          "command-options:s" => { name => 'command_options', default => '-s addr 2>&1' },
          "filter-name:s"     => { name => 'filter_name' },
          "filter-state:s"    => { name => 'filter_state' },
          "no-loopback"       => { name => 'no_loopback' },
          "skip-novalues"     => { name => 'skip_novalues' },
      });
      
      $self->{result} = {};
      return $self;
  }
  
  sub check_options {
      my ($self, %options) = @_;
      $self->SUPER::init(%options);
  }
  
  sub manage_selection {
      my ($self, %options) = @_;
  
      my $stdout = centreon::plugins::misc::execute(
          output => $self->{output},
          options => $self->{option_results},
          sudo => $self->{option_results}->{sudo},
          command => $self->{option_results}->{command},
          command_path => $self->{option_results}->{command_path},
          command_options => $self->{option_results}->{command_options}
      );
      
      my $mapping = {
          ifconfig => {
              get_interface => '^(\S+)(.*?)(\n\n|\n$)',
              test => 'RX bytes:\S+.*?TX bytes:\S+',
          },
          iproute => {
              get_interface => '^\d+:\s+(\S+)(.*?)(?=\n\d|\Z$)',
              test => 'RX:\s+bytes.*?\d+',
          },
      };
      
      my $type = 'ifconfig';
      if ($stdout =~ /^\d+:\s+\S+:\s+</ms) {
          $type = 'iproute';
      }
      
      while ($stdout =~ /$mapping->{$type}->{get_interface}/msg) {
          my ($interface_name, $values) = ($1, $2);
          $interface_name =~ s/:$//;
          my $states = '';
          $states .= 'R' if ($values =~ /RUNNING|LOWER_UP/ms);
          $states .= 'U' if ($values =~ /UP/ms);
          
          if (defined($self->{option_results}->{no_loopback}) && $values =~ /LOOPBACK/ms) {
              $self->{output}->output_add(long_msg => "Skipping interface '" . $interface_name . "': option --no-loopback");
              next;
          }
          if (defined($self->{option_results}->{filter_name}) && $self->{option_results}->{filter_name} ne '' &&
              $interface_name !~ /$self->{option_results}->{filter_name}/) {
              $self->{output}->output_add(long_msg => "Skipping interface '" . $interface_name . "': no matching filter name");
              next;
          }
          if (defined($self->{option_results}->{filter_state}) && $self->{option_results}->{filter_state} ne '' &&
              $states !~ /$self->{option_results}->{filter_state}/) {
              $self->{output}->output_add(long_msg => "Skipping interface '" . $interface_name . "': no matching filter state");
              next;
          }
          
          if (defined($self->{option_results}->{skip_novalues}) && $values =~ /$mapping->{$type}->{test}/msi) {
              $self->{output}->output_add(long_msg => "Skipping interface '" . $interface_name . "': no values");
              next;
          }
  
          $self->{result}->{$interface_name} = { state => $states };
      }    
  }
  
  sub run {
      my ($self, %options) = @_;
  	
      $self->manage_selection();
      foreach my $name (sort(keys %{$self->{result}})) {
          $self->{output}->output_add(long_msg => "'" . $name . "' [state = '" . $self->{result}->{$name}->{state} . "']");
      }
      
      $self->{output}->output_add(severity => 'OK',
                                  short_msg => 'List interfaces:');
      $self->{output}->display(nolabel => 1, force_ignore_perfdata => 1, force_long_output => 1);
      $self->{output}->exit();
  }
  
  sub disco_format {
      my ($self, %options) = @_;
      
      $self->{output}->add_disco_format(elements => ['name', 'state']);
  }
  
  sub disco_show {
      my ($self, %options) = @_;
  
      $self->manage_selection();
      foreach my $name (sort(keys %{$self->{result}})) {     
          $self->{output}->add_disco_entry(
              name => $name,
              state => $self->{result}->{$name}->{state}
          );
      }
  }
  
  1;
  
  
  =head1 MODE
  
  List storages.
  
  =over 8
  
  =item B<--remote>
  
  Execute command remotely in 'ssh'.
  
  =item B<--hostname>
  
  Hostname to query (need --remote).
  
  =item B<--ssh-option>
  
  Specify multiple options like the user (example: --ssh-option='-l=centreon-engine' --ssh-option='-p=52').
  
  =item B<--ssh-path>
  
  Specify ssh command path (default: none)
  
  =item B<--ssh-command>
  
  Specify ssh command (default: 'ssh'). Useful to use 'plink'.
  
  =item B<--timeout>
  
  Timeout in seconds for the command (Default: 30).
  
  =item B<--sudo>
  
  Use 'sudo' to execute the command.
  
  =item B<--command>
  
  Command to get information (Default: 'ip').
  Can be changed if you have output in a file.
  
  =item B<--command-path>
  
  Command path (Default: '/sbin').
  
  =item B<--command-options>
  
  Command options (Default: '-s addr 2>&1').
  
  =item B<--filter-name>
  
  Filter interface name (regexp can be used).
  
  =item B<--filter-state>
  
  Filter state (regexp can be used).
  Can be: 'R' (running), 'U' (up).
  
  =item B<--no-loopback>
  
  Don't display loopback interfaces.
  
  =item B<--skip-novalues>
  
  Filter interface without in/out byte values.
  
  =back
  
  =cut
OS_LINUX_LOCAL_MODE_LISTINTERFACES

$fatpacked{"os/linux/local/mode/listpartitions.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'OS_LINUX_LOCAL_MODE_LISTPARTITIONS';
  #
  # Copyright 2019 Centreon (http://www.centreon.com/)
  #
  # Centreon is a full-fledged industry-strength solution that meets
  # the needs in IT infrastructure and application monitoring for
  # service performance.
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  #
  
  package os::linux::local::mode::listpartitions;
  
  use base qw(centreon::plugins::mode);
  
  use strict;
  use warnings;
  use centreon::plugins::misc;
  
  sub new {
      my ($class, %options) = @_;
      my $self = $class->SUPER::new(package => __PACKAGE__, %options);
      bless $self, $class;
      
      $options{options}->add_options(arguments =>
                                  {
                                    "hostname:s"        => { name => 'hostname' },
                                    "remote"            => { name => 'remote' },
                                    "ssh-option:s@"     => { name => 'ssh_option' },
                                    "ssh-path:s"        => { name => 'ssh_path' },
                                    "ssh-command:s"     => { name => 'ssh_command', default => 'ssh' },
                                    "timeout:s"         => { name => 'timeout', default => 30 },
                                    "sudo"              => { name => 'sudo' },
                                    "command:s"         => { name => 'command', default => 'cat' },
                                    "command-path:s"    => { name => 'command_path' },
                                    "command-options:s" => { name => 'command_options', default => '/proc/partitions 2>&1' },
                                    "filter-name:s"     => { name => 'filter_name', },
                                  });
      $self->{result} = {};
      return $self;
  }
  
  sub check_options {
      my ($self, %options) = @_;
      $self->SUPER::init(%options);
  }
  
  sub manage_selection {
      my ($self, %options) = @_;
  
      my $stdout = centreon::plugins::misc::execute(output => $self->{output},
                                                    options => $self->{option_results},
                                                    sudo => $self->{option_results}->{sudo},
                                                    command => $self->{option_results}->{command},
                                                    command_path => $self->{option_results}->{command_path},
                                                    command_options => $self->{option_results}->{command_options});
      my @lines = split /\n/, $stdout;
      # Header not needed
      shift @lines;
      foreach my $line (@lines) {
          next if ($line !~ /^\s*(\S+)\s+(\S+)\s+(\S+)\s+(\S+)/);
          my ($major, $minor, $blocks, $name) = ($1, $2, $3, $4);
          
          if (defined($self->{option_results}->{filter_name}) && $self->{option_results}->{filter_name} ne '' &&
              $name !~ /$self->{option_results}->{filter_name}/) {
              $self->{output}->output_add(long_msg => "Skipping partition '" . $name . "': no matching filter name");
              next;
          }
          
          $self->{result}->{$name} = 1;
      }
  }
  
  sub run {
      my ($self, %options) = @_;
  	
      $self->manage_selection();
      foreach my $name (sort(keys %{$self->{result}})) {
          $self->{output}->output_add(long_msg => "'" . $name . "'");
      }
      
      $self->{output}->output_add(severity => 'OK',
                                  short_msg => 'List partitions:');
      $self->{output}->display(nolabel => 1, force_ignore_perfdata => 1, force_long_output => 1);
      $self->{output}->exit();
  }
  
  sub disco_format {
      my ($self, %options) = @_;
      
      $self->{output}->add_disco_format(elements => ['name']);
  }
  
  sub disco_show {
      my ($self, %options) = @_;
  
      $self->manage_selection();
      foreach my $name (sort(keys %{$self->{result}})) {     
          $self->{output}->add_disco_entry(name => $name,
                                           );
      }
  }
  
  1;
  
  
  =head1 MODE
  
  List partitions.
  
  =over 8
  
  =item B<--remote>
  
  Execute command remotely in 'ssh'.
  
  =item B<--hostname>
  
  Hostname to query (need --remote).
  
  =item B<--ssh-option>
  
  Specify multiple options like the user (example: --ssh-option='-l=centreon-engine' --ssh-option='-p=52').
  
  =item B<--ssh-path>
  
  Specify ssh command path (default: none)
  
  =item B<--ssh-command>
  
  Specify ssh command (default: 'ssh'). Useful to use 'plink'.
  
  =item B<--timeout>
  
  Timeout in seconds for the command (Default: 30).
  
  =item B<--sudo>
  
  Use 'sudo' to execute the command.
  
  =item B<--command>
  
  Command to get information (Default: 'cat').
  Can be changed if you have output in a file.
  
  =item B<--command-path>
  
  Command path (Default: none).
  
  =item B<--command-options>
  
  Command options (Default: '/proc/partitions 2>&1').
  
  =item B<--filter-name>
  
  Filter partition name (regexp can be used).
  
  =back
  
  =cut
OS_LINUX_LOCAL_MODE_LISTPARTITIONS

$fatpacked{"os/linux/local/mode/liststorages.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'OS_LINUX_LOCAL_MODE_LISTSTORAGES';
  #
  # Copyright 2019 Centreon (http://www.centreon.com/)
  #
  # Centreon is a full-fledged industry-strength solution that meets
  # the needs in IT infrastructure and application monitoring for
  # service performance.
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  #
  
  package os::linux::local::mode::liststorages;
  
  use base qw(centreon::plugins::mode);
  
  use strict;
  use warnings;
  use centreon::plugins::misc;
  
  sub new {
      my ($class, %options) = @_;
      my $self = $class->SUPER::new(package => __PACKAGE__, %options);
      bless $self, $class;
      
      $options{options}->add_options(arguments =>
                                  {
                                    "hostname:s"        => { name => 'hostname' },
                                    "remote"            => { name => 'remote' },
                                    "ssh-option:s@"     => { name => 'ssh_option' },
                                    "ssh-path:s"        => { name => 'ssh_path' },
                                    "ssh-command:s"     => { name => 'ssh_command', default => 'ssh' },
                                    "timeout:s"         => { name => 'timeout', default => 30 },
                                    "sudo"              => { name => 'sudo' },
                                    "command:s"         => { name => 'command', default => 'df' },
                                    "command-path:s"    => { name => 'command_path' },
                                    "command-options:s" => { name => 'command_options', default => '-P -k -T 2>&1' },
                                    "filter-type:s"     => { name => 'filter_type', },
                                    "filter-fs:s"       => { name => 'filter_fs', },
                                    "filter-mount:s"    => { name => 'filter_mount', },
                                  });
      $self->{result} = {};
      return $self;
  }
  
  sub check_options {
      my ($self, %options) = @_;
      $self->SUPER::init(%options);
  }
  
  sub manage_selection {
      my ($self, %options) = @_;
  
      my ($stdout, $exit_code) = centreon::plugins::misc::execute(
          output => $self->{output},
          options => $self->{option_results},
          sudo => $self->{option_results}->{sudo},
          command => $self->{option_results}->{command},
          command_path => $self->{option_results}->{command_path},
          command_options => $self->{option_results}->{command_options},
          no_quit => 1
      );
      my @lines = split /\n/, $stdout;
      foreach my $line (@lines) {
          next if ($line !~ /^(\S+)\s+(\S+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\S+)\s+(.*)/);
          my ($fs, $type, $size, $used, $available, $percent, $mount) = ($1, $2, $3, $4, $5, $6, $7);
          
          if (defined($self->{option_results}->{filter_fs}) && $self->{option_results}->{filter_fs} ne '' &&
              $fs !~ /$self->{option_results}->{filter_fs}/) {
              $self->{output}->output_add(long_msg => "Skipping storage '" . $mount . "': no matching filter filesystem");
              next;
          }
          if (defined($self->{option_results}->{filter_type}) && $self->{option_results}->{filter_type} ne '' &&
              $type !~ /$self->{option_results}->{filter_type}/) {
              $self->{output}->output_add(long_msg => "Skipping storage '" . $mount . "': no matching filter filesystem type");
              next;
          }
          if (defined($self->{option_results}->{filter_mount}) && $self->{option_results}->{filter_mount} ne '' &&
              $mount !~ /$self->{option_results}->{filter_mount}/) {
              $self->{output}->output_add(long_msg => "Skipping storage '" . $mount . "': no matching filter mount point");
              next;
          }
          
          $self->{result}->{$mount} = {fs => $fs, type => $type};
      }
  }
  
  sub run {
      my ($self, %options) = @_;
  	
      $self->manage_selection();
      foreach my $name (sort(keys %{$self->{result}})) {
          $self->{output}->output_add(long_msg => "'" . $name . "' [fs = " . $self->{result}->{$name}->{fs} . '] [type = ' . $self->{result}->{$name}->{type} . ']');
      }
      
      $self->{output}->output_add(severity => 'OK',
                                  short_msg => 'List storages:');
      $self->{output}->display(nolabel => 1, force_ignore_perfdata => 1, force_long_output => 1);
      $self->{output}->exit();
  }
  
  sub disco_format {
      my ($self, %options) = @_;
      
      $self->{output}->add_disco_format(elements => ['name', 'fs', 'type']);
  }
  
  sub disco_show {
      my ($self, %options) = @_;
  
      $self->manage_selection();
      foreach my $name (sort(keys %{$self->{result}})) {     
          $self->{output}->add_disco_entry(name => $name,
                                           fs => $self->{result}->{$name}->{fs},
                                           type => $self->{result}->{$name}->{type},
                                           );
      }
  }
  
  1;
  
  
  =head1 MODE
  
  List storages.
  
  =over 8
  
  =item B<--remote>
  
  Execute command remotely in 'ssh'.
  
  =item B<--hostname>
  
  Hostname to query (need --remote).
  
  =item B<--ssh-option>
  
  Specify multiple options like the user (example: --ssh-option='-l=centreon-engine' --ssh-option='-p=52').
  
  =item B<--ssh-path>
  
  Specify ssh command path (default: none)
  
  =item B<--ssh-command>
  
  Specify ssh command (default: 'ssh'). Useful to use 'plink'.
  
  =item B<--timeout>
  
  Timeout in seconds for the command (Default: 30).
  
  =item B<--sudo>
  
  Use 'sudo' to execute the command.
  
  =item B<--command>
  
  Command to get information (Default: 'df').
  Can be changed if you have output in a file.
  
  =item B<--command-path>
  
  Command path (Default: none).
  
  =item B<--command-options>
  
  Command options (Default: '-P -k -T 2>&1').
  
  =item B<--filter-type>
  
  Filter filesystem type (regexp can be used).
  
  =item B<--filter-fs>
  
  Filter filesystem (regexp can be used).
  
  =item B<--filter-mount>
  
  Filter mount point (regexp can be used).
  
  =back
  
  =cut
OS_LINUX_LOCAL_MODE_LISTSTORAGES

$fatpacked{"os/linux/local/mode/loadaverage.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'OS_LINUX_LOCAL_MODE_LOADAVERAGE';
  #
  # Copyright 2019 Centreon (http://www.centreon.com/)
  #
  # Centreon is a full-fledged industry-strength solution that meets
  # the needs in IT infrastructure and application monitoring for
  # service performance.
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  #
  
  package os::linux::local::mode::loadaverage;
  
  use base qw(centreon::plugins::mode);
  
  use strict;
  use warnings;
  use centreon::plugins::misc;
  
  sub new {
      my ($class, %options) = @_;
      my $self = $class->SUPER::new(package => __PACKAGE__, %options);
      bless $self, $class;
      
      $options{options}->add_options(arguments =>
                                  { 
                                    "hostname:s"        => { name => 'hostname' },
                                    "remote"            => { name => 'remote' },
                                    "ssh-option:s@"     => { name => 'ssh_option' },
                                    "ssh-path:s"        => { name => 'ssh_path' },
                                    "ssh-command:s"     => { name => 'ssh_command', default => 'ssh' },
                                    "timeout:s"         => { name => 'timeout', default => 30 },
                                    "sudo"              => { name => 'sudo' },
                                    "command:s"         => { name => 'command', default => 'tail' },
                                    "command-path:s"    => { name => 'command_path' },
                                    "command-options:s" => { name => 'command_options', default => '-n +1 /proc/loadavg /proc/stat 2>&1' },
                                    "warning:s"         => { name => 'warning', default => '' },
                                    "critical:s"        => { name => 'critical', default => '' },
                                    "average"           => { name => 'average' },
                                  });
      return $self;
  }
  
  sub check_options {
      my ($self, %options) = @_;
      $self->SUPER::init(%options);
  
      ($self->{warn1}, $self->{warn5}, $self->{warn15}) = split /,/, $self->{option_results}->{warning};
      ($self->{crit1}, $self->{crit5}, $self->{crit15}) = split /,/, $self->{option_results}->{critical};
      
      if (($self->{perfdata}->threshold_validate(label => 'warn1', value => $self->{warn1})) == 0) {
         $self->{output}->add_option_msg(short_msg => "Wrong warning (1min) threshold '" . $self->{warn1} . "'.");
         $self->{output}->option_exit();
      }
      if (($self->{perfdata}->threshold_validate(label => 'warn5', value => $self->{warn5})) == 0) {
         $self->{output}->add_option_msg(short_msg => "Wrong warning (5min) threshold '" . $self->{warn5} . "'.");
         $self->{output}->option_exit();
      }
      if (($self->{perfdata}->threshold_validate(label => 'warn15', value => $self->{warn15})) == 0) {
         $self->{output}->add_option_msg(short_msg => "Wrong warning (15min) threshold '" . $self->{warn15} . "'.");
         $self->{output}->option_exit();
      }
      if (($self->{perfdata}->threshold_validate(label => 'crit1', value => $self->{crit1})) == 0) {
         $self->{output}->add_option_msg(short_msg => "Wrong critical (1min) threshold '" . $self->{crit1} . "'.");
         $self->{output}->option_exit();
      }
      if (($self->{perfdata}->threshold_validate(label => 'crit5', value => $self->{crit5})) == 0) {
         $self->{output}->add_option_msg(short_msg => "Wrong critical (5min) threshold '" . $self->{crit5} . "'.");
         $self->{output}->option_exit();
      }
      if (($self->{perfdata}->threshold_validate(label => 'crit15', value => $self->{crit15})) == 0) {
         $self->{output}->add_option_msg(short_msg => "Wrong critical (15min) threshold '" . $self->{crit15} . "'.");
         $self->{output}->option_exit();
      }
  }
  
  sub run {
      my ($self, %options) = @_;
  
      my $stdout = centreon::plugins::misc::execute(output => $self->{output},
                                                    options => $self->{option_results},
                                                    sudo => $self->{option_results}->{sudo},
                                                    command => $self->{option_results}->{command},
                                                    command_path => $self->{option_results}->{command_path},
                                                    command_options => $self->{option_results}->{command_options});
      
      my ($load1m, $load5m, $load15m);
      my ($msg, $cpu_load1, $cpu_load5, $cpu_load15);
  
      if ($stdout =~ /\/proc\/loadavg.*?([0-9\.]+)\s+([0-9\.]+)\s+([0-9\.]+)/ms) {
          ($load1m, $load5m, $load15m) = ($1, $2, $3)
      }
  
      if (!defined($load1m) || !defined($load5m) || !defined($load15m)) {
          $self->{output}->add_option_msg(short_msg => "Some informations missing.");
          $self->{output}->option_exit();
      }
  
      if (defined($self->{option_results}->{average})) {    
          my $countCpu = 0;
          
          $countCpu++ while ($stdout =~ /^cpu\d+/msg);
          
          if ($countCpu == 0){
              $self->{output}->output_add(severity => 'unknown',
                                          short_msg => 'Unable to get number of CPUs');
              $self->{output}->display();
              $self->{output}->exit();    
          }
  
          $cpu_load1 = sprintf("%0.2f", $load1m / $countCpu);
          $cpu_load5 = sprintf("%0.2f", $load5m / $countCpu);
          $cpu_load15 = sprintf("%0.2f", $load15m / $countCpu);
          $msg = sprintf("Load average: %s [%s/%s CPUs], %s [%s/%s CPUs], %s [%s/%s CPUs]", $cpu_load1, $load1m, $countCpu,
                         $cpu_load5, $load5m, $countCpu,
                         $cpu_load15, $load15m, $countCpu);
          $self->{output}->perfdata_add(label => 'avg_load1',
                                    value => $cpu_load1,
                                    warning => $self->{perfdata}->get_perfdata_for_output(label => 'warn1'),
                                    critical => $self->{perfdata}->get_perfdata_for_output(label => 'crit1'),
                                    min => 0);
          $self->{output}->perfdata_add(label => 'avg_load5',
                                    value => $cpu_load5,
                                    warning => $self->{perfdata}->get_perfdata_for_output(label => 'warn5'),
                                    critical => $self->{perfdata}->get_perfdata_for_output(label => 'crit5'),
                                    min => 0);
          $self->{output}->perfdata_add(label => 'avg_load15',
                                    value => $cpu_load15,
                                    warning => $self->{perfdata}->get_perfdata_for_output(label => 'warn15'),
                                    critical => $self->{perfdata}->get_perfdata_for_output(label => 'crit15'),
                                    min => 0);
          $self->{output}->perfdata_add(label => 'load1',
                                    value => $load1m,
                                    warning => $self->{perfdata}->get_perfdata_for_output(label => 'warn1', op => '*', value => $countCpu),
                                    critical => $self->{perfdata}->get_perfdata_for_output(label => 'crit1', op => '*', value => $countCpu),
                                    min => 0);
          $self->{output}->perfdata_add(label => 'load5',
                                    value => $load5m,
                                    warning => $self->{perfdata}->get_perfdata_for_output(label => 'warn5', op => '*', value => $countCpu),
                                    critical => $self->{perfdata}->get_perfdata_for_output(label => 'crit5', op => '*', value => $countCpu),
                                    min => 0);
          $self->{output}->perfdata_add(label => 'load15',
                                    value => $load15m,
                                    warning => $self->{perfdata}->get_perfdata_for_output(label => 'warn15', op => '*', value => $countCpu),
                                    critical => $self->{perfdata}->get_perfdata_for_output(label => 'crit15', op => '*', value => $countCpu),
                                    min => 0);
      } else {
          $cpu_load1 = $load1m;
          $cpu_load5 = $load5m;
          $cpu_load15 = $load15m;
      
          $msg = sprintf("Load average: %s, %s, %s", $cpu_load1, $cpu_load5, $cpu_load15);
          $self->{output}->perfdata_add(label => 'load1',
                                    value => $cpu_load1,
                                    warning => $self->{perfdata}->get_perfdata_for_output(label => 'warn1'),
                                    critical => $self->{perfdata}->get_perfdata_for_output(label => 'crit1'),
                                    min => 0);
          $self->{output}->perfdata_add(label => 'load5',
                                    value => $cpu_load5,
                                    warning => $self->{perfdata}->get_perfdata_for_output(label => 'warn5'),
                                    critical => $self->{perfdata}->get_perfdata_for_output(label => 'crit5'),
                                    min => 0);
          $self->{output}->perfdata_add(label => 'load15',
                                    value => $cpu_load15,
                                    warning => $self->{perfdata}->get_perfdata_for_output(label => 'warn15'),
                                    critical => $self->{perfdata}->get_perfdata_for_output(label => 'crit15'),
                                    min => 0);
      }
      
      my $exit1 = $self->{perfdata}->threshold_check(value => $cpu_load1,
                                                     threshold => [ { label => 'crit1', 'exit_litteral' => 'critical' }, { label => 'warn1', exit_litteral => 'warning' } ]);
      my $exit2 = $self->{perfdata}->threshold_check(value => $cpu_load5,
                                                     threshold => [ { label => 'crit5', 'exit_litteral' => 'critical' }, { label => 'warn5', exit_litteral => 'warning' } ]);
      my $exit3 = $self->{perfdata}->threshold_check(value => $cpu_load15,
                                                     threshold => [ { label => 'crit15', 'exit_litteral' => 'critical' }, { label => 'warn15', exit_litteral => 'warning' } ]);
      my $exit = $self->{output}->get_most_critical(status => [ $exit1, $exit2, $exit3 ]);
      $self->{output}->output_add(severity => $exit,
                                  short_msg => $msg);
  
      $self->{output}->display();
      $self->{output}->exit();
  }
  
  1;
  
  
  =head1 MODE
  
  Check system load-average. (need '/proc/loadavg' file).
  
  =over 8
  
  =item B<--warning>
  
  Threshold warning (1min,5min,15min).
  
  =item B<--critical>
  
  Threshold critical (1min,5min,15min).
  
  =item B<--average>
  
  Load average for the number of CPUs.
  
  =item B<--remote>
  
  Execute command remotely in 'ssh'.
  
  =item B<--hostname>
  
  Hostname to query (need --remote).
  
  =item B<--ssh-option>
  
  Specify multiple options like the user (example: --ssh-option='-l=centreon-engine' --ssh-option='-p=52').
  
  =item B<--ssh-path>
  
  Specify ssh command path (default: none)
  
  =item B<--ssh-command>
  
  Specify ssh command (default: 'ssh'). Useful to use 'plink'.
  
  =item B<--timeout>
  
  Timeout in seconds for the command (Default: 30).
  
  =item B<--sudo>
  
  Use 'sudo' to execute the command.
  
  =item B<--command>
  
  Command to get information (Default: 'tail').
  Can be changed if you have output in a file.
  
  =item B<--command-path>
  
  Command path (Default: none).
  
  =item B<--command-options>
  
  Command options (Default: '-n +1 /proc/loadavg /proc/stat 2>&1').
  
  =back
  
  =cut
OS_LINUX_LOCAL_MODE_LOADAVERAGE

$fatpacked{"os/linux/local/mode/memory.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'OS_LINUX_LOCAL_MODE_MEMORY';
  #
  # Copyright 2019 Centreon (http://www.centreon.com/)
  #
  # Centreon is a full-fledged industry-strength solution that meets
  # the needs in IT infrastructure and application monitoring for
  # service performance.
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  #
  
  package os::linux::local::mode::memory;
  
  use base qw(centreon::plugins::mode);
  
  use strict;
  use warnings;
  use centreon::plugins::misc;
  
  sub new {
      my ($class, %options) = @_;
      my $self = $class->SUPER::new(package => __PACKAGE__, %options);
      bless $self, $class;
      
      $options{options}->add_options(arguments =>
                                  { 
                                    "hostname:s"        => { name => 'hostname' },
                                    "remote"            => { name => 'remote' },
                                    "ssh-option:s@"     => { name => 'ssh_option' },
                                    "ssh-path:s"        => { name => 'ssh_path' },
                                    "ssh-command:s"     => { name => 'ssh_command', default => 'ssh' },
                                    "timeout:s"         => { name => 'timeout', default => 30 },
                                    "sudo"              => { name => 'sudo' },
                                    "command:s"         => { name => 'command', default => 'cat' },
                                    "command-path:s"    => { name => 'command_path' },
                                    "command-options:s" => { name => 'command_options', default => '/proc/meminfo 2>&1' },
                                    "warning:s"         => { name => 'warning', },
                                    "critical:s"        => { name => 'critical', },
                                  });
      return $self;
  }
  
  sub check_options {
      my ($self, %options) = @_;
      $self->SUPER::init(%options);
  
      if (($self->{perfdata}->threshold_validate(label => 'warning', value => $self->{option_results}->{warning})) == 0) {
         $self->{output}->add_option_msg(short_msg => "Wrong warning threshold '" . $self->{option_results}->{warning} . "'.");
         $self->{output}->option_exit();
      }
      if (($self->{perfdata}->threshold_validate(label => 'critical', value => $self->{option_results}->{critical})) == 0) {
         $self->{output}->add_option_msg(short_msg => "Wrong critical threshold '" . $self->{option_results}->{critical} . "'.");
         $self->{output}->option_exit();
      }
  }
  
  sub run {
      my ($self, %options) = @_;
  
      my $stdout = centreon::plugins::misc::execute(output => $self->{output},
                                                    options => $self->{option_results},
                                                    sudo => $self->{option_results}->{sudo},
                                                    command => $self->{option_results}->{command},
                                                    command_path => $self->{option_results}->{command_path},
                                                    command_options => $self->{option_results}->{command_options});
      
      # Buffer can be missing. In Openvz container for example.
      my $buffer_used = 0;
      my ($cached_used, $free, $total_size);
      foreach (split(/\n/, $stdout)) {
          if (/^MemTotal:\s+(\d+)/i) {
              $total_size = $1 * 1024;
          } elsif (/^Cached:\s+(\d+)/i) {
              $cached_used = $1 * 1024;
          } elsif (/^Buffers:\s+(\d+)/i) {
              $buffer_used = $1 * 1024;
          } elsif (/^MemFree:\s+(\d+)/i) {
              $free = $1 * 1024;
          }
      }
      
      if (!defined($total_size) || !defined($cached_used) || !defined($free)) {
          $self->{output}->add_option_msg(short_msg => "Some informations missing.");
          $self->{output}->option_exit();
      }
      
      my $physical_used = $total_size - $free;
      my $nobuf_used = $physical_used - $buffer_used - $cached_used;
      
      my $prct_used = $nobuf_used * 100 / $total_size;
      my $exit = $self->{perfdata}->threshold_check(value => $prct_used, threshold => [ { label => 'critical', 'exit_litteral' => 'critical' }, { label => 'warning', exit_litteral => 'warning' } ]);
  
      my ($nobuf_value, $nobuf_unit) = $self->{perfdata}->change_bytes(value => $nobuf_used);
      my ($buffer_value, $buffer_unit) = $self->{perfdata}->change_bytes(value => $buffer_used);
      my ($cached_value, $cached_unit) = $self->{perfdata}->change_bytes(value => $cached_used);
      
      $self->{output}->output_add(severity => $exit,
                                  short_msg => sprintf("Ram used (-buffers/cache) %s (%.2f%%), Buffer: %s, Cached: %s",
                                              $nobuf_value . " " . $nobuf_unit, $prct_used,
                                              $buffer_value . " " . $buffer_unit,
                                              $cached_value . " " . $cached_unit));
      
      $self->{output}->perfdata_add(label => "cached", unit => 'B',
                                    value => $cached_used,
                                    min => 0);
      $self->{output}->perfdata_add(label => "buffer", unit => 'B',
                                    value => $buffer_used,
                                    min => 0);
      $self->{output}->perfdata_add(label => "used", unit => 'B',
                                    value => $nobuf_used,
                                    warning => $self->{perfdata}->get_perfdata_for_output(label => 'warning', total => $total_size),
                                    critical => $self->{perfdata}->get_perfdata_for_output(label => 'critical', total => $total_size),
                                    min => 0, max => $total_size);
   
      $self->{output}->display();
      $self->{output}->exit();
  }
  
  1;
  
  
  =head1 MODE
  
  Check physical memory (need '/proc/meminfo' file).
  
  =over 8
  
  =item B<--warning>
  
  Threshold warning in percent.
  
  =item B<--critical>
  
  Threshold critical in percent.
  
  =item B<--remote>
  
  Execute command remotely in 'ssh'.
  
  =item B<--hostname>
  
  Hostname to query (need --remote).
  
  =item B<--ssh-option>
  
  Specify multiple options like the user (example: --ssh-option='-l=centreon-engine' --ssh-option='-p=52').
  
  =item B<--ssh-path>
  
  Specify ssh command path (default: none)
  
  =item B<--ssh-command>
  
  Specify ssh command (default: 'ssh'). Useful to use 'plink'.
  
  =item B<--timeout>
  
  Timeout in seconds for the command (Default: 30).
  
  =item B<--sudo>
  
  Use 'sudo' to execute the command.
  
  =item B<--command>
  
  Command to get information (Default: 'cat').
  Can be changed if you have output in a file.
  
  =item B<--command-path>
  
  Command path (Default: none).
  
  =item B<--command-options>
  
  Command options (Default: '/proc/meminfo 2>&1').
  
  =back
  
  =cut
OS_LINUX_LOCAL_MODE_MEMORY

$fatpacked{"os/linux/local/mode/mountpoint.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'OS_LINUX_LOCAL_MODE_MOUNTPOINT';
  #
  # Copyright 2019 Centreon (http://www.centreon.com/)
  #
  # Centreon is a full-fledged industry-strength solution that meets
  # the needs in IT infrastructure and application monitoring for
  # service performance.
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  #
  
  package os::linux::local::mode::mountpoint;
  
  use base qw(centreon::plugins::templates::counter);
  
  use strict;
  use warnings;
  use centreon::plugins::misc;
  use centreon::plugins::templates::catalog_functions qw(catalog_status_threshold);
  
  sub custom_status_output {
      my ($self, %options) = @_;
  
      return "options are '" . $self->{result_values}->{options} . "' [type: " . $self->{result_values}->{type} . "]";
  }
  
  sub custom_status_calc {
      my ($self, %options) = @_;
  
      $self->{result_values}->{display} = $options{new_datas}->{$self->{instance} . '_display'};
      $self->{result_values}->{type} = $options{new_datas}->{$self->{instance} . '_type'};
      $self->{result_values}->{options} = $options{new_datas}->{$self->{instance} . '_options'};
  
      return 0;
  }
  
  sub prefix_output {
      my ($self, %options) = @_;
  
      return "Mount point '" . $options{instance_value}->{display} . "' ";
  }
  
  sub set_counters {
      my ($self, %options) = @_;
      
      $self->{maps_counters_type} = [
          { name => 'mountpoints', type => 1, cb_prefix_output => 'prefix_output', message_multiple => 'All mount points options are ok' }
      ];
      
      $self->{maps_counters}->{mountpoints} = [
          { label => 'status', set => {
                  key_values => [ { name => 'display' }, { name => 'options' }, { name => 'type' } ],
                  closure_custom_calc => $self->can('custom_status_calc'),
                  closure_custom_output => $self->can('custom_status_output'),
                  closure_custom_perfdata => sub { return 0; },
                  closure_custom_threshold_check => \&catalog_status_threshold,
              }
          },
      ];
  }
  
  sub new {
      my ($class, %options) = @_;
      my $self = $class->SUPER::new(package => __PACKAGE__, %options);
      bless $self, $class;
  
      $options{options}->add_options(arguments =>
                                  {
                                      "hostname:s"            => { name => 'hostname' },
                                      "remote"                => { name => 'remote' },
                                      "ssh-option:s@"         => { name => 'ssh_option' },
                                      "ssh-path:s"            => { name => 'ssh_path' },
                                      "ssh-command:s"         => { name => 'ssh_command', default => 'ssh' },
                                      "timeout:s"             => { name => 'timeout', default => 30 },
                                      "sudo"                  => { name => 'sudo' },
                                      "command:s"             => { name => 'command', default => 'mount' },
                                      "command-path:s"        => { name => 'command_path' },
                                      "command-options:s"     => { name => 'command_options', default => ' 2>&1' },
                                      "filter-device:s"       => { name => 'filter_device' },
                                      "filter-mountpoint:s"   => { name => 'filter_mountpoint' },
                                      "filter-type:s"         => { name => 'filter_type' },
                                      "warning-status:s"      => { name => 'warning_status', default => '' },
                                      "critical-status:s"     => { name => 'critical_status', default => '%{options} !~ /^rw/i && %{type} !~ /tmpfs/i' },
                                  });
      $self->{result} = {};
      return $self;
  }
  
  sub check_options {
      my ($self, %options) = @_;
      $self->SUPER::check_options(%options);
  
      $self->change_macros(macros => ['warning_status', 'critical_status']);
  }
  
  sub manage_selection {
      my ($self, %options) = @_;
  
      my ($stdout, $exit_code) = centreon::plugins::misc::execute(
          output => $self->{output},
          options => $self->{option_results},
          sudo => $self->{option_results}->{sudo},
          command => $self->{option_results}->{command},
          command_path => $self->{option_results}->{command_path},
          command_options => $self->{option_results}->{command_options},
          no_quit => 1
      );
  
      $self->{mountpoints} = {};
      
      my @lines = split /\n/, $stdout;
      foreach my $line (@lines) {
          next if ($line !~ /^\s*(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+\((.*)\)/);
          my ($device, $mountpoint, $type, $options) = ($1, $3, $5, $6);
          
          if (defined($self->{option_results}->{filter_type}) && $self->{option_results}->{filter_type} ne '' &&
              $type !~ /$self->{option_results}->{filter_type}/) {
              $self->{output}->output_add(long_msg => "skipping '" . $mountpoint . "': no matching filter.", debug => 1);
              next;
          }
          if (defined($self->{option_results}->{filter_device}) && $self->{option_results}->{filter_device} ne '' &&
              $device !~ /$self->{option_results}->{filter_device}/) {
              $self->{output}->output_add(long_msg => "skipping '" . $mountpoint . "': no matching filter.", debug => 1);
              next;
          }
          if (defined($self->{option_results}->{filter_mountpoint}) && $self->{option_results}->{filter_mountpoint} ne '' &&
              $mountpoint !~ /$self->{option_results}->{filter_mountpoint}/) {
              $self->{output}->output_add(long_msg => "skipping '" . $mountpoint . "': no matching filter.", debug => 1);
              next;
          }
  
          $self->{mountpoints}->{$mountpoint} = {
              display => $mountpoint,
              type => $type,
              options => $options,
          };
      }
      
      if (scalar(keys %{$self->{mountpoints}}) <= 0) {
          $self->{output}->add_option_msg(short_msg => "No mount points found");
          $self->{output}->option_exit();
      }
  }
  
  1;
  
  
  =head1 MODE
  
  Check mount points options.
  
  =over 8
  
  =item B<--remote>
  
  Execute command remotely in 'ssh'.
  
  =item B<--hostname>
  
  Hostname to query (need --remote).
  
  =item B<--ssh-option>
  
  Specify multiple options like the user (example: --ssh-option='-l=centreon-engine' --ssh-option='-p=52').
  
  =item B<--ssh-path>
  
  Specify ssh command path (default: none)
  
  =item B<--ssh-command>
  
  Specify ssh command (default: 'ssh'). Useful to use 'plink'.
  
  =item B<--timeout>
  
  Timeout in seconds for the command (Default: 30).
  
  =item B<--sudo>
  
  Use 'sudo' to execute the command.
  
  =item B<--command>
  
  Command to get information (Default: 'mount').
  
  =item B<--command-path>
  
  Command path (Default: none).
  
  =item B<--command-options>
  
  Command options (Default: ' 2>&1').
  
  =item B<--filter-mountpoint>
  
  Filter mount point name (Can use regexp).
  
  =item B<--filter-device>
  
  Filter device name (Can use regexp).
  
  =item B<--filter-type>
  
  Filter mount point type (Can use regexp).
  
  =item B<--warning-status>
  
  Threshold warning.
  
  =item B<--critical-status>
  
  Threshold critical
  (Default: '%{options} !~ /^rw/i && %{type} !~ /tmpfs/i').
  
  =back
  
  =cut
OS_LINUX_LOCAL_MODE_MOUNTPOINT

$fatpacked{"os/linux/local/mode/ntp.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'OS_LINUX_LOCAL_MODE_NTP';
  #
  # Copyright 2018 Centreon (http://www.centreon.com/)
  #
  # Centreon is a full-fledged industry-strength solution that meets
  # the needs in IT infrastructure and application monitoring for
  # service performance.
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  #
  
  package os::linux::local::mode::ntp;
  
  use base qw(centreon::plugins::templates::counter);
  
  use strict;
  use warnings;
  use centreon::plugins::misc;
  use centreon::plugins::templates::catalog_functions qw(catalog_status_threshold);
  
  my %state_map_ntpq = (
      '<sp>' => 'discarded due to high stratum and/or failed sanity checks',
      'x' => 'designated falsticker by the intersection algorithm',
      '.' => 'culled from the end of the candidate list',
      '-' => 'discarded by the clustering algorithm',
      '+' => 'included in the final selection set',
      '#' => 'selected for synchronization but distance exceeds maximum',
      '*' => 'selected for synchronization',
      'o' => 'selected for synchronization, PPS signal in use'
  );
  
  my %type_map_ntpq = (
      'l' => 'local',
      'u' => 'unicast',
      'm' => 'multicast',
      'b' => 'broadcast',
      '-' => 'netaddr'
  );
  
  my %state_map_chronyc = (
      'x' => 'time may be in error',
      '-' => 'not combined',
      '+' => 'combined',
      '?' => 'unreachable',
      '*' => 'current synced',
      '~' => 'time too variable'
  );
  
  my %type_map_chronyc = (
      '^' => 'server',
      '=' => 'peer',
      '#' => 'local clock'
  );
  
  my %unit_map_chronyc = (
      'ns' => 0.000001,
      'us' => 0.001,
      'ms' => 1,
      's'  => 1000
  );
  
  sub custom_status_output {
      my ($self, %options) = @_;
  
      my $msg = sprintf("[type: %s] [reach: %s] [state: %s]",
          $self->{result_values}->{type},
          $self->{result_values}->{reach},
          $self->{result_values}->{state}
      );
      return $msg;
  }
  
  sub custom_status_calc {
      my ($self, %options) = @_;
  
      $self->{result_values}->{rawtype} = $options{new_datas}->{$self->{instance} . '_type'};
      $self->{result_values}->{rawstate} = $options{new_datas}->{$self->{instance} . '_state'};
      if ($self->{instance_mode}->{option_results}->{command} eq 'ntpq') {
          $self->{result_values}->{type} = $type_map_ntpq{$options{new_datas}->{$self->{instance} . '_type'}};
      } else {
          $self->{result_values}->{type} = $type_map_chronyc{$options{new_datas}->{$self->{instance} . '_type'}};
      }
      $self->{result_values}->{reach} = $options{new_datas}->{$self->{instance} . '_reach'};
      if ($self->{instance_mode}->{option_results}->{command} eq 'ntpq') {
          $self->{result_values}->{state} = $state_map_ntpq{$options{new_datas}->{$self->{instance} . '_state'}};
      } else {
          $self->{result_values}->{state} = $state_map_chronyc{$options{new_datas}->{$self->{instance} . '_state'}};
      }
      return 0;
  }
  
  sub custom_offset_perfdata {
      my ($self, %options) = @_;
  
      if ($self->{result_values}->{state_absolute} ne '*') {
          $self->{output}->perfdata_add(
              label => 'offset', unit => 'ms',
              instances => $self->use_instances(extra_instance => $options{extra_instance}) ? $self->{result_values}->{display_absolute} : undef,
              value => $self->{result_values}->{offset_absolute},
              min => 0
          );
      } else {
          $self->{output}->perfdata_add(
              label => 'offset', unit => 'ms',
              instances => $self->use_instances(extra_instance => $options{extra_instance}) ? $self->{result_values}->{display_absolute} : undef,
              value => $self->{result_values}->{offset_absolute},
              warning => $self->{perfdata}->get_perfdata_for_output(label => 'warning-' . $self->{thlabel}),
              critical => $self->{perfdata}->get_perfdata_for_output(label => 'critical-' . $self->{thlabel}),
              min => 0
          );
      }
  }
  
  sub custom_offset_threshold {
      my ($self, %options) = @_;
  
      if ($self->{result_values}->{state_absolute} ne '*') {
          return 'ok';
      }
      return $self->{perfdata}->threshold_check(value => $self->{result_values}->{offset_absolute}, threshold => [ { label => 'critical-' . $self->{thlabel}, exit_litteral => 'critical' }, { label => 'warning-'. $self->{thlabel}, exit_litteral => 'warning' } ]);
  }
  
  sub set_counters {
      my ($self, %options) = @_;
  
      $self->{maps_counters_type} = [
          { name => 'global', type => 0 },
          { name => 'peers', type => 1, cb_prefix_output => 'prefix_peer_output', message_multiple => 'All peers are ok' },
      ];
  
      $self->{maps_counters}->{global} = [
          { label => 'peers', set => {
                  key_values => [ { name => 'peers' } ],
                  output_template => 'Number of ntp peers : %d',
                  perfdatas => [
                      { label => 'peers', value => 'peers_absolute', template => '%d',
                        min => 0 },
                  ],
              }
          },
      ];
  
      $self->{maps_counters}->{peers} = [
          { label => 'status', threshold => 0, set => {
                  key_values => [ { name => 'state' }, { name => 'type' }, { name => 'reach' }, { name => 'display' } ],
                  closure_custom_calc => $self->can('custom_status_calc'),
                  closure_custom_output => $self->can('custom_status_output'),
                  closure_custom_perfdata => sub { return 0; },
                  closure_custom_threshold_check => \&catalog_status_threshold,
              }
          },
          { label => 'offset', display_ok => 0, set => {
                  key_values => [ { name => 'offset' }, { name => 'state' }, { name => 'display' } ],
                  output_template => 'Offset : %s ms',
                  closure_custom_threshold_check => $self->can('custom_offset_threshold'),
                  closure_custom_perfdata => $self->can('custom_offset_perfdata'),
                  perfdatas => [
                      { label => 'offset', value => 'offset_absolute', template => '%s',
                        min => 0, unit => 'ms', label_extra_instance => 1, instance_use => 'display_absolute' },
                  ],
              }
          },
          { label => 'stratum', display_ok => 0, set => {
                  key_values => [ { name => 'stratum' }, { name => 'display' } ],
                  output_template => 'Stratum : %s',
                  perfdatas => [
                      { label => 'stratum', value => 'stratum_absolute', template => '%s',
                        min => 0, label_extra_instance => 1, instance_use => 'display_absolute' },
                  ],
              }
          },
      ];
  }
  
  sub prefix_peer_output {
      my ($self, %options) = @_;
  
      return "Peer '" . $options{instance_value}->{display} . "' ";
  }
  
  sub new {
      my ($class, %options) = @_;
      my $self = $class->SUPER::new(package => __PACKAGE__, %options);
      bless $self, $class;
  
      $options{options}->add_options(arguments => {
          "hostname:s"        => { name => 'hostname' },
          "remote"            => { name => 'remote' },
          "ssh-option:s@"     => { name => 'ssh_option' },
          "ssh-path:s"        => { name => 'ssh_path' },
          "ssh-command:s"     => { name => 'ssh_command', default => 'ssh' },
          "timeout:s"         => { name => 'timeout', default => 30 },
          "sudo"              => { name => 'sudo' },
          "command:s"         => { name => 'command', default => 'ntpq' },
          "command-path:s"    => { name => 'command_path' },
          "command-options:s" => { name => 'command_options', default => '' },
          "filter-name:s"     => { name => 'filter_name' },
          "filter-state:s"    => { name => 'filter_state' },
          "unknown-status:s"  => { name => 'unknown_status', default => '' },
          "warning-status:s"  => { name => 'warning_status', default => '' },
          "critical-status:s" => { name => 'critical_status', default => '' },
      });
  
      return $self;
  }
  
  sub check_options {
      my ($self, %options) = @_;
      $self->SUPER::check_options(%options);
  
      if ($self->{option_results}->{command} eq 'ntpq') {
          $self->{regex} = '^(\+|\*|\.|\-|\#|x|\<sp\>|o)(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)';
          $self->{option_results}->{command_options} = '-p -n 2>&1';
      } elsif ($self->{option_results}->{command} eq 'chronyc') {
          $self->{regex} = '^(.)(\+|\*|\.|\-|\#|x|\<sp\>)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(.*?)(\d+)(\w+)$';
          $self->{option_results}->{command_options} = '-n sources 2>&1';
      } else {
          $self->{output}->add_option_msg(short_msg => "command '" . $self->{option_results}->{command} . "' not implemented" );
          $self->{output}->option_exit();
      }
      
      $self->change_macros(macros => ['unknown_status', 'warning_status', 'critical_status']);
  }
  
  sub manage_selection {
      my ($self, %options) = @_;
      
      my $stdout = centreon::plugins::misc::execute(
          output => $self->{output},
          options => $self->{option_results},
          sudo => $self->{option_results}->{sudo},
          command => $self->{option_results}->{command},
          command_path => $self->{option_results}->{command_path},
          command_options => $self->{option_results}->{command_options},
      );
      
      $self->{global} = { peers => 0 };
      $self->{peers} = {};
  
      my @lines = split /\n/, $stdout;
      foreach my $line (@lines) {
          if ($line =~ /Connection refused/) {
              $self->{output}->add_option_msg(short_msg => "check ntp.conf and ntp daemon" );
              $self->{output}->option_exit();
          }
          next if ($line !~ /$self->{regex}/);
          
          my ($remote_peer, $peer_fate) = (centreon::plugins::misc::trim($2), centreon::plugins::misc::trim($1));
          if ($self->{option_results}->{command} eq 'chronyc') {
              $remote_peer = centreon::plugins::misc::trim($3);
              $peer_fate = centreon::plugins::misc::trim($2);
          }
          if (defined($self->{option_results}->{filter_name}) && $self->{option_results}->{filter_name} ne '' &&
              $remote_peer !~ /$self->{option_results}->{filter_name}/) {
              $self->{output}->output_add(long_msg => "skipping '" . $remote_peer . "': no matching filter peer name.", debug => 1);
              next;
          }
          if (defined($self->{option_results}->{filter_state}) && $self->{option_results}->{filter_state} ne '' &&
              $peer_fate !~ /$self->{option_results}->{filter_state}/) {
              $self->{output}->output_add(long_msg => "skipping '" . $remote_peer . "': no matching filter peer state.", debug => 1);
              next;
          }
          
          if ($self->{option_results}->{command} eq 'ntpq') {
              my ($refid, $stratum, $type, $last_time, $polling_intervall, $reach, $delay, $offset, $jitter) = ($3, $4, $5, $6, $7, $8, $9, $10, $11);
              $self->{peers}->{$remote_peer} = {
                  display => $remote_peer,
                  state   => $peer_fate,
                  stratum => centreon::plugins::misc::trim($stratum),
                  type    => centreon::plugins::misc::trim($type),
                  reach   => centreon::plugins::misc::trim($reach),
                  offset  => centreon::plugins::misc::trim($offset)
              };
          } elsif ($self->{option_results}->{command} eq 'chronyc') {
              #210 Number of sources = 4
              #MS Name/IP address         Stratum Poll Reach LastRx Last sample               
              #===============================================================================
              #^+ 212.83.187.62                 2   9   377   179   -715us[ -731us] +/-   50ms
              #^- 129.250.35.251                2   8   377    15    -82us[  -99us] +/-   96ms
  
              my ($type, $stratum, $poll, $reach, $lastRX, $offset) = ($1, $4, $5, $6, $7, $9);
              $self->{peers}->{$remote_peer} = {
                  display     => $remote_peer,
                  state       => $peer_fate,
                  stratum     => centreon::plugins::misc::trim($stratum),
                  type        => centreon::plugins::misc::trim($type),
                  reach       => centreon::plugins::misc::trim($reach),
                  offset      => centreon::plugins::misc::trim($offset) * $unit_map_chronyc{centreon::plugins::misc::trim($10)},
              };
          }
          
          $self->{global}->{peers}++;
      }
  }
  
  1;
  
  
  =head1 MODE
  
  Check ntp daemons.
  
  =over 8
  
  =item B<--remote>
  
  Execute command remotely in 'ssh'.
  
  =item B<--hostname>
  
  Hostname to query (need --remote).
  
  =item B<--ssh-option>
  
  Specify multiple options like the user (example: --ssh-option='-l=centreon-engine' --ssh-option='-p=52').
  
  =item B<--ssh-path>
  
  Specify ssh command path (default: none)
  
  =item B<--ssh-command>
  
  Specify ssh command (default: 'ssh'). Useful to use 'plink'.
  
  =item B<--timeout>
  
  Timeout in seconds for the command (Default: 30).
  
  =item B<--sudo>
  
  Use 'sudo' to execute the command.
  
  =item B<--command>
  
  Command to get information (Default: 'ntpq').
  Can also be 'chronyc'.
  
  =item B<--command-path>
  
  Command path (Default: none).
  
  =item B<--filter-name>
  
  Filter peer name (can be a regexp).
  
  =item B<--filter-name>
  
  Filter peer state (can be a regexp).
  
  =item B<--warning-peers>
  
  Threshold warning minimum Amount of NTP-Server
  
  =item B<--critical-peers>
  
  Threshold critical minimum Amount of NTP-Server
  
  =item B<--warning-offset>
  
  Threshold warning Offset deviation value in miliseconds
  
  =item B<--critical-offset>
  
  Threshold critical Offset deviation value in miliseconds
  
  =item B<--warning-stratum>
  
  Threshold warning.
  
  =item B<--critical-stratum>
  
  Threshold critical.
  
  =item B<--unknown-status>
  
  Set warning threshold for status (Default: '').
  Can used special variables like: %{state}, %{rawstate}, %{type}, %{rawtype}, %{reach}, %{display}
  
  =item B<--warning-status>
  
  Set warning threshold for status (Default: '').
  Can used special variables like: %{state}, %{rawstate}, %{type}, %{rawtype}, %{reach}, %{display}
  
  =item B<--critical-status>
  
  Set critical threshold for status (Default: '').
  Can used special variables like: %{state}, %{rawstate}, %{type}, %{rawtype}, %{reach}, %{display}
  
  =back
  
  =cut
OS_LINUX_LOCAL_MODE_NTP

$fatpacked{"os/linux/local/mode/openfiles.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'OS_LINUX_LOCAL_MODE_OPENFILES';
  #
  # Copyright 2019 Centreon (http://www.centreon.com/)
  #
  # Centreon is a full-fledged industry-strength solution that meets
  # the needs in IT infrastructure and application monitoring for
  # service performance.
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  #
  
  package os::linux::local::mode::openfiles;
  
  use base qw(centreon::plugins::templates::counter);
  
  use strict;
  use warnings;
  use centreon::plugins::misc;
  
  sub set_counters {
      my ($self, %options) = @_;
      
      $self->{maps_counters_type} = [
          { name => 'global', type => 0 }
      ];
      
      $self->{maps_counters}->{global} = [
          { label => 'files-open', nlabel => 'system.files.open.count', set => {
                  key_values => [ { name => 'openfiles' } ],
                  output_template => 'current open files: %s',
                  perfdatas => [
                      { value => 'openfiles_absolute', template => '%s', min => 0 },
                  ],
              }
          },
      ];
  }
  
  sub new {
      my ($class, %options) = @_;
      my $self = $class->SUPER::new(package => __PACKAGE__, %options, force_new_perfdata => 1);
      bless $self, $class;
      
      $options{options}->add_options(arguments => {
          'hostname:s'        => { name => 'hostname' },
          'remote'            => { name => 'remote' },
          'ssh-option:s@'     => { name => 'ssh_option' },
          'ssh-path:s'        => { name => 'ssh_path' },
          'ssh-command:s'     => { name => 'ssh_command', default => 'ssh' },
          'timeout:s'         => { name => 'timeout', default => 30 },
          'sudo'              => { name => 'sudo' },
          'command:s'         => { name => 'command', default => 'lsof' },
          'command-path:s'    => { name => 'command_path' },
          'command-options:s' => { name => 'command_options', default => '-a -d ^mem -d ^cwd -d ^rtd -d ^txt -d ^DEL 2>&1' },
          'filter-username:s' => { name => 'filter_username' },
          'filter-appname:s'  => { name => 'filter_appname' },
          'filter-pid:s'      => { name => 'filter_pid' },
      });
  
      return $self;
  }
  
  sub check_options {
      my ($self, %options) = @_;
      $self->SUPER::check_options(%options);
  
      $self->{hostname} = $self->{option_results}->{hostname};
      if (!defined($self->{hostname})) {
          $self->{hostname} = 'me';
      }
  }
  
  sub manage_selection {
      my ($self, %options) = @_;
  
      my ($stdout) = centreon::plugins::misc::execute(
          output => $self->{output},
          options => $self->{option_results},
          sudo => $self->{option_results}->{sudo},
          command => $self->{option_results}->{command},
          command_path => $self->{option_results}->{command_path},
          command_options => $self->{option_results}->{command_options}
      );
  
      $self->{global} = { openfiles => 0 };
      my @lines = split /\n/, $stdout;
      shift @lines;
      foreach (@lines) {
          /^(\S+)\s+(\S+)\s+(\S+)/;
          my ($name, $pid, $user) = ($1, $2, $3);
          next if (defined($self->{option_results}->{filter_username}) && $self->{option_results}->{filter_username} ne '' &&
              $user !~ /$self->{option_results}->{filter_username}/);
          next if (defined($self->{option_results}->{filter_appname}) && $self->{option_results}->{filter_appname} ne '' &&
              $name !~ /$self->{option_results}->{filter_appname}/);
          next if (defined($self->{option_results}->{filter_pid}) && $self->{option_results}->{filter_pid} ne '' &&
              $pid !~ /$self->{option_results}->{filter_pid}/);
  
          $self->{global}->{openfiles}++;
      }
  }
  
  1;
  
  
  =head1 MODE
  
  Check open files.
  
  =over 8
  
  =item B<--remote>
  
  Execute command remotely in 'ssh'.
  
  =item B<--hostname>
  
  Hostname to query (need --remote).
  
  =item B<--ssh-option>
  
  Specify multiple options like the user (example: --ssh-option='-l=centreon-engine' --ssh-option='-p=52').
  
  =item B<--ssh-path>
  
  Specify ssh command path (default: none)
  
  =item B<--ssh-command>
  
  Specify ssh command (default: 'ssh'). Useful to use 'plink'.
  
  =item B<--timeout>
  
  Timeout in seconds for the command (Default: 30).
  
  =item B<--sudo>
  
  Use 'sudo' to execute the command.
  
  =item B<--command>
  
  Command to get information (Default: 'lsof').
  Can be changed if you have output in a file.
  
  =item B<--command-path>
  
  Command path (Default: none).
  
  =item B<--command-options>
  
  Command options (Default: '-a -d ^mem -d ^cwd -d ^rtd -d ^txt -d ^DEL 2>&1').
  
  =item B<--filter-appname>
  
  Filter application name (can be a regexp).
  
  =item B<--filter-username>
  
  Filter username name (can be a regexp).
  
  =item B<--filter-pid>
  
  Filter PID (can be a regexp).
  
  =item B<--warning-*> B<--critical-*>
  
  Thresholds.
  Can be: 'files-open'.
  
  =back
  
  =cut
OS_LINUX_LOCAL_MODE_OPENFILES

$fatpacked{"os/linux/local/mode/packeterrors.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'OS_LINUX_LOCAL_MODE_PACKETERRORS';
  #
  # Copyright 2019 Centreon (http://www.centreon.com/)
  #
  # Centreon is a full-fledged industry-strength solution that meets
  # the needs in IT infrastructure and application monitoring for
  # service performance.
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  #
  
  package os::linux::local::mode::packeterrors;
  
  use base qw(centreon::plugins::templates::counter);
  
  use strict;
  use warnings;
  use centreon::plugins::templates::catalog_functions qw(catalog_status_threshold);
  use Digest::MD5 qw(md5_hex);
  use centreon::plugins::misc;
  
  sub custom_status_output {
      my ($self, %options) = @_;
   
      my $msg = sprintf('status : %s', $self->{result_values}->{status});
      return $msg;
  }
  
  sub custom_status_calc {
      my ($self, %options) = @_;
      
      $self->{result_values}->{status} = $options{new_datas}->{$self->{instance} . '_status'};
      $self->{result_values}->{display} = $options{new_datas}->{$self->{instance} . '_display'};
      return 0;
  }
  
  sub custom_packet_output {
      my ($self, %options) = @_;
  
      my $msg = sprintf("Packet %s %s : %.2f %% (%s)",
          ucfirst($self->{result_values}->{type}),
          ucfirst($self->{result_values}->{label}), 
          $self->{result_values}->{result_prct},
          $self->{result_values}->{diff_value}
      );
      return $msg;
  }
  
  sub custom_packet_calc {
      my ($self, %options) = @_;
  
      $self->{result_values}->{type} = $options{extra_options}->{type};
      $self->{result_values}->{label} = $options{extra_options}->{label_ref};
      $self->{result_values}->{diff_value} = $options{new_datas}->{$self->{instance} . '_' . $self->{result_values}->{type} . '_' . $self->{result_values}->{label}} - 
          $options{old_datas}->{$self->{instance} . '_' . $self->{result_values}->{type} . '_' . $self->{result_values}->{label}};
      my $diff_total = $options{new_datas}->{$self->{instance} . '_total_' . $self->{result_values}->{label}} - 
          $options{old_datas}->{$self->{instance} . '_total_' . $self->{result_values}->{label}};
  
      $self->{result_values}->{result_prct} = ($diff_total == 0) ? 0 : ($self->{result_values}->{diff_value} * 100 / $diff_total);
      $self->{result_values}->{display} = $options{new_datas}->{$self->{instance} . '_display'};
      return 0;
  }
  
  sub set_counters {
      my ($self, %options) = @_;
      
      $self->{maps_counters_type} = [
          { name => 'interface', type => 1, cb_prefix_output => 'prefix_interface_output', message_multiple => 'All interfaces are ok', skipped_code => { -10 => 1 } },
      ];
      
      $self->{maps_counters}->{interface} = [
          { label => 'status', threshold => 0, set => {
                  key_values => [ { name => 'status' }, { name => 'display' } ],
                  closure_custom_calc => $self->can('custom_status_calc'),
                  closure_custom_output => $self->can('custom_status_output'),
                  closure_custom_perfdata => sub { return 0; },
                  closure_custom_threshold_check => \&catalog_status_threshold,
              }
          },
          { label => 'in-discard', set => {
                  key_values => [ { name => 'discard_in', diff => 1 }, { name => 'total_in', diff => 1 }, { name => 'display' } ],
                  closure_custom_calc => $self->can('custom_packet_calc'), closure_custom_calc_extra_options => { type => 'discard', label_ref => 'in' },
                  closure_custom_output => $self->can('custom_packet_output'), output_error_template => 'Discard In : %s',
                  threshold_use => 'result_prct',
                  perfdatas => [
                      { label => 'packets_discard_in', value => 'result_prct', template => '%.2f', min => 0, max => 100,
                        unit => '%', label_extra_instance => 1, instance_use => 'display' },
                  ],
              }
          },
          { label => 'out-discard', set => {
                  key_values => [ { name => 'discard_out', diff => 1 }, { name => 'total_out', diff => 1 }, { name => 'display' } ],
                  closure_custom_calc => $self->can('custom_packet_calc'), closure_custom_calc_extra_options => { type => 'discard', label_ref => 'out' },
                  closure_custom_output => $self->can('custom_packet_output'), output_error_template => 'Discard Out : %s',
                  threshold_use => 'result_prct',
                  perfdatas => [
                      { label => 'packets_discard_out', value => 'result_prct', template => '%.2f', min => 0, max => 100,
                        unit => '%', label_extra_instance => 1, instance_use => 'display' },
                  ],
              }
          },
          { label => 'in-error', set => {
                  key_values => [ { name => 'error_in', diff => 1 }, { name => 'total_in', diff => 1 }, { name => 'display' } ],
                  closure_custom_calc => $self->can('custom_packet_calc'), closure_custom_calc_extra_options => { type => 'error', label_ref => 'in' },
                  closure_custom_output => $self->can('custom_packet_output'), output_error_template => 'Error In : %s',
                  threshold_use => 'result_prct',
                  perfdatas => [
                      { label => 'packets_error_in', value => 'result_prct', template => '%.2f', min => 0, max => 100,
                        unit => '%', label_extra_instance => 1, instance_use => 'display' },
                  ],
              }
          },
          { label => 'out-error', set => {
                  key_values => [ { name => 'error_out', diff => 1 }, { name => 'total_out', diff => 1 }, { name => 'display' } ],
                  closure_custom_calc => $self->can('custom_packet_calc'), closure_custom_calc_extra_options => { type => 'error', label_ref => 'out' },
                  closure_custom_output => $self->can('custom_packet_output'), output_error_template => 'Error In : %s',
                  threshold_use => 'result_prct',
                  perfdatas => [
                      { label => 'packets_error_out', value => 'result_prct', template => '%.2f', min => 0, max => 100,
                        unit => '%', label_extra_instance => 1, instance_use => 'display' },
                  ],
              }
          },
      ];
  }
  
  sub new {
      my ($class, %options) = @_;
      my $self = $class->SUPER::new(package => __PACKAGE__, %options, statefile => 1);
      bless $self, $class;
      
      $options{options}->add_options(arguments => {
          "hostname:s"        => { name => 'hostname' },
          "remote"            => { name => 'remote' },
          "ssh-option:s@"     => { name => 'ssh_option' },
          "ssh-path:s"        => { name => 'ssh_path' },
          "ssh-command:s"     => { name => 'ssh_command', default => 'ssh' },
          "timeout:s"         => { name => 'timeout', default => 30 },
          "sudo"              => { name => 'sudo' },
          "command:s"         => { name => 'command', default => 'ip' },
          "command-path:s"    => { name => 'command_path', default => '/sbin' },
          "command-options:s" => { name => 'command_options', default => '-s addr 2>&1' },
          "filter-state:s"    => { name => 'filter_state', },
          "name:s"            => { name => 'name' },
          "regexp"            => { name => 'use_regexp' },
          "regexp-isensitive" => { name => 'use_regexpi' },
          "no-loopback"       => { name => 'no_loopback', },
          "unknown-status:s"  => { name => 'unknown_status', default => '' },
          "warning-status:s"  => { name => 'warning_status', default => '' },
          "critical-status:s" => { name => 'critical_status', default => '%{status} ne "RU"' },
      });
  
      return $self;
  }
  
  sub prefix_interface_output {
      my ($self, %options) = @_;
  
      return "Interface '" . $options{instance_value}->{display} . "' ";
  }
  
  sub check_options {
      my ($self, %options) = @_;
      $self->SUPER::check_options(%options);
      
      $self->{hostname} = $self->{option_results}->{hostname};
      if (!defined($self->{hostname})) {
          $self->{hostname} = 'me';
      }
      
      $self->change_macros(macros => ['unknown_status', 'warning_status', 'critical_status']);
  }
  
  sub do_selection {
      my ($self, %options) = @_;
  
      my $stdout = centreon::plugins::misc::execute(
          output => $self->{output},
          options => $self->{option_results},
          sudo => $self->{option_results}->{sudo},
          command => $self->{option_results}->{command},
          command_path => $self->{option_results}->{command_path},
          command_options => $self->{option_results}->{command_options}
      );
      
      my $mapping = {
          ifconfig => {
              get_interface => '^(\S+)(.*?)(\n\n|\n$)',
              total => 'RX packets:(\d+).*?TX packets:(\d+)',
              discard_in => 'RX packets:\d+\s+?errors:\d+\s+?dropped:(\d+)',
              discard_out => 'TX packets:\d+\s+?errors:\d+\s+?dropped:(\d+)',
              error_in => 'RX packets:\d+\s+?errors:(\d+)',
              error_out => 'TX packets:\d+\s+?errors:(\d+)',
          },
          iproute => {
              get_interface => '^\d+:\s+(\S+)(.*?)(?=\n\d|\Z$)',
              total => 'RX:\s+bytes\s+packets.*?\d+\s+(\d+).*?TX:\s+bytes\s+packets.*?\d+\s+(\d+)',
              discard_in => 'RX:.*?dropped.*?\d+.*?\d+.*?\d+.*?(\d+)',
              discard_out => 'TX:.*?dropped.*?\d+.*?\d+.*?\d+.*?(\d+)',
              error_in => 'RX:.*?errors.*?\d+.*?\d+.*?(\d+)',
              error_out => 'TX:.*?errors.*?\d+.*?\d+.*?(\d+)',
          },
      };
      
      my $type = 'ifconfig';
      if ($stdout =~ /^\d+:\s+\S+:\s+</ms) {
          $type = 'iproute';
      }
      
      $self->{interface} = {};
      while ($stdout =~ /$mapping->{$type}->{get_interface}/msg) {
          my ($interface_name, $values) = ($1, $2);
          my $states = '';
          $states .= 'R' if ($values =~ /RUNNING|LOWER_UP/ms);
          $states .= 'U' if ($values =~ /UP/ms);
          
          next if (defined($self->{option_results}->{no_loopback}) && $values =~ /LOOPBACK/ms);
          next if (defined($self->{option_results}->{filter_state}) && $self->{option_results}->{filter_state} ne '' &&
                   $states !~ /$self->{option_results}->{filter_state}/);
          
          next if (defined($self->{option_results}->{name}) && defined($self->{option_results}->{use_regexp}) && defined($self->{option_results}->{use_regexpi}) 
              && $interface_name !~ /$self->{option_results}->{name}/i);
          next if (defined($self->{option_results}->{name}) && defined($self->{option_results}->{use_regexp}) && !defined($self->{option_results}->{use_regexpi}) 
              && $interface_name !~ /$self->{option_results}->{name}/);
          next if (defined($self->{option_results}->{name}) && !defined($self->{option_results}->{use_regexp}) && !defined($self->{option_results}->{use_regexpi})
              && $interface_name ne $self->{option_results}->{name});
  
          $self->{interface}->{$interface_name} = {
              display => $interface_name,
              status => $states,
          };
          if ($values =~ /$mapping->{$type}->{total}/msi) {
              $self->{interface}->{$interface_name}->{total_in} = $1;
              $self->{interface}->{$interface_name}->{total_out} = $2;
          }
          
          foreach ('discard_in', 'discard_out', 'error_in', 'error_out') {
              if ($values =~ /$mapping->{$type}->{$_}/msi) {
                  $self->{interface}->{$interface_name}->{$_} = $1;
              }
          }
      }
      
      if (scalar(keys %{$self->{interface}}) <= 0) {
          $self->{output}->add_option_msg(short_msg => "No interface found.");
          $self->{output}->option_exit();
      }
  }
  
  sub manage_selection {
      my ($self, %options) = @_;
  
      $self->do_selection();
      $self->{cache_name} = "cache_linux_local_" . $self->{hostname} . '_' . $self->{mode} . '_' .
          (defined($self->{option_results}->{filter_counters}) ? md5_hex($self->{option_results}->{filter_counters}) : md5_hex('all')) . '_' .
          (defined($self->{option_results}->{name}) ? md5_hex($self->{option_results}->{name}) : md5_hex('all'));
  }
  
  1;
  
  
  =head1 MODE
  
  Check packets errors and discards on interfaces.
  
  =over 8
  
  =item B<--remote>
  
  Execute command remotely in 'ssh'.
  
  =item B<--hostname>
  
  Hostname to query (need --remote).
  
  =item B<--ssh-option>
  
  Specify multiple options like the user (example: --ssh-option='-l=centreon-engine' --ssh-option='-p=52').
  
  =item B<--ssh-path>
  
  Specify ssh command path (default: none)
  
  =item B<--ssh-command>
  
  Specify ssh command (default: 'ssh'). Useful to use 'plink'.
  
  =item B<--timeout>
  
  Timeout in seconds for the command (Default: 30).
  
  =item B<--sudo>
  
  Use 'sudo' to execute the command.
  
  =item B<--command>
  
  Command to get information (Default: 'ip').
  Can be changed if you have output in a file.
  
  =item B<--command-path>
  
  Command path (Default: '/sbin').
  
  =item B<--command-options>
  
  Command options (Default: '-s addr 2>&1').
  
  =item B<--warning-*>
  
  Threshold warning in percent of total packets. Can be:
  in-error, out-error, in-discard, out-discard
  
  =item B<--critical-*>
  
  Threshold critical in percent of total packets. Can be:
  in-error, out-error, in-discard, out-discard
  
  =item B<--name>
  
  Set the interface name (empty means 'check all interfaces')
  
  =item B<--regexp>
  
  Allows to use regexp to filter storage mount point (with option --name).
  
  =item B<--regexp-isensitive>
  
  Allows to use regexp non case-sensitive (with --regexp).
  
  =item B<--filter-state>
  
  Filter filesystem type (regexp can be used).
  
  =item B<--no-loopback>
  
  Don't display loopback interfaces.
  
  =back
  
  =cut
OS_LINUX_LOCAL_MODE_PACKETERRORS

$fatpacked{"os/linux/local/mode/paging.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'OS_LINUX_LOCAL_MODE_PAGING';
  #
  # Copyright 2019 Centreon (http://www.centreon.com/)
  #
  # Centreon is a full-fledged industry-strength solution that meets
  # the needs in IT infrastructure and application monitoring for
  # service performance.
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  #
  
  package os::linux::local::mode::paging;
  
  use base qw(centreon::plugins::templates::counter);
  
  use strict;
  use warnings;
  use Digest::MD5 qw(md5_hex);
  use centreon::plugins::misc;
  
  sub set_counters {
      my ($self, %options) = @_;
      
      $self->{maps_counters_type} = [
          { name => 'global', type => 0, cb_prefix_output => 'prefix_global_output', skipped_code => { -10 => 1 } }
      ];
      
      $self->{maps_counters}->{global} = [
          { label => 'pgpgin', nlabel => 'system.pgpin.usage.bytespersecond', set => {
                  key_values => [ { name => 'pgpgin', diff => 1 } ],
                  output_template => 'pgpgin : %s %s/s', per_second => 1, output_change_bytes => 1,
                  perfdatas => [
                      { value => 'pgpgin_per_second', label => 'pgpgin', template => '%d',
                        unit => 'B/s', min => 0 },
                  ],
              }
          },
          { label => 'pgpgout', nlabel => 'system.pgpgout.usage.bytespersecond', set => {
                  key_values => [ { name => 'pgpgout', diff => 1 } ],
                  output_template => 'pgpgout : %s %s/s', per_second => 1, output_change_bytes => 1,
                  perfdatas => [
                      { value => 'pgpgout_per_second', label => 'pgpgout', template => '%d',
                        unit => 'B/s', min => 0 },
                  ],
              }
          },
          { label => 'pswpin', nlabel => 'system.pswpin.usage.bytespersecond', set => {
                  key_values => [ { name => 'pswpin', diff => 1 } ],
                  output_template => 'pswpin : %s %s/s', per_second => 1, output_change_bytes => 1,
                  perfdatas => [
                      { value => 'pswpin_per_second', label => 'pswpin', template => '%d',
                        unit => 'B/s', min => 0 },
                  ],
              }
          },
          { label => 'pswpout', nlabel => 'system.pswpout.usage.bytespersecond', set => {
                  key_values => [ { name => 'pswpout', diff => 1 } ],
                  output_template => 'pswpout : %s %s/s', per_second => 1, output_change_bytes => 1,
                  perfdatas => [
                      { value => 'pswpout_per_second', label => 'pswpout', template => '%d',
                        unit => 'B/s', min => 0 },
                  ],
              }
          },
          { label => 'pgfault', nlabel => 'system.pgfault.usage.bytespersecond', set => {
                  key_values => [ { name => 'pgfault', diff => 1 } ],
                  output_template => 'pgfault : %s %s/s', per_second => 1, output_change_bytes => 1,
                  perfdatas => [
                      { value => 'pgfault_per_second', label => 'pgfault', template => '%d',
                        unit => 'B/s', min => 0 },
                  ],
              }
          },
          { label => 'pgmajfault', nlabel => 'system.pgmajfault.usage.bytespersecond', set => {
                  key_values => [ { name => 'pgmajfault', diff => 1 } ],
                  output_template => 'pgmajfault : %s %s/s', per_second => 1, output_change_bytes => 1,
                  perfdatas => [
                      { value => 'pgmajfault_per_second', label => 'pgmajfault', template => '%d',
                        unit => 'B/s', min => 0 },
                  ],
              }
          },
      ];
  }
  
  sub new {
      my ($class, %options) = @_;
      my $self = $class->SUPER::new(package => __PACKAGE__, %options, statefile => 1);
      bless $self, $class;
      
      $options{options}->add_options(arguments => {
          "hostname:s"        => { name => 'hostname' },
          "remote"            => { name => 'remote' },
          "ssh-option:s@"     => { name => 'ssh_option' },
          "ssh-path:s"        => { name => 'ssh_path' },
          "ssh-command:s"     => { name => 'ssh_command', default => 'ssh' },
          "timeout:s"         => { name => 'timeout', default => 30 },
          "sudo"              => { name => 'sudo' },
          "command:s"         => { name => 'command', default => 'cat' },
          "command-path:s"    => { name => 'command_path' },
          "command-options:s" => { name => 'command_options', default => '/proc/vmstat 2>&1' },
      });
  
      return $self;
  }
  
  sub prefix_global_output {
      my ($self, %options) = @_;
      
      return 'Paging ';
  }
  
  sub check_options {
      my ($self, %options) = @_;
      $self->SUPER::check_options(%options);
  
      $self->{hostname} = $self->{option_results}->{hostname};
      if (!defined($self->{hostname})) {
          $self->{hostname} = 'me';
      }
  }
  
  sub manage_selection {
      my ($self, %options) = @_;
  
      my ($stdout) = centreon::plugins::misc::execute(
          output => $self->{output},
          options => $self->{option_results},
          sudo => $self->{option_results}->{sudo},
          command => $self->{option_results}->{command},
          command_path => $self->{option_results}->{command_path},
          command_options => $self->{option_results}->{command_options}
      );
          
      $self->{global} = {};
      $self->{global}->{pgpgin} = $stdout =~ /^pgpgin.*?(\d+)/msi ? $1 * 1024 : undef;
      $self->{global}->{pgpgout} = $stdout =~ /^pgpgout.*?(\d+)/msi ? $1 * 1024 : undef;
      $self->{global}->{pswpin} = $stdout =~ /^pswpin.*?(\d+)/msi ? $1 * 1024 : undef;
      $self->{global}->{pswpout} = $stdout =~ /^pswpout.*?(\d+)/msi ? $1 * 1024: undef;
      $self->{global}->{pgfault} = $stdout =~ /^pgfault.*?(\d+)/msi ? $1 * 1024: undef;
      $self->{global}->{pgmajfault} = $stdout =~ /^pgmajfault.*?(\d+)/msi ? $1 * 1014: undef;
      
      $self->{cache_name} = "cache_linux_local_" . $self->{hostname}  . '_' . $self->{mode} . '_' . 
          (defined($self->{option_results}->{filter_counters}) ? md5_hex($self->{option_results}->{filter_counters}) : md5_hex('all'));
  }
  
  1;
  
  
  =head1 MODE
  
  Check paging informations.
  
  =over 8
  
  =item B<--remote>
  
  Execute command remotely in 'ssh'.
  
  =item B<--hostname>
  
  Hostname to query (need --remote).
  
  =item B<--ssh-option>
  
  Specify multiple options like the user (example: --ssh-option='-l=centreon-engine' --ssh-option='-p=52').
  
  =item B<--ssh-path>
  
  Specify ssh command path (default: none)
  
  =item B<--ssh-command>
  
  Specify ssh command (default: 'ssh'). Useful to use 'plink'.
  
  =item B<--timeout>
  
  Timeout in seconds for the command (Default: 30).
  
  =item B<--sudo>
  
  Use 'sudo' to execute the command.
  
  =item B<--command>
  
  Command to get information (Default: 'cat').
  Can be changed if you have output in a file.
  
  =item B<--command-path>
  
  Command path (Default: none).
  
  =item B<--command-options>
  
  Command options (Default: '/proc/vmstat 2>&1').
  
  =item B<--warning-*>
  
  Threshold warning.
  Can be: 'pgpgin', 'pgpgout', 'pswpin', 'pswpout', 'pgfault', 'pgmajfault'.
  
  =item B<--critical-*>
  
  Threshold critical.
  Can be: 'pgpgin', 'pgpgout', 'pswpin', 'pswpout', 'pgfault', 'pgmajfault'.
  
  =back
  
  =cut
OS_LINUX_LOCAL_MODE_PAGING

$fatpacked{"os/linux/local/mode/pendingupdates.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'OS_LINUX_LOCAL_MODE_PENDINGUPDATES';
  #
  # Copyright 2019 Centreon (http://www.centreon.com/)
  #
  # Centreon is a full-fledged industry-strength solution that meets
  # the needs in IT infrastructure and application monitoring for
  # service performance.
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  #
  
  package os::linux::local::mode::pendingupdates;
  
  use base qw(centreon::plugins::templates::counter);
  
  use strict;
  use warnings;
  use centreon::plugins::misc;
  
  sub set_counters {
      my ($self, %options) = @_;
      
      $self->{maps_counters_type} = [
          { name => 'global', type => 0 },
          { name => 'updates', type => 1 }
      ];
      
      $self->{maps_counters}->{global} = [
          { label => 'total', set => {
                  key_values => [ { name => 'total' } ],
                  output_template => 'Number of pending updates : %d',
                  perfdatas => [
                      { label => 'total', value => 'total_absolute', template => '%d',
                        min => 0 },
                  ],
              }
          },
      ];
      
      $self->{maps_counters}->{updates} = [
          { label => 'update', set => {
                  key_values => [ { name => 'package' }, { name => 'version' }, { name => 'repository' } ],
                  closure_custom_calc => $self->can('custom_updates_calc'),
                  closure_custom_output => $self->can('custom_updates_output'),
                  closure_custom_perfdata => sub { return 0; },
              }
          },
      ];
  }
  
  sub custom_updates_output {
      my ($self, %options) = @_;
      
      my $msg = sprintf("Package '%s' [version: %s] [repository: %s]",
                     $self->{result_values}->{package},
                     $self->{result_values}->{version},
                     $self->{result_values}->{repository});
      return $msg;
  }
  
  sub custom_updates_calc {
      my ($self, %options) = @_;
  
      $self->{result_values}->{package} = $options{new_datas}->{$self->{instance} . '_package'};
      $self->{result_values}->{version} = $options{new_datas}->{$self->{instance} . '_version'};
      $self->{result_values}->{repository} = $options{new_datas}->{$self->{instance} . '_repository'};
      return 0;
  }
  
  sub new {
      my ($class, %options) = @_;
      my $self = $class->SUPER::new(package => __PACKAGE__, %options);
      bless $self, $class;
  
      $options{options}->add_options(arguments =>
                                  {
                                    "hostname:s"              => { name => 'hostname' },
                                    "remote"                  => { name => 'remote' },
                                    "ssh-option:s@"           => { name => 'ssh_option' },
                                    "ssh-path:s"              => { name => 'ssh_path' },
                                    "ssh-command:s"           => { name => 'ssh_command', default => 'ssh' },
                                    "timeout:s"               => { name => 'timeout', default => 30 },
                                    "sudo"                    => { name => 'sudo' },
                                    "command:s"               => { name => 'command', default => 'yum' },
                                    "command-path:s"          => { name => 'command_path', },
                                    "command-options:s"       => { name => 'command_options', default => 'check-update 2>&1' },
                                    "filter-package:s"        => { name => 'filter_package' },
                                    "filter-repository:s"     => { name => 'filter_repository' },
                                  });
      $self->{result} = {};
      return $self;
  }
  
  sub check_options {
      my ($self, %options) = @_;
      $self->SUPER::check_options(%options);
  }
  
  sub manage_selection {
      my ($self, %options) = @_;
  
      my ($stdout, $exit_code) = centreon::plugins::misc::execute(
          output => $self->{output},
          options => $self->{option_results},
          sudo => $self->{option_results}->{sudo},
          command => $self->{option_results}->{command},
          command_path => $self->{option_results}->{command_path},
          command_options => $self->{option_results}->{command_options},
          no_quit => 1
      );
  
      $self->{global}->{total} = 0;
      $self->{updates} = {};
      my @lines = split /\n/, $stdout;
      foreach my $line (@lines) {
          next if ($line !~ /^(\S+)\s+(\d+\S+)\s+(\S+)/
              && $line !~ /\s+(\S+)\s+\(\S+\s\=\>\s(\S+)\)/
              && $line !~ /.*\|.*\|\s+(\S+)\s+\|.*\|\s+(\d+\S+)\s+\|.*/);
          my ($package, $version, $repository) = ($1, $2, $3);
          $repository = "-" if (!defined($repository) || $repository eq '');
  
          if (defined($self->{option_results}->{filter_package}) && $self->{option_results}->{filter_package} ne '' &&
              $package !~ /$self->{option_results}->{filter_package}/) {
              $self->{output}->output_add(long_msg => "skipping '" . $package . "': no matching filter.", debug => 1);
              next;
          }
          if (defined($self->{option_results}->{filter_repository}) && $self->{option_results}->{filter_repository} ne '' &&
              $repository !~ /$self->{option_results}->{filter_repository}/) {
              $self->{output}->output_add(long_msg => "skipping '" . $repository . "': no matching filter.", debug => 1);
              next;
          }
          
          $self->{updates}->{$package} = {
              package => $package,
              version => $version,
              repository => $repository,
          };
  
          $self->{global}->{total}++;
      }
  }
  
  1;
  
  
  =head1 MODE
  
  Check pending updates.
  
  =over 8
  
  =item B<--remote>
  
  Execute command remotely in 'ssh'.
  
  =item B<--hostname>
  
  Hostname to query (need --remote).
  
  =item B<--ssh-option>
  
  Specify multiple options like the user (example: --ssh-option='-l=centreon-engine' --ssh-option='-p=52').
  
  =item B<--ssh-path>
  
  Specify ssh command path (Default: none)
  
  =item B<--ssh-command>
  
  Specify ssh command (Default: 'ssh'). Useful to use 'plink'.
  
  =item B<--timeout>
  
  Timeout in seconds for the command (Default: 30).
  
  =item B<--sudo>
  
  Use 'sudo' to execute the command.
  
  =item B<--command>
  
  Command to get information (Default: 'yum').
  Use 'apt-get' for Debian, 'zypper' for SUSE.
  
  =item B<--command-path>
  
  Command path (Default: none).
  
  =item B<--command-options>
  
  Command options (Default: 'check-updates 2>&1').
  Use 'upgrade -sVq 2>&1' for Debian, 'list-updates 2>&1' for SUSE.
  
  =item B<--warning-total>
  
  Threshold warning for total amount of pending updates.
  
  =item B<--critical-total>
  
  Threshold critical for total amount of pending updates.
  
  =item B<--filter-package>
  
  Filter package name.
  
  =item B<--filter-repository>
  
  Filter repository name.
  
  =back
  
  =cut
OS_LINUX_LOCAL_MODE_PENDINGUPDATES

$fatpacked{"os/linux/local/mode/process.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'OS_LINUX_LOCAL_MODE_PROCESS';
  #
  # Copyright 2019 Centreon (http://www.centreon.com/)
  #
  # Centreon is a full-fledged industry-strength solution that meets
  # the needs in IT infrastructure and application monitoring for
  # service performance.
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  #
  
  package os::linux::local::mode::process;
  
  use base qw(centreon::plugins::mode);
  
  use strict;
  use warnings;
  use centreon::plugins::misc;
  
  my %state_map = (
      Z => 'zombie',
      X => 'dead',
      W => 'paging',
      T => 'stopped',
      S => 'InterruptibleSleep',
      R => 'running',
      D => 'UninterrupibleSleep',
      I => 'IdleKernelThread',
  );
  
  sub new {
      my ($class, %options) = @_;
      my $self = $class->SUPER::new(package => __PACKAGE__, %options);
      bless $self, $class;
      
      $options{options}->add_options(arguments => {
          "hostname:s"        => { name => 'hostname' },
          "remote"            => { name => 'remote' },
          "ssh-option:s@"     => { name => 'ssh_option' },
          "ssh-path:s"        => { name => 'ssh_path' },
          "ssh-command:s"     => { name => 'ssh_command', default => 'ssh' },
          "timeout:s"         => { name => 'timeout', default => 30 },
          "sudo"              => { name => 'sudo' },
          "command:s"         => { name => 'command', default => 'ps' },
          "command-path:s"    => { name => 'command_path' },
          "command-options:s" => { name => 'command_options', default => '-e -o state -o ===%t===%p===%P=== -o comm:50 -o ===%a  -w 2>&1' },
          "warning:s"         => { name => 'warning' },
          "critical:s"        => { name => 'critical' },
          "warning-time:s"    => { name => 'warning_time' },
          "critical-time:s"   => { name => 'critical_time' },
          "filter-command:s"  => { name => 'filter_command' },
          "filter-arg:s"      => { name => 'filter_arg' },
          "filter-state:s"    => { name => 'filter_state' },
          "filter-ppid:s"	    => { name => 'filter_ppid' },
      });
  
      $self->{result} = {};
      return $self;
  }
  
  sub check_options {
      my ($self, %options) = @_;
      $self->SUPER::init(%options);
  
      if (($self->{perfdata}->threshold_validate(label => 'warning', value => $self->{option_results}->{warning})) == 0) {
         $self->{output}->add_option_msg(short_msg => "Wrong warning threshold '" . $self->{option_results}->{warning} . "'.");
         $self->{output}->option_exit();
      }
      if (($self->{perfdata}->threshold_validate(label => 'critical', value => $self->{option_results}->{critical})) == 0) {
         $self->{output}->add_option_msg(short_msg => "Wrong critical threshold '" . $self->{option_results}->{critical} . "'.");
         $self->{output}->option_exit();
      }
      if (($self->{perfdata}->threshold_validate(label => 'warning-time', value => $self->{option_results}->{warning_time})) == 0) {
         $self->{output}->add_option_msg(short_msg => "Wrong warning-time threshold '" . $self->{option_results}->{warning_time} . "'.");
         $self->{output}->option_exit();
      }
      if (($self->{perfdata}->threshold_validate(label => 'critical-time', value => $self->{option_results}->{critical_time})) == 0) {
         $self->{output}->add_option_msg(short_msg => "Wrong critical-time threshold '" . $self->{option_results}->{critical_time} . "'.");
         $self->{output}->option_exit();
      }
  }
  
  sub parse_output {
      my ($self, %options) = @_;
  
      my $stdout = centreon::plugins::misc::execute(output => $self->{output},
                                                    options => $self->{option_results},
                                                    sudo => $self->{option_results}->{sudo},
                                                    command => $self->{option_results}->{command},
                                                    command_path => $self->{option_results}->{command_path},
                                                    command_options => $self->{option_results}->{command_options});
      my @lines = split /\n/, $stdout;
      my $line = shift @lines;
      foreach my $line (@lines) {
          next if ($line !~ /^(.*?)===(.*?)===(.*?)===(.*?)===(.*?)===(.*)$/);
          my ($state, $elapsed, $pid, $ppid, $cmd, $args) = ($1, $2, $3, $4, $5, $6);
          
          $self->{result}->{centreon::plugins::misc::trim($pid)} = {
              ppid => centreon::plugins::misc::trim($ppid), 
              state => centreon::plugins::misc::trim($state),
              elapsed => centreon::plugins::misc::trim($elapsed), 
              cmd => centreon::plugins::misc::trim($cmd), 
              args => centreon::plugins::misc::trim($args)
          };
      }
  }
  
  sub check_time {
      my ($self, %options) = @_;
      
      my $time = $self->{result}->{$options{pid}}->{elapsed};
      # Format: [[dd-]hh:]mm:ss
      my @values = split /:/, $time;
      my ($seconds, $min, $lpart) = (pop @values, pop @values, pop @values);
      my $total_seconds_elapsed = $seconds + ($min * 60);
      if (defined($lpart)) {
          my ($day, $hour) = split /-/, $lpart;
          if (defined($hour)) {
              $total_seconds_elapsed += ($hour * 60 * 60);
          }
          if (defined($day)) {
              $total_seconds_elapsed += ($day * 86400);
          }
      }
  
      my $exit = $self->{perfdata}->threshold_check(value => $total_seconds_elapsed, threshold => [ { label => 'critical-time', 'exit_litteral' => 'critical' }, { label => 'warning-time', exit_litteral => 'warning' } ]);
      if (!$self->{output}->is_status(value => $exit, compare => 'ok', litteral => 1)) {
          $self->{output}->output_add(severity => $exit,
                                      short_msg => "Time issue for process " . $self->{result}->{$options{pid}}->{cmd});
      }
  }
  
  sub run {
      my ($self, %options) = @_;
  	
      $self->parse_output();
      
      my $num_processes_match = 0;
      foreach my $pid (keys %{$self->{result}}) {
          next if (defined($self->{option_results}->{filter_command}) && $self->{option_results}->{filter_command} ne '' &&
                   $self->{result}->{$pid}->{cmd} !~ /$self->{option_results}->{filter_command}/);
          next if (defined($self->{option_results}->{filter_arg}) && $self->{option_results}->{filter_arg} ne '' &&
                   $self->{result}->{$pid}->{args} !~ /$self->{option_results}->{filter_arg}/);
          next if (defined($self->{option_results}->{filter_state}) && $self->{option_results}->{filter_state} ne '' &&
                   $state_map{$self->{result}->{$pid}->{state}} !~ /$self->{option_results}->{filter_state}/i);
          next if (defined($self->{option_results}->{filter_ppid}) && $self->{option_results}->{filter_ppid} ne '' &&
                   $self->{result}->{$pid}->{ppid} !~ /$self->{option_results}->{filter_ppid}/);
  		 
          $self->{output}->output_add(long_msg => 'Process: [command => ' . $self->{result}->{$pid}->{cmd} . 
                                                            '] [arg => ' . $self->{result}->{$pid}->{args} .
                                                            '] [state => ' . $state_map{$self->{result}->{$pid}->{state}} . ']');
          $self->check_time(pid => $pid);
          $num_processes_match++;
      }
      
      my $exit = $self->{perfdata}->threshold_check(value => $num_processes_match, threshold => [ { label => 'critical', 'exit_litteral' => 'critical' }, { label => 'warning', exit_litteral => 'warning' } ]);
      $self->{output}->output_add(severity => $exit,
                                  short_msg => "Number of current processes: $num_processes_match");
      $self->{output}->perfdata_add(label => 'nbproc',
                                    value => $num_processes_match,
                                    warning => $self->{perfdata}->get_perfdata_for_output(label => 'warning'),
                                    critical => $self->{perfdata}->get_perfdata_for_output(label => 'critical'),
                                    min => 0);
      
      $self->{output}->display();
      $self->{output}->exit();
  }
  
  1;
  
  
  =head1 MODE
  
  Check linux processes.
  Can filter on commands, arguments and states.
  
  =over 8
  
  =item B<--remote>
  
  Execute command remotely in 'ssh'.
  
  =item B<--hostname>
  
  Hostname to query (need --remote).
  
  =item B<--ssh-option>
  
  Specify multiple options like the user (example: --ssh-option='-l=centreon-engine' --ssh-option='-p=52').
  
  =item B<--ssh-path>
  
  Specify ssh command path (default: none)
  
  =item B<--ssh-command>
  
  Specify ssh command (default: 'ssh'). Useful to use 'plink'.
  
  =item B<--timeout>
  
  Timeout in seconds for the command (Default: 30).
  
  =item B<--sudo>
  
  Use 'sudo' to execute the command.
  
  =item B<--command>
  
  Command to get information (Default: 'ps').
  Can be changed if you have output in a file.
  
  =item B<--command-path>
  
  Command path (Default: none).
  
  =item B<--command-options>
  
  Command options (Default: '-e -o state -o ===%t===%p===%P=== -o comm:50 -o ===%a  -w 2>&1').
  
  =item B<--warning>
  
  Threshold warning (in absolute of processes count. After filters).
  
  =item B<--critical>
  
  Threshold critical (in absolute of processes count. After filters).
  
  =item B<--warning-time>
  
  Threshold warning (in seconds).
  On each processes filtered.
  
  =item B<--critical-time>
  
  Threshold critical (in seconds).
  On each processes filtered.
  
  =item B<--filter-command>
  
  Filter process commands (regexp can be used).
  
  =item B<--filter-arg>
  
  Filter process arguments (regexp can be used).
  
  =item B<--filter-ppid>
  
  Filter process ppid (regexp can be used).
  
  =item B<--filter-state>
  
  Filter process states (regexp can be used).
  You can use: 'zombie', 'dead', 'paging', 'stopped',
  'InterrupibleSleep', 'running', 'UninterrupibleSleep'.
  
  =back
  
  =cut
OS_LINUX_LOCAL_MODE_PROCESS

$fatpacked{"os/linux/local/mode/quota.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'OS_LINUX_LOCAL_MODE_QUOTA';
  #
  # Copyright 2019 Centreon (http://www.centreon.com/)
  #
  # Centreon is a full-fledged industry-strength solution that meets
  # the needs in IT infrastructure and application monitoring for
  # service performance.
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  #
  
  package os::linux::local::mode::quota;
  
  use base qw(centreon::plugins::templates::counter);
  
  use strict;
  use warnings;
  use centreon::plugins::misc;
  
  sub custom_usage_perfdata {
      my ($self, %options) = @_;
  
      my ($extra_label, $unit) = ('', '');
      $unit = 'B' if ($self->{result_values}->{label_ref} eq 'data');
      if (!defined($options{extra_instance}) || $options{extra_instance} != 0) {
          $extra_label .= '_' . $self->{result_values}->{display};
      }
      $self->{output}->perfdata_add(label => $self->{result_values}->{label_ref} . '_used' . $extra_label, unit => $unit,
                                    value => $self->{result_values}->{used},
                                    warning => $self->{perfdata}->get_perfdata_for_output(label => 'warning-' . $self->{result_values}->{warn_label}, total => $self->{result_values}->{total}, cast_int => 1),
                                    critical => $self->{perfdata}->get_perfdata_for_output(label => 'critical-' . $self->{result_values}->{crit_label}, total => $self->{result_values}->{total}, cast_int => 1),
                                    min => 0);
  }
  
  sub custom_usage_threshold {
      my ($self, %options) = @_;
  
      my $exit = $self->{perfdata}->threshold_check(value => $self->{result_values}->{used}, 
          threshold => [ { label => 'critical-' . $self->{result_values}->{crit_label}, exit_litteral => 'critical' }, 
                         { label => 'warning-' . $self->{result_values}->{warn_label}, exit_litteral => 'warning' } ]);
      return $exit;
  }
  
  sub custom_usage_output {
      my ($self, %options) = @_;
  
      my $value = $self->{result_values}->{used} . ' files';
      if ($self->{result_values}->{label_ref} eq 'data') {
          my ($total_used_value, $total_used_unit) = $self->{perfdata}->change_bytes(value => $self->{result_values}->{used});
          $value = $total_used_value . " " . $total_used_unit;
      }
      my ($limit_soft, $limit_hard) = ('', '');
      if (defined($self->{result_values}->{warn_limit}) && $self->{result_values}->{warn_limit} > 0) {
          $limit_soft = sprintf(" (%.2f %% of soft limit)", $self->{result_values}->{used} * 100 / $self->{result_values}->{warn_limit});
      }
      if (defined($self->{result_values}->{crit_limit}) && $self->{result_values}->{crit_limit} > 0) {
          $limit_hard = sprintf(" (%.2f %% of hard limit)", $self->{result_values}->{used} * 100 / $self->{result_values}->{crit_limit});
      }
  
      my $msg = sprintf("%s Used: %s%s%s",
                        ucfirst($self->{result_values}->{label_ref}),
                        $value,
                        $limit_soft, $limit_hard);
      return $msg;
  }
  
  sub custom_usage_calc {
      my ($self, %options) = @_;
  
      $self->{result_values}->{display} = $options{new_datas}->{$self->{instance} . '_display'};
      $self->{result_values}->{label_ref} = $options{extra_options}->{label_ref};
      $self->{result_values}->{used} = $options{new_datas}->{$self->{instance} . '_' . $self->{result_values}->{label_ref} . '_used'};
      
      $self->{result_values}->{warn_label} = $self->{label};
      if (defined($self->{instance_mode}->{option_results}->{'warning-' . $self->{label}}) && $self->{instance_mode}->{option_results}->{'warning-' . $self->{label}} ne '') {
          $self->{result_values}->{warn_limit} = $self->{instance_mode}->{option_results}->{'warning-' . $self->{label}};
      } elsif ($options{new_datas}->{$self->{instance} . '_' . $self->{result_values}->{label_ref} . '_soft'} > 0) {
          $self->{result_values}->{warn_limit} = $options{new_datas}->{$self->{instance} . '_' . $self->{result_values}->{label_ref} . '_soft'};
          $self->{perfdata}->threshold_validate(label => 'warning-' . $self->{label} . '_' . $self->{result_values}->{display}, value => $self->{result_values}->{warn_limit});
          $self->{result_values}->{warn_label} = $self->{label} . '_' . $self->{result_values}->{display};
      }
  
      $self->{result_values}->{crit_label} = $self->{label};
      if (defined($self->{instance_mode}->{option_results}->{'critical-' . $self->{label}}) && $self->{instance_mode}->{option_results}->{'critical-' . $self->{label}} ne '') {
          $self->{result_values}->{crit_limit} = $self->{instance_mode}->{option_results}->{'critical-' . $self->{label}};
      } elsif ($options{new_datas}->{$self->{instance} . '_' . $self->{result_values}->{label_ref} . '_hard'} > 0) {
          $self->{result_values}->{crit_limit} = $options{new_datas}->{$self->{instance} . '_' . $self->{result_values}->{label_ref} . '_hard'} - 1;
          $self->{perfdata}->threshold_validate(label => 'critical-' . $self->{label} . '_' . $self->{result_values}->{display}, value => $self->{result_values}->{crit_limit});
          $self->{result_values}->{crit_label} = $self->{label} . '_' . $self->{result_values}->{display};
      }
      return 0;
  }
  
  sub set_counters {
      my ($self, %options) = @_;
      
      $self->{maps_counters_type} = [
          { name => 'quota', type => 1, cb_prefix_output => 'prefix_quota_output', message_multiple => 'All quotas are ok' }
      ];
      
      $self->{maps_counters}->{quota} = [
          { label => 'data-usage', set => {
                  key_values => [ { name => 'display' }, { name => 'data_used' }, { name => 'data_soft' }, { name => 'data_hard' } ],
                  closure_custom_calc => $self->can('custom_usage_calc'), closure_custom_calc_extra_options => { label_ref => 'data' },
                  closure_custom_output => $self->can('custom_usage_output'),
                  closure_custom_perfdata => $self->can('custom_usage_perfdata'),
                  closure_custom_threshold_check => $self->can('custom_usage_threshold'),
              }
          },
          { label => 'inode-usage', set => {
                  key_values => [ { name => 'display' }, { name => 'inode_used' }, { name => 'inode_soft' }, { name => 'inode_hard' } ],
                  closure_custom_calc => $self->can('custom_usage_calc'), closure_custom_calc_extra_options => { label_ref => 'inode' },
                  closure_custom_output => $self->can('custom_usage_output'),
                  closure_custom_perfdata => $self->can('custom_usage_perfdata'),
                  closure_custom_threshold_check => $self->can('custom_usage_threshold'),
              }
          },
      ];
  }
  
  sub prefix_quota_output {
      my ($self, %options) = @_;
      
      return "Quota '" . $options{instance_value}->{display} . "' ";
  }
  
  sub new {
      my ($class, %options) = @_;
      my $self = $class->SUPER::new(package => __PACKAGE__, %options);
      bless $self, $class;
      
      $options{options}->add_options(arguments => {
          "hostname:s"        => { name => 'hostname' },
          "remote"            => { name => 'remote' },
          "ssh-option:s@"     => { name => 'ssh_option' },
          "ssh-path:s"        => { name => 'ssh_path' },
          "ssh-command:s"     => { name => 'ssh_command', default => 'ssh' },
          "timeout:s"         => { name => 'timeout', default => 30 },
          "sudo"              => { name => 'sudo' },
          "command:s"         => { name => 'command', default => 'repquota' },
          "command-path:s"    => { name => 'command_path' },
          "command-options:s" => { name => 'command_options', default => '-a -i 2>&1' },
          "filter-user:s"     => { name => 'filter_user', },
          "filter-fs:s"       => { name => 'filter_fs', },
      });
  
      $self->{result} = {};
      return $self;
  }
  
  sub manage_selection {
      my ($self, %options) = @_;
  
      my ($stdout, $exit_code) = centreon::plugins::misc::execute(
          output => $self->{output},
          options => $self->{option_results},
          sudo => $self->{option_results}->{sudo},
          command => $self->{option_results}->{command},
          command_path => $self->{option_results}->{command_path},
          command_options => $self->{option_results}->{command_options},
          no_quit => 1
      );
      
      #*** Report for user quotas on device /dev/xxxx
      #Block grace time: 7days; Inode grace time: 7days
      #                   Block limits                File limits
      #User            used    soft    hard  grace    used  soft  hard  grace
      #----------------------------------------------------------------------
      #root      -- 20779412       0       0              5     0     0
      #apache    -- 5721908       0       0          67076     0     0
      
      $self->{quota} = {};
      while ($stdout =~ /^\*\*\*.*?(\S+?)\n(.*?)(?=\*\*\*|\z)/msig) {
          my ($fs, $data) = ($1, $2);
          
          while ($data =~ /^(\S+)\s+(\S+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(.*?)\n/msig) {
              my ($user, $grace_on, $data_used, $data_soft, $data_hard, $usage) = ($1, $2, $3 * 1024, $4 * 1024, $5 * 1024, $6);
              my @values = split /\s+/, $usage;
                          
              shift @values if ($usage =~ /^\+/);
              my ($inode_used, $inode_soft, $inode_hard) = (shift @values, shift @values, shift @values);
              
              my $name = $user . '.' . $fs;
              if (defined($self->{option_results}->{filter_user}) && $self->{option_results}->{filter_user} ne '' &&
                  $user !~ /$self->{option_results}->{filter_user}/) {
                  $self->{output}->output_add(long_msg => "skipping '" . $name . "': no matching filter.", debug => 1);
                  next;
              }
              if (defined($self->{option_results}->{filter_fs}) && $self->{option_results}->{filter_fs} ne '' &&
                  $fs !~ /$self->{option_results}->{filter_fs}/) {
                  $self->{output}->output_add(long_msg => "skipping '" . $name . "': no matching filter.", debug => 1);
                  next;
              }
              
              $self->{quota}->{$name} = { display => $name,
                  data_used => $data_used, data_soft => $data_soft, data_hard => $data_hard,
                  inode_used => $inode_used, inode_soft => $inode_soft, inode_hard => $inode_hard,
              };
          }
      }
  
      if (scalar(keys %{$self->{quota}}) <= 0) {
          if ($exit_code != 0) {
              $self->{output}->output_add(long_msg => "command output:" . $stdout);
          }
          $self->{output}->add_option_msg(short_msg => "No quota found (filters or command issue)");
          $self->{output}->option_exit();
      }
  }
  
  1;
  
  
  =head1 MODE
  
  Check quota usage on partitions.
  
  =over 8
  
  =item B<--remote>
  
  Execute command remotely in 'ssh'.
  
  =item B<--hostname>
  
  Hostname to query (need --remote).
  
  =item B<--ssh-option>
  
  Specify multiple options like the user (example: --ssh-option='-l=centreon-engine' --ssh-option='-p=52').
  
  =item B<--ssh-path>
  
  Specify ssh command path (default: none)
  
  =item B<--ssh-command>
  
  Specify ssh command (default: 'ssh'). Useful to use 'plink'.
  
  =item B<--timeout>
  
  Timeout in seconds for the command (Default: 30).
  
  =item B<--sudo>
  
  Use 'sudo' to execute the command.
  
  =item B<--command>
  
  Command to get information (Default: 'repquota').
  Can be changed if you have output in a file.
  
  =item B<--command-path>
  
  Command path (Default: none).
  
  =item B<--command-options>
  
  Command options (Default: '-a -i 2>&1').
  
  =item B<--warning-*>
  
  Threshold warning.
  Can be: 'inode-usage', 'data-usage'.
  
  =item B<--critical-*>
  
  Threshold critical.
  Can be: 'inode-usage', 'data-usage'.
  
  =item B<--filter-user>
  
  Filter username (regexp can be used).
  
  =item B<--filter-fs>
  
  Filter filesystem (regexp can be used).
  
  =back
  
  =cut
OS_LINUX_LOCAL_MODE_QUOTA

$fatpacked{"os/linux/local/mode/storage.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'OS_LINUX_LOCAL_MODE_STORAGE';
  #
  # Copyright 2019 Centreon (http://www.centreon.com/)
  #
  # Centreon is a full-fledged industry-strength solution that meets
  # the needs in IT infrastructure and application monitoring for
  # service performance.
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  #
  
  package os::linux::local::mode::storage;
  
  use base qw(centreon::plugins::templates::counter);
  
  use strict;
  use warnings;
  use centreon::plugins::misc;
  
  sub custom_usage_perfdata {
      my ($self, %options) = @_;
  
      my $label = 'used';
      my $value_perf = $self->{result_values}->{used};
      if (defined($self->{instance_mode}->{option_results}->{free})) {
          $label = 'free';
          $value_perf = $self->{result_values}->{free};
      }
  
      my %total_options = ();
      if ($self->{instance_mode}->{option_results}->{units} eq '%') {
          $total_options{total} = $self->{result_values}->{total};
          $total_options{cast_int} = 1;
      }
  
      $self->{output}->perfdata_add(
          label => $label, unit => 'B',
          instances => $self->use_instances(extra_instance => $options{extra_instance}) ? $self->{result_values}->{display} : undef,
          value => $value_perf,
          warning => $self->{perfdata}->get_perfdata_for_output(label => 'warning-' . $self->{thlabel}, %total_options),
          critical => $self->{perfdata}->get_perfdata_for_output(label => 'critical-' . $self->{thlabel}, %total_options),
          min => 0, max => $self->{result_values}->{total}
      );
  }
  
  sub custom_usage_threshold {
      my ($self, %options) = @_;
  
      my ($exit, $threshold_value);
      $threshold_value = $self->{result_values}->{used};
      $threshold_value = $self->{result_values}->{free} if (defined($self->{instance_mode}->{option_results}->{free}));
      if ($self->{instance_mode}->{option_results}->{units} eq '%') {
          $threshold_value = $self->{result_values}->{prct_used};
          $threshold_value = $self->{result_values}->{prct_free} if (defined($self->{instance_mode}->{option_results}->{free}));
      }
      $exit = $self->{perfdata}->threshold_check(value => $threshold_value, threshold => [ { label => 'critical-' . $self->{thlabel}, exit_litteral => 'critical' }, { label => 'warning-'. $self->{thlabel}, exit_litteral => 'warning' } ]);
      return $exit;
  }
  
  sub custom_usage_output {
      my ($self, %options) = @_;
  
      my ($total_size_value, $total_size_unit) = $self->{perfdata}->change_bytes(value => $self->{result_values}->{total});
      my ($total_used_value, $total_used_unit) = $self->{perfdata}->change_bytes(value => $self->{result_values}->{used});
      my ($total_free_value, $total_free_unit) = $self->{perfdata}->change_bytes(value => $self->{result_values}->{free});
      my $msg = sprintf("Usage Total: %s Used: %s (%.2f%%) Free: %s (%.2f%%)",
                     $total_size_value . " " . $total_size_unit,
                     $total_used_value . " " . $total_used_unit, $self->{result_values}->{prct_used},
                     $total_free_value . " " . $total_free_unit, $self->{result_values}->{prct_free});
      return $msg;
  }
  
  sub custom_usage_calc {
      my ($self, %options) = @_;
  
      if ($options{new_datas}->{$self->{instance} . '_total'} == 0) {
          $self->{error_msg} = "total size is 0";
          return -2;
      }
      $self->{result_values}->{display} = $options{new_datas}->{$self->{instance} . '_display'};
      $self->{result_values}->{total} = $options{new_datas}->{$self->{instance} . '_total'};
      $self->{result_values}->{used} = $options{new_datas}->{$self->{instance} . '_used'};
      $self->{result_values}->{free} = $self->{result_values}->{total} - $self->{result_values}->{used};
      $self->{result_values}->{prct_used} = $self->{result_values}->{used} * 100 / $self->{result_values}->{total};
      $self->{result_values}->{prct_free} = 100 - $self->{result_values}->{prct_used};
  
      return 0;
  }
  
  sub set_counters {
      my ($self, %options) = @_;
      
      $self->{maps_counters_type} = [
          { name => 'disks', type => 1, cb_prefix_output => 'prefix_disks_output', message_multiple => 'All storages are ok' }
      ];
      
      $self->{maps_counters}->{disks} = [
          { label => 'usage', set => {
                  key_values => [ { name => 'display' }, { name => 'used' }, { name => 'total' } ],
                  closure_custom_calc => $self->can('custom_usage_calc'),
                  closure_custom_output => $self->can('custom_usage_output'),
                  closure_custom_perfdata => $self->can('custom_usage_perfdata'),
                  closure_custom_threshold_check => $self->can('custom_usage_threshold'),
              }
          },
      ];
  }
  
  sub prefix_disks_output {
      my ($self, %options) = @_;
      
      return "Storage '" . $options{instance_value}->{display} . "' ";
  }
  
  sub new {
      my ($class, %options) = @_;
      my $self = $class->SUPER::new(package => __PACKAGE__, %options);
      bless $self, $class;
      
      $options{options}->add_options(arguments => {
          "hostname:s"        => { name => 'hostname' },
          "remote"            => { name => 'remote' },
          "ssh-option:s@"     => { name => 'ssh_option' },
          "ssh-path:s"        => { name => 'ssh_path' },
          "ssh-command:s"     => { name => 'ssh_command', default => 'ssh' },
          "timeout:s"         => { name => 'timeout', default => 30 },
          "sudo"              => { name => 'sudo' },
          "command:s"         => { name => 'command', default => 'df' },
          "command-path:s"    => { name => 'command_path' },
          "command-options:s" => { name => 'command_options', default => '-P -k -T 2>&1' },
          "filter-type:s"     => { name => 'filter_type', },
          "filter-fs:s"       => { name => 'filter_fs', },
          "units:s"           => { name => 'units', default => '%' },
          "free"              => { name => 'free' },
          "name:s"            => { name => 'name' },
          "regexp"              => { name => 'use_regexp' },
          "regexp-isensitive"   => { name => 'use_regexpi' },
          "space-reservation:s" => { name => 'space_reservation' },
      });
  
      $self->{result} = {};
      return $self;
  }
  
  sub manage_selection {
      my ($self, %options) = @_;
  
      my ($stdout, $exit_code) = centreon::plugins::misc::execute(
          output => $self->{output},
          options => $self->{option_results},
          sudo => $self->{option_results}->{sudo},
          command => $self->{option_results}->{command},
          command_path => $self->{option_results}->{command_path},
          command_options => $self->{option_results}->{command_options},
          no_quit => 1
      );
      $self->{disks} = {};
      my @lines = split /\n/, $stdout;
      foreach my $line (@lines) {
          next if ($line !~ /^(\S+)\s+(\S+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\S+)\s+(.*)/);
          my ($fs, $type, $size, $used, $available, $percent, $mount) = ($1, $2, $3, $4, $5, $6, $7);
          
          next if (defined($self->{option_results}->{filter_fs}) && $self->{option_results}->{filter_fs} ne '' &&
                   $fs !~ /$self->{option_results}->{filter_fs}/);
          next if (defined($self->{option_results}->{filter_type}) && $self->{option_results}->{filter_type} ne '' &&
                   $type !~ /$self->{option_results}->{filter_type}/);
          
          next if (defined($self->{option_results}->{name}) && defined($self->{option_results}->{use_regexp}) && defined($self->{option_results}->{use_regexpi}) 
              && $mount !~ /$self->{option_results}->{name}/i);
          next if (defined($self->{option_results}->{name}) && defined($self->{option_results}->{use_regexp}) && !defined($self->{option_results}->{use_regexpi}) 
              && $mount !~ /$self->{option_results}->{name}/);
          next if (defined($self->{option_results}->{name}) && !defined($self->{option_results}->{use_regexp}) && !defined($self->{option_results}->{use_regexpi})
              && $mount ne $self->{option_results}->{name});
          
          $size *= 1024;
          if (defined($self->{option_results}->{space_reservation})) {
              $size = int($size - ($self->{option_results}->{space_reservation} * $size / 100));
          }
          $self->{disks}->{$mount} = { display => $mount, fs => $fs, type => $type, total => $size, used => $used * 1024 };
      }
      
      if (scalar(keys %{$self->{disks}}) <= 0) {
          if ($exit_code != 0) {
              $self->{output}->output_add(long_msg => "command output:" . $stdout);
          }
          $self->{output}->add_option_msg(short_msg => "No storage found (filters or command issue)");
          $self->{output}->option_exit();
      }
  }
  
  1;
  
  
  =head1 MODE
  
  Check storage usages.
  
  =over 8
  
  =item B<--remote>
  
  Execute command remotely in 'ssh'.
  
  =item B<--hostname>
  
  Hostname to query (need --remote).
  
  =item B<--ssh-option>
  
  Specify multiple options like the user (example: --ssh-option='-l=centreon-engine' --ssh-option='-p=52').
  
  =item B<--ssh-path>
  
  Specify ssh command path (default: none)
  
  =item B<--ssh-command>
  
  Specify ssh command (default: 'ssh'). Useful to use 'plink'.
  
  =item B<--timeout>
  
  Timeout in seconds for the command (Default: 30).
  
  =item B<--sudo>
  
  Use 'sudo' to execute the command.
  
  =item B<--command>
  
  Command to get information (Default: 'df').
  Can be changed if you have output in a file.
  
  =item B<--command-path>
  
  Command path (Default: none).
  
  =item B<--command-options>
  
  Command options (Default: '-P -k -T 2>&1').
  
  =item B<--warning-usage>
  
  Threshold warning.
  
  =item B<--critical-usage>
  
  Threshold critical.
  
  =item B<--units>
  
  Units of thresholds (Default: '%') ('%', 'B').
  
  =item B<--free>
  
  Thresholds are on free space left.
  
  =item B<--name>
  
  Set the storage mount point (empty means 'check all storages')
  
  =item B<--regexp>
  
  Allows to use regexp to filter storage mount point (with option --name).
  
  =item B<--regexp-isensitive>
  
  Allows to use regexp non case-sensitive (with --regexp).
  
  =item B<--filter-type>
  
  Filter filesystem type (regexp can be used).
  
  =item B<--filter-fs>
  
  Filter filesystem (regexp can be used).
  
  =item B<--space-reservation>
  
  Some filesystem has space reserved (like ext4 for root).
  The value is in percent of total (Default: none).
  
  =back
  
  =cut
OS_LINUX_LOCAL_MODE_STORAGE

$fatpacked{"os/linux/local/mode/swap.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'OS_LINUX_LOCAL_MODE_SWAP';
  #
  # Copyright 2019 Centreon (http://www.centreon.com/)
  #
  # Centreon is a full-fledged industry-strength solution that meets
  # the needs in IT infrastructure and application monitoring for
  # service performance.
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  #
  
  package os::linux::local::mode::swap;
  
  use base qw(centreon::plugins::mode);
  
  use strict;
  use warnings;
  use centreon::plugins::misc;
  
  sub new {
      my ($class, %options) = @_;
      my $self = $class->SUPER::new(package => __PACKAGE__, %options);
      bless $self, $class;
      
      $options{options}->add_options(arguments =>
                                  { 
                                    "hostname:s"        => { name => 'hostname' },
                                    "remote"            => { name => 'remote' },
                                    "ssh-option:s@"     => { name => 'ssh_option' },
                                    "ssh-path:s"        => { name => 'ssh_path' },
                                    "ssh-command:s"     => { name => 'ssh_command', default => 'ssh' },
                                    "timeout:s"         => { name => 'timeout', default => 30 },
                                    "sudo"              => { name => 'sudo' },
                                    "command:s"         => { name => 'command', default => 'cat' },
                                    "command-path:s"    => { name => 'command_path' },
                                    "command-options:s" => { name => 'command_options', default => '/proc/meminfo 2>&1' },
                                    "warning:s"         => { name => 'warning', },
                                    "critical:s"        => { name => 'critical', },
                                    "no-swap:s"               => { name => 'no_swap' },
                                  });
      $self->{no_swap} = 'critical';
      return $self;
  }
  
  sub check_options {
      my ($self, %options) = @_;
      $self->SUPER::init(%options);
  
      if (($self->{perfdata}->threshold_validate(label => 'warning', value => $self->{option_results}->{warning})) == 0) {
         $self->{output}->add_option_msg(short_msg => "Wrong warning threshold '" . $self->{option_results}->{warning} . "'.");
         $self->{output}->option_exit();
      }
      if (($self->{perfdata}->threshold_validate(label => 'critical', value => $self->{option_results}->{critical})) == 0) {
         $self->{output}->add_option_msg(short_msg => "Wrong critical threshold '" . $self->{option_results}->{critical} . "'.");
         $self->{output}->option_exit();
      }
      if (defined($self->{option_results}->{no_swap}) && $self->{option_results}->{no_swap} ne '') {
          if ($self->{output}->is_litteral_status(status => $self->{option_results}->{no_swap}) == 0) {
              $self->{output}->add_option_msg(short_msg => "Wrong --no-swap status '" . $self->{option_results}->{no_swap} . "'.");
              $self->{output}->option_exit();
          }
           $self->{no_swap} = $self->{option_results}->{no_swap};
      }
  }
  
  sub run {
      my ($self, %options) = @_;
  
      my $stdout = centreon::plugins::misc::execute(output => $self->{output},
                                                    options => $self->{option_results},
                                                    sudo => $self->{option_results}->{sudo},
                                                    command => $self->{option_results}->{command},
                                                    command_path => $self->{option_results}->{command_path},
                                                    command_options => $self->{option_results}->{command_options});
      
      my ($total_size, $swap_free);
      foreach (split(/\n/, $stdout)) {
          if (/^SwapTotal:\s+(\d+)/i) {
              $total_size = $1 * 1024;
          } elsif (/^SwapFree:\s+(\d+)/i) {
              $swap_free = $1 * 1024;
          }
      }
      
      if (!defined($total_size) || !defined($swap_free)) {
          $self->{output}->add_option_msg(short_msg => "Some informations missing.");
          $self->{output}->option_exit();
      }
      if ($total_size == 0) {
          $self->{output}->output_add(severity => $self->{no_swap},
                                      short_msg => 'No active swap.');
          $self->{output}->display();
          $self->{output}->exit();
      }
      
      my $swap_used = $total_size - $swap_free;
      
      my $prct_used = $swap_used * 100 / $total_size;
      my $exit = $self->{perfdata}->threshold_check(value => $prct_used, threshold => [ { label => 'critical', 'exit_litteral' => 'critical' }, { label => 'warning', exit_litteral => 'warning' } ]);
  
      my ($total_value, $total_unit) = $self->{perfdata}->change_bytes(value => $total_size);
      my ($swap_used_value, $swap_used_unit) = $self->{perfdata}->change_bytes(value => $swap_used);
      my ($swap_free_value, $swap_free_unit) = $self->{perfdata}->change_bytes(value => ($total_size - $swap_used));
      
      $self->{output}->output_add(severity => $exit,
                                  short_msg => sprintf("Swap Total: %s Used: %s (%.2f%%) Free: %s (%.2f%%)",
                                              $total_value . " " . $total_unit,
                                              $swap_used_value . " " . $swap_used_unit, $prct_used,
                                              $swap_free_value . " " . $swap_free_unit, (100 - $prct_used)));
      
      $self->{output}->perfdata_add(label => "used", unit => 'B',
                                    value => $swap_used,
                                    warning => $self->{perfdata}->get_perfdata_for_output(label => 'warning', total => $total_size),
                                    critical => $self->{perfdata}->get_perfdata_for_output(label => 'critical', total => $total_size),
                                    min => 0, max => $total_size);
   
      $self->{output}->display();
      $self->{output}->exit();
  }
  
  1;
  
  
  =head1 MODE
  
  Check swap memory (need '/proc/meminfo' file).
  
  =over 8
  
  =item B<--warning>
  
  Threshold warning in percent.
  
  =item B<--critical>
  
  Threshold critical in percent.
  
  =item B<--no-swap>
  
  Threshold if no active swap (default: 'critical').
  
  =item B<--remote>
  
  Execute command remotely in 'ssh'.
  
  =item B<--hostname>
  
  Hostname to query (need --remote).
  
  =item B<--ssh-option>
  
  Specify multiple options like the user (example: --ssh-option='-l=centreon-engine' --ssh-option='-p=52').
  
  =item B<--ssh-path>
  
  Specify ssh command path (default: none)
  
  =item B<--ssh-command>
  
  Specify ssh command (default: 'ssh'). Useful to use 'plink'.
  
  =item B<--timeout>
  
  Timeout in seconds for the command (Default: 30).
  
  =item B<--sudo>
  
  Use 'sudo' to execute the command.
  
  =item B<--command>
  
  Command to get information (Default: 'cat').
  Can be changed if you have output in a file.
  
  =item B<--command-path>
  
  Command path (Default: none).
  
  =item B<--command-options>
  
  Command options (Default: '/proc/meminfo 2>&1').
  
  =back
  
  =cut
OS_LINUX_LOCAL_MODE_SWAP

$fatpacked{"os/linux/local/mode/systemdscstatus.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'OS_LINUX_LOCAL_MODE_SYSTEMDSCSTATUS';
  #
  # Copyright 2019 Centreon (http://www.centreon.com/)
  #
  # Centreon is a full-fledged industry-strength solution that meets
  # the needs in IT infrastructure and application monitoring for
  # service performance.
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  #
  
  package os::linux::local::mode::systemdscstatus;
  
  use base qw(centreon::plugins::templates::counter);
  
  use strict;
  use warnings;
  use centreon::plugins::misc;
  use centreon::plugins::templates::catalog_functions qw(catalog_status_threshold);
  
  sub custom_status_output {
      my ($self, %options) = @_;
      my $msg = 'status : ' . $self->{result_values}->{load} . '/' . $self->{result_values}->{active} . '/' . $self->{result_values}->{sub};
  
      return $msg;
  }
  
  sub custom_status_calc {
      my ($self, %options) = @_;
      
      $self->{result_values}->{load} = $options{new_datas}->{$self->{instance} . '_load'};
      $self->{result_values}->{active} = $options{new_datas}->{$self->{instance} . '_active'};
      $self->{result_values}->{sub} = $options{new_datas}->{$self->{instance} . '_sub'};
      $self->{result_values}->{display} = $options{new_datas}->{$self->{instance} . '_display'};
      return 0;
  }
  
  sub set_counters {
      my ($self, %options) = @_;
      
      $self->{maps_counters_type} = [
          { name => 'global', type => 0 },
          { name => 'sc', type => 1, cb_prefix_output => 'prefix_sc_output', message_multiple => 'All services are ok' }
      ];
      
      $self->{maps_counters}->{global} = [
          { label => 'total-running', set => {
                  key_values => [ { name => 'running' }, { name => 'total' } ],
                  output_template => 'Total Running: %s',
                  perfdatas => [
                      { label => 'total_running', value => 'running_absolute', template => '%s', 
                        min => 0, max => 'total_absolute' },
                  ],
              }
          },
          { label => 'total-failed', set => {
                  key_values => [ { name => 'failed' }, { name => 'total' } ],
                  output_template => 'Total Failed: %s',
                  perfdatas => [
                      { label => 'total_failed', value => 'failed_absolute', template => '%s', 
                        min => 0, max => 'total_absolute' },
                  ],
              }
          },
          { label => 'total-dead', set => {
                  key_values => [ { name => 'dead' }, { name => 'total' } ],
                  output_template => 'Total Dead: %s',
                  perfdatas => [
                      { label => 'total_dead', value => 'dead_absolute', template => '%s', 
                        min => 0, max => 'total_absolute' },
                  ],
              }
          },
          { label => 'total-exited', set => {
                  key_values => [ { name => 'exited' }, { name => 'total' } ],
                  output_template => 'Total Exited: %s',
                  perfdatas => [
                      { label => 'total_exited', value => 'exited_absolute', template => '%s', 
                        min => 0, max => 'total_absolute' },
                  ],
              }
          },
      ];
      $self->{maps_counters}->{sc} = [
          { label => 'status', threshold => 0, set => {
                  key_values => [ { name => 'load' }, { name => 'active' },  { name => 'sub' }, { name => 'display' } ],
                  closure_custom_calc => $self->can('custom_status_calc'),
                  closure_custom_output => $self->can('custom_status_output'),
                  closure_custom_perfdata => sub { return 0; },
                  closure_custom_threshold_check => \&catalog_status_threshold,
              }
          },
      ];
  }
  
  sub new {
      my ($class, %options) = @_;
      my $self = $class->SUPER::new(package => __PACKAGE__, %options);
      bless $self, $class;
      
      $options{options}->add_options(arguments =>
                                  { 
                                    "hostname:s"        => { name => 'hostname' },
                                    "remote"            => { name => 'remote' },
                                    "ssh-option:s@"     => { name => 'ssh_option' },
                                    "ssh-path:s"        => { name => 'ssh_path' },
                                    "ssh-command:s"     => { name => 'ssh_command', default => 'ssh' },
                                    "timeout:s"         => { name => 'timeout', default => 30 },
                                    "sudo"              => { name => 'sudo' },
                                    "command:s"         => { name => 'command', default => 'systemctl' },
                                    "command-path:s"    => { name => 'command_path' },
                                    "command-options:s" => { name => 'command_options', default => '-a --no-pager --no-legend' },
                                    "filter-name:s"           => { name => 'filter_name' },
                                    "warning-status:s"        => { name => 'warning_status', default => '' },
                                    "critical-status:s"       => { name => 'critical_status', default => '%{active} =~ /failed/i' },
                                  });
      
      return $self;
  }
  
  sub check_options {
      my ($self, %options) = @_;
      $self->SUPER::check_options(%options);
  
      $self->change_macros(macros => ['warning_status', 'critical_status']);
  }
  
  sub prefix_sc_output {
      my ($self, %options) = @_;
      
      return "Service '" . $options{instance_value}->{display} . "' ";
  }
  
  sub manage_selection {
      my ($self, %options) = @_;
  
      my ($stdout) = centreon::plugins::misc::execute(output => $self->{output},
                                                      options => $self->{option_results},
                                                      sudo => $self->{option_results}->{sudo},
                                                      command => $self->{option_results}->{command},
                                                      command_path => $self->{option_results}->{command_path},
                                                      command_options => $self->{option_results}->{command_options});    
      
      $self->{global} = { running => 0, exited => 0, failed => 0, dead => 0, total => 0 };
      $self->{sc} = {};
      #auditd.service                                                        loaded    active   running Security Auditing Service
      #avahi-daemon.service                                                  loaded    active   running Avahi mDNS/DNS-SD Stack
      #brandbot.service                                                      loaded    inactive dead    Flexible Branding Service
      while ($stdout =~ /^(\S+)\s+(\S+)\s+(\S+)\s+(\S+)/msig) {
          my ($name, $load, $active, $sub) = ($1, $2, $3, lc($4));
          
          if (defined($self->{option_results}->{filter_name}) && $self->{option_results}->{filter_name} ne '' &&
              $name !~ /$self->{option_results}->{filter_name}/) {
              $self->{output}->output_add(long_msg => "skipping '" . $name . "': no matching filter.", debug => 1);
              next;
          }
          
          $self->{sc}->{$name} = { display => $name, load => $load, active => $active, sub => $sub };
          $self->{global}->{$sub} += 1 if (defined($self->{global}->{$sub}));
          $self->{global}->{total} += 1;
      }
      
      if (scalar(keys %{$self->{sc}}) <= 0) {
          $self->{output}->add_option_msg(short_msg => "No service found.");
          $self->{output}->option_exit();
      }
  }
  
  1;
  
  
  =head1 MODE
  
  Check systemd services status.
  
  =over 8
  
  =item B<--remote>
  
  Execute command remotely in 'ssh'.
  
  =item B<--hostname>
  
  Hostname to query (need --remote).
  
  =item B<--ssh-option>
  
  Specify multiple options like the user (example: --ssh-option='-l=centreon-engine' --ssh-option='-p=52').
  
  =item B<--ssh-path>
  
  Specify ssh command path (default: none)
  
  =item B<--ssh-command>
  
  Specify ssh command (default: 'ssh'). Useful to use 'plink'.
  
  =item B<--timeout>
  
  Timeout in seconds for the command (Default: 30).
  
  =item B<--sudo>
  
  Use 'sudo' to execute the command.
  
  =item B<--command>
  
  Command to get information (Default: 'systemctl').
  Can be changed if you have output in a file.
  
  =item B<--command-path>
  
  Command path (Default: none).
  
  =item B<--command-options>
  
  Command options (Default: '-a --no-pager --no-legend').
  
  =item B<--filter-name>
  
  Filter service name (can be a regexp).
  
  =item B<--warning-*>
  
  Threshold warning.
  Can be: 'total-running', 'total-dead', 'total-exited',
  'total-failed'.
  
  =item B<--critical-*>
  
  Threshold critical.
  Can be: 'total-running', 'total-dead', 'total-exited',
  'total-failed'.
  
  =item B<--warning-status>
  
  Set warning threshold for status.
  Can used special variables like: %{display}, %{active}, %{sub}, %{load}
  
  
  =item B<--critical-status>
  
  Set critical threshold for status (Default: '%{active} =~ /failed/i').
  Can used special variables like: %{display}, %{active}, %{sub}, %{load}
  
  =back
  
  =cut
OS_LINUX_LOCAL_MODE_SYSTEMDSCSTATUS

$fatpacked{"os/linux/local/mode/traffic.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'OS_LINUX_LOCAL_MODE_TRAFFIC';
  #
  # Copyright 2019 Centreon (http://www.centreon.com/)
  #
  # Centreon is a full-fledged industry-strength solution that meets
  # the needs in IT infrastructure and application monitoring for
  # service performance.
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  #
  
  package os::linux::local::mode::traffic;
  
  use base qw(centreon::plugins::templates::counter);
  
  use strict;
  use warnings;
  use centreon::plugins::templates::catalog_functions qw(catalog_status_threshold);
  use Digest::MD5 qw(md5_hex);
  use centreon::plugins::misc;
  
  sub custom_status_output {
      my ($self, %options) = @_;
   
      my $msg = sprintf('status : %s', $self->{result_values}->{status});
      return $msg;
  }
  
  sub custom_status_calc {
      my ($self, %options) = @_;
      
      $self->{result_values}->{status} = $options{new_datas}->{$self->{instance} . '_status'};
      $self->{result_values}->{display} = $options{new_datas}->{$self->{instance} . '_display'};
      return 0;
  }
  
  sub custom_traffic_perfdata {
      my ($self, %options) = @_;
  
      my ($warning, $critical);
      if ($self->{instance_mode}->{option_results}->{units} eq '%' && defined($self->{result_values}->{speed})) {
          $warning = $self->{perfdata}->get_perfdata_for_output(label => 'warning-' . $self->{thlabel}, total => $self->{result_values}->{speed}, cast_int => 1);
          $critical = $self->{perfdata}->get_perfdata_for_output(label => 'critical-' . $self->{thlabel}, total => $self->{result_values}->{speed}, cast_int => 1);
      } elsif ($self->{instance_mode}->{option_results}->{units} eq 'b/s') {
          $warning = $self->{perfdata}->get_perfdata_for_output(label => 'warning-' . $self->{thlabel});
          $critical = $self->{perfdata}->get_perfdata_for_output(label => 'critical-' . $self->{thlabel});
      }
  
      $self->{output}->perfdata_add(
          label => 'traffic_' . $self->{result_values}->{label}, unit => 'b/s',
          instances => $self->use_instances(extra_instance => $options{extra_instance}) ? $self->{result_values}->{display} : undef,
          value => sprintf("%.2f", $self->{result_values}->{traffic_per_seconds}),
          warning => $warning,
          critical => $critical,
          min => 0, max => $self->{result_values}->{speed}
      );
  }
  
  sub custom_traffic_threshold {
      my ($self, %options) = @_;
  
      my $exit = 'ok';
      if ($self->{instance_mode}->{option_results}->{units} eq '%' && defined($self->{result_values}->{speed})) {
          $exit = $self->{perfdata}->threshold_check(value => $self->{result_values}->{traffic_prct}, threshold => [ { label => 'critical-' . $self->{thlabel}, exit_litteral => 'critical' }, { label => 'warning-' . $self->{thlabel}, exit_litteral => 'warning' } ]);
      } elsif ($self->{instance_mode}->{option_results}->{units} eq 'b/s') {
          $exit = $self->{perfdata}->threshold_check(value => $self->{result_values}->{traffic_per_seconds}, threshold => [ { label => 'critical-' . $self->{thlabel}, exit_litteral => 'critical' }, { label => 'warning-' . $self->{thlabel}, exit_litteral => 'warning' } ]);
      }
      return $exit;
  }
  
  sub custom_traffic_output {
      my ($self, %options) = @_;
  
      my ($traffic_value, $traffic_unit) = $self->{perfdata}->change_bytes(value => $self->{result_values}->{traffic_per_seconds}, network => 1);
      my $msg = sprintf("Traffic %s : %s/s (%s)",
                        ucfirst($self->{result_values}->{label}), $traffic_value . $traffic_unit,
                        defined($self->{result_values}->{traffic_prct}) ? sprintf("%.2f%%", $self->{result_values}->{traffic_prct}) : '-');
      return $msg;
  }
  
  sub custom_traffic_calc {
      my ($self, %options) = @_;
  
      my $diff_traffic = ($options{new_datas}->{$self->{instance} . '_' . $options{extra_options}->{label_ref}} - $options{old_datas}->{$self->{instance} . '_' . $options{extra_options}->{label_ref}});
  
      $self->{result_values}->{traffic_per_seconds} = $diff_traffic / $options{delta_time};
      if (defined($options{new_datas}->{$self->{instance} . '_speed_' . $options{extra_options}->{label_ref}}) &&
          $options{new_datas}->{$self->{instance} . '_speed_' . $options{extra_options}->{label_ref}} ne '' && 
          $options{new_datas}->{$self->{instance} . '_speed_' . $options{extra_options}->{label_ref}} > 0) {
          $self->{result_values}->{traffic_prct} = $self->{result_values}->{traffic_per_seconds} * 100 / $options{new_datas}->{$self->{instance} . '_speed_' . $options{extra_options}->{label_ref}};
          $self->{result_values}->{speed} = $options{new_datas}->{$self->{instance} . '_speed_' . $options{extra_options}->{label_ref}};
      }
  
      $self->{result_values}->{label} = $options{extra_options}->{label_ref};
      $self->{result_values}->{display} = $options{new_datas}->{$self->{instance} . '_display'};
      return 0;
  }
  
  sub set_counters {
      my ($self, %options) = @_;
      
      $self->{maps_counters_type} = [
          { name => 'interface', type => 1, cb_prefix_output => 'prefix_interface_output', message_multiple => 'All interfaces are ok', skipped_code => { -10 => 1 } },
      ];
      
      $self->{maps_counters}->{interface} = [
          { label => 'status', threshold => 0, set => {
                  key_values => [ { name => 'status' }, { name => 'display' } ],
                  closure_custom_calc => $self->can('custom_status_calc'),
                  closure_custom_output => $self->can('custom_status_output'),
                  closure_custom_perfdata => sub { return 0; },
                  closure_custom_threshold_check => \&catalog_status_threshold,
              }
          },
          { label => 'in', set => {
                  key_values => [ { name => 'in', diff => 1 }, { name => 'speed_in' }, { name => 'display' } ],
                  per_second => 1,
                  closure_custom_calc => $self->can('custom_traffic_calc'), closure_custom_calc_extra_options => { label_ref => 'in' },
                  closure_custom_output => $self->can('custom_traffic_output'), output_error_template => 'Traffic In : %s',
                  closure_custom_perfdata => $self->can('custom_traffic_perfdata'),
                  closure_custom_threshold_check => $self->can('custom_traffic_threshold'),
              }
          },
          { label => 'out', set => {
                  key_values => [ { name => 'out', diff => 1 }, { name => 'speed_out' }, { name => 'display' } ],
                  per_second => 1,
                  closure_custom_calc => $self->can('custom_traffic_calc'), closure_custom_calc_extra_options => { label_ref => 'out' },
                  closure_custom_output => $self->can('custom_traffic_output'), output_error_template => 'Traffic Out : %s',
                  closure_custom_perfdata => $self->can('custom_traffic_perfdata'),
                  closure_custom_threshold_check => $self->can('custom_traffic_threshold'),
              }
          },
      ];
  }
  
  sub new {
      my ($class, %options) = @_;
      my $self = $class->SUPER::new(package => __PACKAGE__, %options, statefile => 1);
      bless $self, $class;
      
      $options{options}->add_options(arguments => {
          "hostname:s"        => { name => 'hostname' },
          "remote"            => { name => 'remote' },
          "ssh-option:s@"     => { name => 'ssh_option' },
          "ssh-path:s"        => { name => 'ssh_path' },
          "ssh-command:s"     => { name => 'ssh_command', default => 'ssh' },
          "timeout:s"         => { name => 'timeout', default => 30 },
          "sudo"              => { name => 'sudo' },
          "command:s"         => { name => 'command', default => 'ip' },
          "command-path:s"    => { name => 'command_path', default => '/sbin' },
          "command-options:s" => { name => 'command_options', default => '-s addr 2>&1' },
          "filter-state:s"    => { name => 'filter_state', },
          "units:s"           => { name => 'units', default => 'b/s' },
          "name:s"            => { name => 'name' },
          "regexp"            => { name => 'use_regexp' },
          "regexp-isensitive" => { name => 'use_regexpi' },
          "speed:s"           => { name => 'speed' },
          "no-loopback"       => { name => 'no_loopback', },
          "unknown-status:s"  => { name => 'unknown_status', default => '' },
          "warning-status:s"  => { name => 'warning_status', default => '' },
          "critical-status:s" => { name => 'critical_status', default => '%{status} ne "RU"' },
      });
      
      return $self;
  }
  
  sub prefix_interface_output {
      my ($self, %options) = @_;
  
      return "Interface '" . $options{instance_value}->{display} . "' ";
  }
  
  sub check_options {
      my ($self, %options) = @_;
      $self->SUPER::check_options(%options);
  
      $self->{hostname} = $self->{option_results}->{hostname};
      if (!defined($self->{hostname})) {
          $self->{hostname} = 'me';
      }
      if (defined($self->{option_results}->{speed}) && $self->{option_results}->{speed} ne '') {
          if ($self->{option_results}->{speed} !~ /^[0-9]+(\.[0-9]+){0,1}$/) {
              $self->{output}->add_option_msg(short_msg => "Speed must be a positive number '" . $self->{option_results}->{speed} . "' (can be a float also).");
              $self->{output}->option_exit();
          } else {
              $self->{option_results}->{speed} *= 1000000;
          }
      }
      if (defined($self->{option_results}->{units}) && $self->{option_results}->{units} eq '%' && 
          (!defined($self->{option_results}->{speed}) || $self->{option_results}->{speed} eq '')) {
          $self->{output}->add_option_msg(short_msg => "To use percent, you need to set --speed option.");
          $self->{output}->option_exit();
      }
      
      $self->change_macros(macros => ['unknown_status', 'warning_status', 'critical_status']);
  }
  
  sub do_selection {
      my ($self, %options) = @_;
  
      $self->{interface} = {};
      my $stdout = centreon::plugins::misc::execute(
          output => $self->{output},
          options => $self->{option_results},
          sudo => $self->{option_results}->{sudo},
          command => $self->{option_results}->{command},
          command_path => $self->{option_results}->{command_path},
          command_options => $self->{option_results}->{command_options}
      );
  
      # ifconfig
      my $interface_pattern = '^(\S+)(.*?)(\n\n|\n$)';
      if ($stdout =~ /^\d+:\s+\S+:\s+</ms) {
          # ip addr
          $interface_pattern = '^\d+:\s+(\S+)(.*?)(?=\n\d|\Z$)';
      }
      
      while ($stdout =~ /$interface_pattern/msg) {
          my ($interface_name, $values) = ($1, $2);
          
          $interface_name =~ s/:$//;
          my $states = '';
          $states .= 'R' if ($values =~ /RUNNING|LOWER_UP/ms);
          $states .= 'U' if ($values =~ /UP/ms);
          
          next if (defined($self->{option_results}->{no_loopback}) && $values =~ /LOOPBACK/ms);
          next if (defined($self->{option_results}->{filter_state}) && $self->{option_results}->{filter_state} ne '' &&
                   $states !~ /$self->{option_results}->{filter_state}/);
          
          next if (defined($self->{option_results}->{name}) && defined($self->{option_results}->{use_regexp}) && defined($self->{option_results}->{use_regexpi}) 
              && $interface_name !~ /$self->{option_results}->{name}/i);
          next if (defined($self->{option_results}->{name}) && defined($self->{option_results}->{use_regexp}) && !defined($self->{option_results}->{use_regexpi}) 
              && $interface_name !~ /$self->{option_results}->{name}/);
          next if (defined($self->{option_results}->{name}) && !defined($self->{option_results}->{use_regexp}) && !defined($self->{option_results}->{use_regexpi})
              && $interface_name ne $self->{option_results}->{name});
  
          $self->{interface}->{$interface_name} = {
              display => $interface_name,
              status => $states,
              speed_in => defined($self->{option_results}->{speed}) ? $self->{option_results}->{speed} : '',
              speed_out => defined($self->{option_results}->{speed}) ? $self->{option_results}->{speed} : '',
          };
  
          # ip addr patterns
          if ($values =~ /RX:\s+bytes.*?(\d+).*?TX: bytes.*?(\d+)/msi) {
             $self->{interface}->{$interface_name}->{in} = $1;
             $self->{interface}->{$interface_name}->{out} = $2;
          } elsif ($values =~ /RX bytes:(\S+).*?TX bytes:(\S+)/msi || $values =~ /RX packets\s+\d+\s+bytes\s+(\S+).*?TX packets\s+\d+\s+bytes\s+(\S+)/msi) {
              $self->{interface}->{$interface_name}->{in} = $1;
              $self->{interface}->{$interface_name}->{out} = $2;
          }
      }
      
      if (scalar(keys %{$self->{interface}}) <= 0) {
          $self->{output}->add_option_msg(short_msg => "No interface found.");
          $self->{output}->option_exit();
      }
  }
  
  sub manage_selection {
      my ($self, %options) = @_;
  
      $self->do_selection();
      $self->{cache_name} = "cache_linux_local_" . $self->{hostname} . '_' . $self->{mode} . '_' .
          (defined($self->{option_results}->{filter_counters}) ? md5_hex($self->{option_results}->{filter_counters}) : md5_hex('all')) . '_' .
          (defined($self->{option_results}->{name}) ? md5_hex($self->{option_results}->{name}) : md5_hex('all'));
  }
  
  1;
  
  
  =head1 MODE
  
  Check Traffic
  
  =over 8
  
  =item B<--remote>
  
  Execute command remotely in 'ssh'.
  
  =item B<--hostname>
  
  Hostname to query (need --remote).
  
  =item B<--ssh-option>
  
  Specify multiple options like the user (example: --ssh-option='-l=centreon-engine' --ssh-option='-p=52').
  
  =item B<--ssh-path>
  
  Specify ssh command path (default: none)
  
  =item B<--ssh-command>
  
  Specify ssh command (default: 'ssh'). Useful to use 'plink'.
  
  =item B<--timeout>
  
  Timeout in seconds for the command (Default: 30).
  
  =item B<--sudo>
  
  Use 'sudo' to execute the command.
  
  =item B<--command>
  
  Command to get information (Default: 'ip').
  Can be changed if you have output in a file.
  
  =item B<--command-path>
  
  Command path (Default: '/sbin').
  
  =item B<--command-options>
  
  Command options (Default: '-s addr 2>&1').
  
  =item B<--warning-in>
  
  Threshold warning in percent for 'in' traffic.
  
  =item B<--critical-in>
  
  Threshold critical in percent for 'in' traffic.
  
  =item B<--warning-out>
  
  Threshold warning in percent for 'out' traffic.
  
  =item B<--critical-out>
  
  Threshold critical in percent for 'out' traffic.
  
  =item B<--unknown-status>
  
  Set warning threshold for status (Default: '').
  Can used special variables like: %{status}, %{display}
  
  =item B<--warning-status>
  
  Set warning threshold for status (Default: '').
  Can used special variables like: %{status}, %{display}
  
  =item B<--critical-status>
  
  Set critical threshold for status (Default: '%{status} ne "RU"').
  Can used special variables like: %{status}, %{display}
  
  =item B<--units>
  
  Units of thresholds (Default: 'b/s') ('%', 'b/s').
  Percent can be used only if --speed is set.
  
  =item B<--name>
  
  Set the interface name (empty means 'check all interfaces')
  
  =item B<--regexp>
  
  Allows to use regexp to filter intefaces (with option --name).
  
  =item B<--regexp-isensitive>
  
  Allows to use regexp non case-sensitive (with --regexp).
  
  =item B<--filter-state>
  
  Filter interfaces type (regexp can be used).
  
  =item B<--speed>
  
  Set interface speed (in Mb).
  
  =item B<--no-loopback>
  
  Don't display loopback interfaces.
  
  =back
  
  =cut
OS_LINUX_LOCAL_MODE_TRAFFIC

$fatpacked{"os/linux/local/mode/uptime.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'OS_LINUX_LOCAL_MODE_UPTIME';
  #
  # Copyright 2019 Centreon (http://www.centreon.com/)
  #
  # Centreon is a full-fledged industry-strength solution that meets
  # the needs in IT infrastructure and application monitoring for
  # service performance.
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  #
  
  package os::linux::local::mode::uptime;
  
  use base qw(centreon::plugins::mode);
  
  use strict;
  use warnings;
  use centreon::plugins::misc;
  use POSIX;
  
  sub new {
      my ($class, %options) = @_;
      my $self = $class->SUPER::new(package => __PACKAGE__, %options);
      bless $self, $class;
      
      $options{options}->add_options(arguments =>
                                  { 
                                    "hostname:s"        => { name => 'hostname' },
                                    "remote"            => { name => 'remote' },
                                    "ssh-option:s@"     => { name => 'ssh_option' },
                                    "ssh-path:s"        => { name => 'ssh_path' },
                                    "ssh-command:s"     => { name => 'ssh_command', default => 'ssh' },
                                    "timeout:s"         => { name => 'timeout', default => 30 },
                                    "sudo"              => { name => 'sudo' },
                                    "command:s"         => { name => 'command', default => 'cat' },
                                    "command-path:s"    => { name => 'command_path' },
                                    "command-options:s" => { name => 'command_options', default => '/proc/uptime 2>&1' },
                                    "warning:s"         => { name => 'warning', default => '' },
                                    "critical:s"        => { name => 'critical', default => '' },
                                    "seconds"           => { name => 'seconds', },
                                  });
      return $self;
  }
  
  sub check_options {
      my ($self, %options) = @_;
      $self->SUPER::init(%options);
  
      if (($self->{perfdata}->threshold_validate(label => 'warning', value => $self->{option_results}->{warning})) == 0) {
         $self->{output}->add_option_msg(short_msg => "Wrong warning threshold '" . $self->{option_results}->{warning} . "'.");
         $self->{output}->option_exit();
      }
      if (($self->{perfdata}->threshold_validate(label => 'critical', value => $self->{option_results}->{critical})) == 0) {
         $self->{output}->add_option_msg(short_msg => "Wrong critical threshold '" . $self->{option_results}->{critical} . "'.");
         $self->{output}->option_exit();
      }
  }
  
  sub run {
      my ($self, %options) = @_;
  
      my $stdout = centreon::plugins::misc::execute(output => $self->{output},
                                                    options => $self->{option_results},
                                                    sudo => $self->{option_results}->{sudo},
                                                    command => $self->{option_results}->{command},
                                                    command_path => $self->{option_results}->{command_path},
                                                    command_options => $self->{option_results}->{command_options});
      my ($uptime, $idletime);
      if ($stdout =~ /([0-9\.]+)\s+([0-9\.]+)/) {
          ($uptime, $idletime) = ($1, $2)
      }
      
      if (!defined($uptime) || !defined($idletime)) {
          $self->{output}->add_option_msg(short_msg => "Some informations missing.");
          $self->{output}->option_exit();
      }
  
      my $exit_code = $self->{perfdata}->threshold_check(value => floor($uptime),
                                threshold => [ { label => 'critical', exit_litteral => 'critical' }, { label => 'warning', exit_litteral => 'warning' } ]);
      $self->{output}->perfdata_add(label => 'uptime', unit => 's',
                                    value => floor($uptime),
                                    warning => $self->{perfdata}->get_perfdata_for_output(label => 'warning'),
                                    critical => $self->{perfdata}->get_perfdata_for_output(label => 'critical'),
                                    min => 0);
  
      $self->{output}->output_add(severity => $exit_code,
                                  short_msg => sprintf("System uptime is: %s",
                                      defined($self->{option_results}->{seconds}) ? floor($uptime) . " seconds" : floor($uptime / 86400) . " days" ));
  
      $self->{output}->display();
      $self->{output}->exit();
      
  }
  
  1;
  
  
  =head1 MODE
  
  Check system uptime. (need '/proc/uptime' file).
  
  =over 8
  
  =item B<--warning>
  
  Threshold warning in seconds.
  
  =item B<--critical>
  
  Threshold critical in seconds.
  
  =item B<--seconds>
  
  Display uptime in seconds.
  
  =item B<--remote>
  
  Execute command remotely in 'ssh'.
  
  =item B<--hostname>
  
  Hostname to query (need --remote).
  
  =item B<--ssh-option>
  
  Specify multiple options like the user (example: --ssh-option='-l=centreon-engine' --ssh-option='-p=52').
  
  =item B<--ssh-path>
  
  Specify ssh command path (default: none)
  
  =item B<--ssh-command>
  
  Specify ssh command (default: 'ssh'). Useful to use 'plink'.
  
  =item B<--timeout>
  
  Timeout in seconds for the command (Default: 30).
  
  =item B<--sudo>
  
  Use 'sudo' to execute the command.
  
  =item B<--command>
  
  Command to get information (Default: 'cat').
  Can be changed if you have output in a file.
  
  =item B<--command-path>
  
  Command path (Default: none).
  
  =item B<--command-options>
  
  Command options (Default: '/proc/uptime 2>&1').
  
  =back
  
  =cut
OS_LINUX_LOCAL_MODE_UPTIME

$fatpacked{"os/linux/local/plugin.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'OS_LINUX_LOCAL_PLUGIN';
  #
  # Copyright 2019 Centreon (http://www.centreon.com/)
  #
  # Centreon is a full-fledged industry-strength solution that meets
  # the needs in IT infrastructure and application monitoring for
  # service performance.
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  #
  
  package os::linux::local::plugin;
  
  use strict;
  use warnings;
  use base qw(centreon::plugins::script_simple);
  
  sub new {
      my ($class, %options) = @_;
      my $self = $class->SUPER::new(package => __PACKAGE__, %options);
      bless $self, $class;
  
      $self->{version} = '0.1';
      %{$self->{modes}} = (
          'cpu'               => 'os::linux::local::mode::cpu',
          'cpu-detailed'      => 'os::linux::local::mode::cpudetailed',
          'cmd-return'        => 'os::linux::local::mode::cmdreturn',
          'connections'       => 'os::linux::local::mode::connections',
          'directlvm-usage'   => 'os::linux::local::mode::directlvmusage',
          'discovery-snmp'    => 'os::linux::local::mode::discoverysnmp',
          'diskio'            => 'os::linux::local::mode::diskio',
          'files-size'        => 'os::linux::local::mode::filessize',
          'files-date'        => 'os::linux::local::mode::filesdate',
          'inodes'            => 'os::linux::local::mode::inodes',
          'load'              => 'os::linux::local::mode::loadaverage',
          'list-interfaces'   => 'os::linux::local::mode::listinterfaces',
          'list-partitions'   => 'os::linux::local::mode::listpartitions',
          'list-storages'     => 'os::linux::local::mode::liststorages',
          'memory'            => 'os::linux::local::mode::memory',
          'mountpoint'        => 'os::linux::local::mode::mountpoint',
          'open-files'        => 'os::linux::local::mode::openfiles',
          'ntp'               => 'os::linux::local::mode::ntp',
          'packet-errors'     => 'os::linux::local::mode::packeterrors',
          'paging'            => 'os::linux::local::mode::paging',
          'pending-updates'   => 'os::linux::local::mode::pendingupdates',
          'process'           => 'os::linux::local::mode::process',
          'quota'             => 'os::linux::local::mode::quota',
          'storage'           => 'os::linux::local::mode::storage',
          'swap'              => 'os::linux::local::mode::swap',
          'systemd-sc-status' => 'os::linux::local::mode::systemdscstatus',
          'traffic'           => 'os::linux::local::mode::traffic',
          'uptime'            => 'os::linux::local::mode::uptime',
      );
  
      return $self;
  }
  
  1;
  
  
  =head1 PLUGIN DESCRIPTION
  
  Check Linux through local commands (the plugin can use SSH).
  
  =cut
OS_LINUX_LOCAL_PLUGIN

s/^  //mg for values %fatpacked;

my $class = 'FatPacked::'.(0+\%fatpacked);
no strict 'refs';
*{"${class}::files"} = sub { keys %{$_[0]} };

if ($] < 5.008) {
  *{"${class}::INC"} = sub {
    if (my $fat = $_[0]{$_[1]}) {
      my $pos = 0;
      my $last = length $fat;
      return (sub {
        return 0 if $pos == $last;
        my $next = (1 + index $fat, "\n", $pos) || $last;
        $_ .= substr $fat, $pos, $next - $pos;
        $pos = $next;
        return 1;
      });
    }
  };
}

else {
  *{"${class}::INC"} = sub {
    if (my $fat = $_[0]{$_[1]}) {
      open my $fh, '<', \$fat
        or die "FatPacker error loading $_[1] (could be a perl installation issue?)";
      return $fh;
    }
    return;
  };
}

unshift @INC, bless \%fatpacked, $class;
  } # END OF FATPACK CODE

#
# Copyright 2019 Centreon (http://www.centreon.com/)
#
# Centreon is a full-fledged industry-strength solution that meets
# the needs in IT infrastructure and application monitoring for
# service performance.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

use strict;
use warnings;
# Not perl embedded compliant at all
use FindBin;
use lib "$FindBin::Bin";
# use lib '/usr/lib/nagios/plugins/';

use centreon::plugins::script;

centreon::plugins::script->new()->run();
