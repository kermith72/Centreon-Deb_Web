#!/usr/bin/perl

# This chunk of stuff was generated by App::FatPacker. To find the original
# file's code, look for the end of this BEGIN block or the string 'FATPACK'
BEGIN {
my %fatpacked;

$fatpacked{"centreon/plugins/alternative/FatPackerOptions.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'CENTREON_PLUGINS_ALTERNATIVE_FATPACKEROPTIONS';
  #
  # Copyright 2019 Centreon (http://www.centreon.com/)
  #
  # Centreon is a full-fledged industry-strength solution that meets
  # the needs in IT infrastructure and application monitoring for
  # service performance.
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  #
  
  package centreon::plugins::alternative::FatPackerOptions;
  
  use base qw(centreon::plugins::options);
  
  use strict;
  use warnings;
  use Pod::Usage;
  
  sub new {
      my ($class, %options) = @_;
      my $self = $class->SUPER::new(package => __PACKAGE__, %options);
      bless $self, $class;
      
      return $self;
  }
  
  sub display_help {
      my ($self, %options) = @_;
      
      my $stdout;
      foreach (@{$self->{pod_package}}) {
          
          {
              my $pp = $_->{package} . ".pm";
              $pp =~ s{::}{/}g;
              my $content_class = $INC{$pp}->{$pp};
              open my $str_fh, '<', \$content_class;
              
              local *STDOUT;
              open STDOUT, '>', \$stdout;
              pod2usage(-exitval => 'NOEXIT', -input => $str_fh,
                        -verbose => 99, 
                        -sections => $_->{sections});
              
              close $str_fh;
          }
          
          $self->{output}->add_option_msg(long_msg => $stdout) if (defined($stdout));
      }
  }
  
  1;
  
CENTREON_PLUGINS_ALTERNATIVE_FATPACKEROPTIONS

$fatpacked{"centreon/plugins/alternative/Getopt.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'CENTREON_PLUGINS_ALTERNATIVE_GETOPT';
  #
  # Copyright 2019 Centreon (http://www.centreon.com/)
  #
  # Centreon is a full-fledged industry-strength solution that meets
  # the needs in IT infrastructure and application monitoring for
  # service performance.
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  #
  
  package centreon::plugins::alternative::Getopt;
  
  use strict;
  use warnings;
  
  use Exporter;
  use vars qw(@ISA @EXPORT @EXPORT_OK);
  @ISA = qw(Exporter);
  
  BEGIN {
      @EXPORT    = qw(&GetOptions);
      @EXPORT_OK = qw();
  }
  
  use vars @EXPORT, @EXPORT_OK;
  
  our $warn_message = 0;
  
  sub get_assigned_value {
      my (%options) = @_;
      
      if (!defined($options{val}) || $options{val} eq '') {
          # Add defined also. Hardened code: already see: $ARGV[6] = undef for example
          if ($options{pos} + 1 < $options{num_args} && defined($ARGV[$options{pos} + 1]) && $ARGV[$options{pos} + 1] !~ /^--/) {
              my $val = $ARGV[$options{pos} + 1];
              splice @ARGV, $options{pos} + 1, 1;
              return ($options{num_args} - 1, $val);
          } else {
              return ($options{num_args}, '');
          }
      }
      
      return ($options{num_args}, $options{val});
  }
  
  sub GetOptions {
      my (%opts) = @_;
      
      my $search_str = ',' . join(',', keys %opts) . ',';
      my $num_args = scalar(@ARGV);
      for (my $i = 0; $i < $num_args;) {
          if (defined($ARGV[$i]) && $ARGV[$i] =~ /^--(.*?)(?:=|$)(.*)/) {
              my ($option, $value) = ($1, $2);
              
              # find type of option
              if ($search_str !~ /,((?:[^,]*?\|){0,}$option(?:\|.*?){0,}(:.*?){0,1}),/) {
                  warn "Unknown option: $option" if ($warn_message == 1);
                  $i++;
                  next;
              }
              
              my ($option_selected, $type_opt) = ($1, $2);
              if (!defined($type_opt)) {
                  ${$opts{$option_selected}} = 1;
              } elsif ($type_opt =~ /:s$/) {
                  ($num_args, my $assigned) = get_assigned_value(num_args => $num_args, pos => $i, val => $value);
                  ${$opts{$option_selected}} = $assigned;
              } elsif ($type_opt =~ /:s\@$/) {
                  ${$opts{$option . $type_opt}} = [] if (!defined(${$opts{$option . $type_opt}}));
                  ($num_args, my $assigned) = get_assigned_value(num_args => $num_args, pos => $i, val => $value);
                  push @{${$opts{$option_selected}}}, $assigned;
              } elsif ($type_opt =~ /:s\%$/) {
                  ${$opts{$option . $type_opt}} = {} if (!defined(${$opts{$option . $type_opt}}));
                  ($num_args, my $assigned) = get_assigned_value(num_args => $num_args, pos => $i, val => $value);
                  if ($assigned =~ /^(.*?)=(.*)/) {
                      ${$opts{$option_selected}}->{$1} = $2;
                  }
              } 
              
              splice @ARGV, $i, 1;
              $num_args--;
          } else {
              warn "argument $ARGV[$i] alone" if ($warn_message == 1 && $i != 0 && defined($ARGV[$i]));
              $i++;
          }
      }
  }
  
  1;
  
CENTREON_PLUGINS_ALTERNATIVE_GETOPT

$fatpacked{"centreon/plugins/backend/http/curl.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'CENTREON_PLUGINS_BACKEND_HTTP_CURL';
  #
  # Copyright 2019 Centreon (http://www.centreon.com/)
  #
  # Centreon is a full-fledged industry-strength solution that meets
  # the needs in IT infrastructure and application monitoring for
  # service performance.
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  #
  
  package centreon::plugins::backend::http::curl;
  
  use strict;
  use warnings;
  use URI;
  use centreon::plugins::misc;
  
  sub new {
      my ($class, %options) = @_;
      my $self  = {};
      bless $self, $class;
  
      if (!defined($options{noptions}) || $options{noptions} != 1) {
          $options{options}->add_options(arguments => {
              "curl-opt:s@"   => { name => 'curl_opt' },
          });
          $options{options}->add_help(package => __PACKAGE__, sections => 'BACKEND CURL OPTIONS', once => 1);
      }
      
      $self->{output} = $options{output};
      
      return $self;
  }
  
  sub check_options {
      my ($self, %options) = @_;
  
      centreon::plugins::misc::mymodule_load(output => $self->{output}, module => 'Net::Curl::Easy',
                                             error_msg => "Cannot load module 'Net::Curl::Easy'.");
      centreon::plugins::misc::mymodule_load(output => $self->{output}, module => 'centreon::plugins::backend::http::curlconstants',
                                             error_msg => "Cannot load module 'centreon::plugins::backend::http::curlconstants'.");
      $self->{constant_cb} = \&centreon::plugins::backend::http::curlconstants::get_constant_value;
      
      foreach (('unknown_status', 'warning_status', 'critical_status')) {
          if (defined($options{request}->{$_})) {
              $options{request}->{$_} =~ s/%\{http_code\}/\$self->{response_code}/g;
          }
      }
  
      if (!defined($options{request}->{curl_opt})) {
          $options{request}->{curl_opt} = [];
      }
  }
  
  my $http_code_explained = {
      100 => 'Continue',
      101 => 'Switching Protocols',
      200 => 'OK',
      201 => 'Created',
      202 => 'Accepted',
      203 => 'Non-Authoritative Information',
      204 => 'No Content',
      205 => 'Reset Content',
      206 => 'Partial Content',
      300 => 'Multiple Choices',
      301 => 'Moved Permanently',
      302 => 'Found',
      303 => 'See Other',
      304 => 'Not Modified',
      305 => 'Use Proxy',
      306 => '(Unused)',
      307 => 'Temporary Redirect',
      400 => 'Bad Request',
      401 => 'Unauthorized',
      402 => 'Payment Required',
      403 => 'Forbidden',
      404 => 'Not Found',
      405 => 'Method Not Allowed',
      406 => 'Not Acceptable',
      407 => 'Proxy Authentication Required',
      408 => 'Request Timeout',
      409 => 'Conflict',
      410 => 'Gone',
      411 => 'Length Required',
      412 => 'Precondition Failed',
      413 => 'Request Entity Too Large',
      414 => 'Request-URI Too Long',
      415 => 'Unsupported Media Type',
      416 => 'Requested Range Not Satisfiable',
      417 => 'Expectation Failed',
      500 => 'Internal Server Error',
      501 => 'Not Implemented',
      502 => 'Bad Gateway',
      503 => 'Service Unavailable',
      504 => 'Gateway Timeout',
      505 => 'HTTP Version Not Supported',
  };
  
  sub cb_debug {
      my ($easy, $type, $data, $uservar) = @_;
  
      my $msg = '';
      if ($type == $uservar->{constant_cb}->(name => 'CURLINFO_TEXT')) {
          $msg = sprintf("== Info: %s", $data);
      }
      if ($type == $uservar->{constant_cb}->(name => 'CURLINFO_HEADER_OUT')) {
          $msg = sprintf("=> Send header: %s", $data);
      }
      if ($type == $uservar->{constant_cb}->(name => 'CURLINFO_DATA_OUT')) {
          $msg = sprintf("=> Send data: %s", $data);
      }
      if ($type == $uservar->{constant_cb}->(name => 'CURLINFO_SSL_DATA_OUT')) {
          $msg = sprintf("=> Send SSL data: %s", $data);
      }
      if ($type == $uservar->{constant_cb}->(name => 'CURLINFO_HEADER_IN')) {
          $msg = sprintf("=> Recv header: %s", $data);
      }
      if ($type == $uservar->{constant_cb}->(name => 'CURLINFO_DATA_IN')) {
          $msg = sprintf("=> Recv data: %s", $data);
      }
      if ($type == $uservar->{constant_cb}->(name => 'CURLINFO_SSL_DATA_IN')) {
          $msg = sprintf("=> Recv SSL data: %s", $data);
      }
      
      $uservar->{output}->output_add(long_msg => $msg, debug => 1);
      return 0;
  }
  
  sub curl_setopt {
      my ($self, %options) = @_;
      
      eval {
          $self->{curl_easy}->setopt($options{option}, $options{parameter});
      };
      if ($@) {
          $self->{output}->add_option_msg(short_msg => "curl setopt error: '" . $@ . "'.");
          $self->{output}->option_exit();
      }
  }
  
  sub set_method {
      my ($self, %options) = @_;
  
      if ($options{request}->{method} eq 'GET') {
          return ;
      }
      
      if ($options{content_type_forced} == 1) {
          $self->curl_setopt(option => $self->{constant_cb}->(name => 'CURLOPT_POSTFIELDS'), parameter => $options{request}->{query_form_post})
              if (defined($options{request}->{query_form_post}) && $options{request}->{query_form_post} ne '');
      } elsif (defined($options{request}->{post_params})) {
          my $uri_post = URI->new();
          $uri_post->query_form($options{request}->{post_params});
          push @{$options{headers}}, 'Content-Type: application/x-www-form-urlencoded';
          $self->curl_setopt(option => $self->{constant_cb}->(name => 'CURLOPT_POSTFIELDS'), parameter => $uri_post->query);
      }
      
      if ($options{request}->{method} eq 'POST') {
          $self->curl_setopt(option => $self->{constant_cb}->(name => 'CURLOPT_POST'), parameter => 1);
      }
      if ($options{request}->{method} eq 'PUT') {
          $self->curl_setopt(option => $self->{constant_cb}->(name => 'CURLOPT_CUSTOMREQUEST'), parameter => $options{request}->{method});
      }
      if ($options{request}->{method} eq 'DELETE') {
          $self->curl_setopt(option => $self->{constant_cb}->(name => 'CURLOPT_CUSTOMREQUEST'), parameter => $options{request}->{method});
      }
  }
  
  sub set_auth {
      my ($self, %options) = @_;
  
      if (defined($options{request}->{credentials})) {
          if (defined($options{request}->{basic})) {
              $self->curl_setopt(option => $self->{constant_cb}->(name => 'CURLOPT_HTTPAUTH'), parameter => $self->{constant_cb}->(name => 'CURLAUTH_BASIC'));
          } elsif (defined($options{request}->{ntlmv2})) {
              $self->curl_setopt(option => $self->{constant_cb}->(name => 'CURLOPT_HTTPAUTH'), parameter => $self->{constant_cb}->(name => 'CURLAUTH_NTLM'));
          } else {
              $self->curl_setopt(option => $self->{constant_cb}->(name => 'CURLOPT_HTTPAUTH'), parameter => $self->{constant_cb}->(name => 'CURLAUTH_ANY'));
          }
          $self->curl_setopt(option => $self->{constant_cb}->(name => 'CURLOPT_USERPWD'), parameter => $options{request}->{username}  . ':' . $options{request}->{password});
      }
  
      if (defined($options{request}->{cert_file}) &&  $options{request}->{cert_file} ne '') {
          $self->curl_setopt(option => $self->{constant_cb}->(name => 'CURLOPT_SSLCERT'), parameter => $options{request}->{cert_file});
          $self->curl_setopt(option => $self->{constant_cb}->(name => 'CURLOPT_SSLKEY'), parameter => $options{request}->{key_file});
          $self->curl_setopt(option => $self->{constant_cb}->(name => 'CURLOPT_KEYPASSWD'), parameter => $options{request}->{cert_pwd});
      }
      
      $self->curl_setopt(option => $self->{constant_cb}->(name => 'CURLOPT_SSLCERTTYPE'), parameter => "PEM");
      if (defined($options{request}->{cert_pkcs12})) {
          $self->curl_setopt(option => $self->{constant_cb}->(name => 'CURLOPT_SSLCERTTYPE'), parameter => "P12");
      }
  }
  
  sub set_proxy {
      my ($self, %options) = @_;
  
      if (defined($options{request}->{proxyurl}) && $options{request}->{proxyurl} ne '') {
          if ($options{request}->{proxyurl} =~ /^(?:http|https):\/\/(.*?):(.*?)@/) {
              $self->curl_setopt(option => $self->{constant_cb}->(name => 'CURLOPT_PROXYUSERNAME'), parameter => $1);
              $self->curl_setopt(option => $self->{constant_cb}->(name => 'CURLOPT_PROXYPASSWORD'), parameter => $2);
              $options{request}->{proxyurl} =~ s/\/\/$1:$2@//;
          }
          
          $self->curl_setopt(option => $self->{constant_cb}->(name => 'CURLOPT_PROXY'), parameter => $options{request}->{proxyurl});
      }
      
      if (defined($options{request}->{proxypac}) && $options{request}->{proxypac} ne '') {
          $self->{output}->add_option_msg(short_msg => 'Unsupported proxypac option');
          $self->{output}->option_exit();
      }
  }
  
  sub set_extra_curl_opt {
      my ($self, %options) = @_;
  
      my $fields = { key => '', value => '' };
      foreach (@{$options{request}->{curl_opt}}) {
          ($fields->{key}, $fields->{value}) = split /=>/;
          foreach my $label ('key', 'value') {
              $fields->{$label} = centreon::plugins::misc::trim($fields->{$label});
              if ($fields->{$label} =~ /^CURLOPT|CURL/) {
                  $fields->{$label} = $self->{constant_cb}->(name => $fields->{$label});
              }
          }
  
          $self->curl_setopt(option => $fields->{key}, parameter => $fields->{value});
      }
  }
  
  sub cb_get_header {
      my ($easy, $header, $uservar) = @_;
  
      $header =~ s/[\r\n]//g;
      if ($header =~ /^[\r\n]*$/) {
          $uservar->{nheaders}++;
      } else {
          $uservar->{response_headers}->[$uservar->{nheaders}] = {}
              if (!defined($uservar->{response_headers}->[$uservar->{nheaders}]));
          if ($header =~  /^(\S(?:.*?))\s*:\s*(.*)/) {
              my $header_name = lc($1);
              $uservar->{response_headers}->[$uservar->{nheaders}]->{$header_name} = []
                  if (!defined($uservar->{response_headers}->[$uservar->{nheaders}]->{$header_name}));
              push @{$uservar->{response_headers}->[$uservar->{nheaders}]->{$header_name}}, $2;
          } else {
             $uservar->{response_headers}->[$uservar->{nheaders}]->{response_line} = $header; 
          }
      }
      
      return length($_[1]);
  }
  
  sub request {
      my ($self, %options) = @_;
  
      $self->{curl_easy} = Net::Curl::Easy->new();
      
      if ($self->{output}->is_debug()) {
          $self->curl_setopt(option => $self->{constant_cb}->(name => 'CURLOPT_DEBUGFUNCTION'), parameter => \&cb_debug);
          $self->curl_setopt(option => $self->{constant_cb}->(name => 'CURLOPT_DEBUGDATA'), parameter => $self);
          $self->curl_setopt(option => $self->{constant_cb}->(name => 'CURLOPT_VERBOSE'), parameter => 1);
      }
  
      if (defined($options{request}->{timeout})) {
          $self->curl_setopt(option => $self->{constant_cb}->(name => 'CURLOPT_TIMEOUT'), parameter => $options{request}->{timeout});
      }
      if (defined($options{request}->{cookies_file})) {
          $self->curl_setopt(option => $self->{constant_cb}->(name => 'CURLOPT_COOKIEFILE'), parameter => $options{request}->{cookies_file});
      }
      
      $self->curl_setopt(option => $self->{constant_cb}->(name => 'CURLOPT_FOLLOWLOCATION'), parameter => 1);
      if (defined($options{request}->{no_follow})) {
          $self->curl_setopt(option => $self->{constant_cb}->(name => 'CURLOPT_FOLLOWLOCATION'), parameter => 0);
      }
  
      my $url;
      if (defined($options{request}->{full_url})) {
          $url = $options{request}->{full_url};
      } elsif (defined($options{request}->{port}) && $options{request}->{port} =~ /^[0-9]+$/) {
          $url = $options{request}->{proto}. "://" . $options{request}->{hostname} . ':' . $options{request}->{port} . $options{request}->{url_path};
      } else {
          $url = $options{request}->{proto}. "://" . $options{request}->{hostname} . $options{request}->{url_path};
      }
  
      if (defined($options{request}->{http_peer_addr}) && $options{request}->{http_peer_addr} ne '') {
          $url =~ /^(?:http|https):\/\/(.*?)(\/|\:|$)/;
          $self->{curl_easy}->pushopt($self->{constant_cb}->(name => 'CURLOPT_RESOLVE'),
                 [$1 . ':' . $options{request}->{port_force} . ':' . $options{request}->{http_peer_addr}]);
      }    
  
      my $uri = URI->new($url);
      if (defined($options{request}->{get_params})) {
          $uri->query_form($options{request}->{get_params});
      }
      
      $self->curl_setopt(option => $self->{constant_cb}->(name => 'CURLOPT_URL'), parameter => $uri);
      
      my $headers = [];
      my $content_type_forced = 0;
      foreach my $key (keys %{$options{request}->{headers}}) {
          push @$headers, $key . ':' . $options{request}->{headers}->{$key};
          if ($key =~ /content-type/i) {
              $content_type_forced = 1;
          }
      }
      
      $self->set_method(%options, content_type_forced => $content_type_forced, headers => $headers);
      
      if (scalar(@$headers) > 0) {
          $self->{curl_easy}->pushopt($self->{constant_cb}->(name => 'CURLOPT_HTTPHEADER'), $headers);
      }
      
      if (defined($options{request}->{cacert_file}) && $options{request}->{cacert_file} ne '') {
          $self->curl_setopt(option => $self->{constant_cb}->(name => 'CURLOPT_CAINFO'), parameter => $options{request}->{cacert_file});
      }
      
      $self->set_auth(%options);
      $self->set_proxy(%options);
      $self->set_extra_curl_opt(%options);
  
      $self->curl_setopt(option => $self->{constant_cb}->(name => 'CURLOPT_FILE'), parameter => \$self->{response_body});
      $self->{nheaders} = 0;
      $self->{response_headers} = [{}];
      $self->curl_setopt(option => $self->{constant_cb}->(name => 'CURLOPT_HEADERDATA'), parameter => $self);
      $self->curl_setopt(option => $self->{constant_cb}->(name => 'CURLOPT_HEADERFUNCTION'), parameter => \&cb_get_header);
          
      eval {
          $self->{curl_easy}->perform();
      };
      if ($@) {
          $self->{output}->add_option_msg(short_msg => 'curl perform error : ' . $@);
          $self->{output}->option_exit();
      }
      
      $self->{response_code} = $self->{curl_easy}->getinfo($self->{constant_cb}->(name => 'CURLINFO_RESPONSE_CODE'));
      
      # Check response
      my $status = 'ok';
      my $message;
  
      eval {
          local $SIG{__WARN__} = sub { $message = $_[0]; };
          local $SIG{__DIE__} = sub { $message = $_[0]; };
  
          if (defined($options{request}->{critical_status}) && $options{request}->{critical_status} ne '' &&
              eval "$options{request}->{critical_status}") {
              $status = 'critical';
          } elsif (defined($options{request}->{warning_status}) && $options{request}->{warning_status} ne '' &&
              eval "$options{request}->{warning_status}") {
              $status = 'warning';
          } elsif (defined($options{request}->{unknown_status}) && $options{request}->{unknown_status} ne '' &&
              eval "$options{request}->{unknown_status}") {
              $status = 'unknown';
          }
      };
      if (defined($message)) {
          $self->{output}->add_option_msg(short_msg => 'filter status issue: ' . $message);
          $self->{output}->option_exit();
      }
  
      if (!$self->{output}->is_status(value => $status, compare => 'ok', litteral => 1)) {
          my $short_msg = $self->{response_code} . ' ' . 
              (defined($http_code_explained->{$self->{response_code}}) ? $http_code_explained->{$self->{response_code}} : 'unknown');
  
          $self->{output}->output_add(severity => $status,
                                      short_msg => $short_msg);
          $self->{output}->display();
          $self->{output}->exit();
      }
  
      return $self->{response_body};
  }
  
  sub get_headers {
      my ($self, %options) = @_;
      
      my $headers = '';
      foreach (keys %{$self->{response_headers}->[$options{nheader}]}) {
          next if (/response_line/);
          foreach my $value (@{$self->{response_headers}->[$options{nheader}]->{$_}}) {
              $headers .= "$_: " . $value . "\n";
          }
      }
      
      return $headers;
  }
  
  sub get_first_header {
      my ($self, %options) = @_;
      
      if (!defined($options{name})) {
          return $self->get_headers(nheader => 0);
      }
      
      return undef
          if (!defined($self->{response_headers}->[0]->{ lc($options{name}) }));
      return wantarray ? @{$self->{response_headers}->[0]->{ lc($options{name}) }} : $self->{response_headers}->[0]->{ lc($options{name}) }->[0];
  }
  
  sub get_header {
      my ($self, %options) = @_;
  
      if (!defined($options{name})) {
          return $self->get_headers(nheader => -1);
      }
  
      return undef
          if (!defined($self->{response_headers}->[-1]->{ lc($options{name}) }));
      return wantarray ? @{$self->{response_headers}->[-1]->{ lc($options{name}) }} : $self->{response_headers}->[-1]->{ lc($options{name}) }->[0];
  }
  
  sub get_code {
      my ($self, %options) = @_;
  
      return $self->{response_code};
  }
  
  sub get_message {
      my ($self, %options) = @_;
      
      return $http_code_explained->{$self->{response_code}};
  }
  
  1;
  
  
  =head1 NAME
  
  HTTP Curl backend layer.
  
  =head1 SYNOPSIS
  
  HTTP Curl backend layer.
  
  =head1 BACKEND CURL OPTIONS
  
  =over 8
  
  =item B<--curl-opt>
  
  Set CURL Options (--curl-opt="CURLOPT_SSL_VERIFYPEER => 0" --curl-opt="CURLOPT_SSLVERSION => CURL_SSLVERSION_TLSv1_1" ).
  
  =back
  
  =head1 DESCRIPTION
  
  B<http>.
  
  =cut
CENTREON_PLUGINS_BACKEND_HTTP_CURL

$fatpacked{"centreon/plugins/backend/http/curlconstants.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'CENTREON_PLUGINS_BACKEND_HTTP_CURLCONSTANTS';
  #
  # Copyright 2019 Centreon (http://www.centreon.com/)
  #
  # Centreon is a full-fledged industry-strength solution that meets
  # the needs in IT infrastructure and application monitoring for
  # service performance.
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  #
  
  package centreon::plugins::backend::http::curlconstants;
  
  use strict;
  use warnings;
  use Net::Curl::Easy qw(:constants);
  
  sub get_constant_value {
      my (%options) = @_;
      
      return eval $options{name};
  }
  
  1;
CENTREON_PLUGINS_BACKEND_HTTP_CURLCONSTANTS

$fatpacked{"centreon/plugins/backend/http/lwp.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'CENTREON_PLUGINS_BACKEND_HTTP_LWP';
  #
  # Copyright 2019 Centreon (http://www.centreon.com/)
  #
  # Centreon is a full-fledged industry-strength solution that meets
  # the needs in IT infrastructure and application monitoring for
  # service performance.
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  #
  
  package centreon::plugins::backend::http::lwp;
  
  use strict;
  use warnings;
  use centreon::plugins::backend::http::useragent;
  use URI;
  use IO::Socket::SSL;
  
  sub new {
      my ($class, %options) = @_;
      my $self  = {};
      bless $self, $class;
  
      if (!defined($options{noptions}) || $options{noptions} != 1) {
          $options{options}->add_options(arguments => {
              "ssl:s"         => { name => 'ssl' },
              "ssl-opt:s@"    => { name => 'ssl_opt' },
          });
          $options{options}->add_help(package => __PACKAGE__, sections => 'BACKEND LWP OPTIONS', once => 1);
      }
  
      $self->{output} = $options{output};
      $self->{ua} = undef;
      $self->{debug_handlers} = 0;
      
      return $self;
  }
  
  sub check_options {
      my ($self, %options) = @_;
  
      foreach (('unknown_status', 'warning_status', 'critical_status')) {
          if (defined($options{request}->{$_})) {
              $options{request}->{$_} =~ s/%\{http_code\}/\$self->{response}->code/g;
          }
      }
  
      $self->{ssl_context} = '';
      if (!defined($options{request}->{ssl_opt})) {
          $options{request}->{ssl_opt} = [];
      }
      if (defined($options{request}->{ssl}) && $options{request}->{ssl} ne '') {
          push @{$options{request}->{ssl_opt}}, 'SSL_version => ' . $options{request}->{ssl};
      }
      if (defined($options{request}->{cert_file}) && !defined($options{request}->{cert_pkcs12})) {
          push @{$options{request}->{ssl_opt}}, 'SSL_use_cert => 1';
          push @{$options{request}->{ssl_opt}}, 'SSL_cert_file => "' . $options{request}->{cert_file} . '"';
          push @{$options{request}->{ssl_opt}}, 'SSL_key_file => "' . $options{request}->{key_file} . '"'
               if (defined($options{request}->{key_file}));
          push @{$options{request}->{ssl_opt}}, 'SSL_ca_file => "' . $options{request}->{cacert_file} . '"'
              if (defined($options{request}->{cacert_file}));
      }
      my $append = '';
      foreach (@{$options{request}->{ssl_opt}}) {
          if ($_ ne '') {
              $self->{ssl_context} .= $append . $_;
              $append = ', ';
          }
      }
  }
  
  sub set_proxy {
      my ($self, %options) = @_;
  
      if (defined($options{request}->{proxypac}) && $options{request}->{proxypac} ne '') {
          centreon::plugins::misc::mymodule_load(output => $self->{output}, module => 'HTTP::ProxyPAC',
                                                 error_msg => "Cannot load module 'HTTP::ProxyPAC'.");
          my ($pac, $pac_uri);
          eval {
              if ($options{request}->{proxypac} =~ /^(http|https):\/\//) {
                  $pac_uri = URI->new($options{request}->{proxypac});
                  $pac = HTTP::ProxyPAC->new($pac_uri);
              } else {
                  $pac = HTTP::ProxyPAC->new($options{request}->{proxypac});
              }
          };
          if ($@) {
              $self->{output}->add_option_msg(short_msg => 'issue to load proxypac: ' . $@);
              $self->{output}->option_exit();
          }
          my $res = $pac->find_proxy($options{url});
          if (defined($res->direct) && $res->direct != 1) {
              my $proxy_uri = URI->new($res->proxy);
              $proxy_uri->userinfo($pac_uri->userinfo) if (defined($pac_uri->userinfo));
              $self->{ua}->proxy(['http', 'https'], $proxy_uri->as_string);
          }
      }
      if (defined($options{request}->{proxyurl}) && $options{request}->{proxyurl} ne '') {
          $self->{ua}->proxy(['http', 'https'], $options{request}->{proxyurl});
      }
  }
  
  sub request {
      my ($self, %options) = @_;
  
      my $request_options = $options{request};
      if (!defined($self->{ua})) {
          $self->{ua} = centreon::plugins::backend::http::useragent->new(
              keep_alive => 1, protocols_allowed => ['http', 'https'], timeout => $request_options->{timeout},
              credentials => $request_options->{credentials}, username => $request_options->{username}, password => $request_options->{password});
          if (defined($request_options->{cookies_file})) {
              centreon::plugins::misc::mymodule_load(output => $self->{output}, module => 'HTTP::Cookies',
                                                     error_msg => "Cannot load module 'HTTP::Cookies'.");
              $self->{ua}->cookie_jar(HTTP::Cookies->new(file => $request_options->{cookies_file},
                                                         autosave => 1));
          }
      }
      
      if ($self->{output}->is_debug() && $self->{debug_handlers} == 0) {
          $self->{debug_handlers} = 1;
          $self->{ua}->add_handler("request_send", sub {
              my ($response, $ua, $handler) = @_;
  
              $self->{output}->output_add(long_msg => "======> request send", debug => 1);
              $self->{output}->output_add(long_msg => $response->as_string, debug => 1);
              return ; 
          });
          $self->{ua}->add_handler("response_done", sub { 
              my ($response, $ua, $handler) = @_;
              
              $self->{output}->output_add(long_msg => "======> response done", debug => 1);
              $self->{output}->output_add(long_msg => $response->as_string, debug => 1);
              return ;
          });
      }
      
      if (defined($request_options->{no_follow})) {
          $self->{ua}->requests_redirectable(undef);
      } else {
          $self->{ua}->requests_redirectable([ 'GET', 'HEAD', 'POST' ]);
      }
      if (defined($request_options->{http_peer_addr})) {
          push @LWP::Protocol::http::EXTRA_SOCK_OPTS, PeerAddr => $request_options->{http_peer_addr};
      }
  
      my ($req, $url);
      if (defined($request_options->{full_url})) {
          $url = $request_options->{full_url};
      } elsif (defined($request_options->{port}) && $request_options->{port} =~ /^[0-9]+$/) {
          $url = $request_options->{proto}. "://" . $request_options->{hostname} . ':' . $request_options->{port} . $request_options->{url_path};
      } else {
          $url = $request_options->{proto}. "://" . $request_options->{hostname} . $request_options->{url_path};
      }
  
      my $uri = URI->new($url);
      if (defined($request_options->{get_params})) {
          $uri->query_form($request_options->{get_params});
      }
      $req = HTTP::Request->new($request_options->{method}, $uri);
  
      my $content_type_forced;
      foreach my $key (keys %{$request_options->{headers}}) {
          if ($key !~ /content-type/i) {
              $req->header($key => $request_options->{headers}->{$key});
          } else {
              $content_type_forced = $request_options->{headers}->{$key};
          }
      }
  
      if ($request_options->{method} eq 'POST') {
          if (defined($content_type_forced)) {
              $req->content_type($content_type_forced);
              $req->content($request_options->{query_form_post});
          } else {
              my $uri_post = URI->new();
              if (defined($request_options->{post_params})) {
                  $uri_post->query_form($request_options->{post_params});
              }
              $req->content_type('application/x-www-form-urlencoded');
              $req->content($uri_post->query);
          }
      }
  
      if (defined($request_options->{credentials}) && defined($request_options->{ntlmv2})) {
          centreon::plugins::misc::mymodule_load(output => $self->{output}, module => 'Authen::NTLM',
                                                 error_msg => "Cannot load module 'Authen::NTLM'.");
          Authen::NTLM::ntlmv2(1);
      }
  
      if (defined($request_options->{credentials}) && defined($request_options->{basic})) {
          $req->authorization_basic($request_options->{username}, $request_options->{password});
      }
  
      $self->set_proxy(request => $request_options, url => $url);
  
      if (defined($request_options->{cert_pkcs12}) && $request_options->{cert_file} ne '' && $request_options->{cert_pwd} ne '') {
          eval "use Net::SSL"; die $@ if $@;
          $ENV{HTTPS_PKCS12_FILE} = $request_options->{cert_file};
          $ENV{HTTPS_PKCS12_PASSWORD} = $request_options->{cert_pwd};
      }
  
      if (defined($self->{ssl_context}) && $self->{ssl_context} ne '') {
          my $context = new IO::Socket::SSL::SSL_Context(eval $self->{ssl_context});
          IO::Socket::SSL::set_default_context($context);
      }
  
      $self->{response} = $self->{ua}->request($req);
  
      # Check response
      my $status = 'ok';
      my $message;
  
      eval {
          local $SIG{__WARN__} = sub { $message = $_[0]; };
          local $SIG{__DIE__} = sub { $message = $_[0]; };
  
          if (defined($request_options->{critical_status}) && $request_options->{critical_status} ne '' &&
              eval "$request_options->{critical_status}") {
              $status = 'critical';
          } elsif (defined($request_options->{warning_status}) && $request_options->{warning_status} ne '' &&
              eval "$request_options->{warning_status}") {
              $status = 'warning';
          } elsif (defined($request_options->{unknown_status}) && $request_options->{unknown_status} ne '' &&
              eval "$request_options->{unknown_status}") {
              $status = 'unknown';
          }
      };
      if (defined($message)) {
          $self->{output}->add_option_msg(short_msg => 'filter status issue: ' . $message);
          $self->{output}->option_exit();
      }
  
      if (!$self->{output}->is_status(value => $status, compare => 'ok', litteral => 1)) {
          my $short_msg = $self->{response}->status_line;
          if ($short_msg =~ /^401/) {
              $short_msg .= ' (' . $1 . ' authentication expected)' if (defined($self->{response}->www_authenticate) &&
                  $self->{response}->www_authenticate =~ /(\S+)/);
          }
  
          $self->{output}->output_add(severity => $status,
                                      short_msg => $short_msg);
          $self->{output}->display();
          $self->{output}->exit();
      }
  
      $self->{headers} = $self->{response}->headers();
      return $self->{response}->content;
  }
  
  sub get_headers {
      my ($self, %options) = @_;
      
      my $headers = '';
      foreach ($options{response}->header_field_names()) {
          $headers .= "$_: " . $options{response}->header($_) . "\n";
      }
      
      return $headers;
  }
  
  sub get_first_header {
      my ($self, %options) = @_;
  
      my @redirects = $self->{response}->redirects();
      if (!defined($options{name})) {
          return $self->get_headers(response => defined($redirects[0]) ? $redirects[0] : $self->{response});
      }
  
      return
          defined($redirects[0]) ? 
          $redirects[0]->headers()->header($options{name}) :
          $self->{headers}->header($options{name})
      ;
  }
  
  sub get_header {
      my ($self, %options) = @_;
  
      if (!defined($options{name})) {
          return $self->get_headers(response => $self->{response});
      }
      return $self->{headers}->header($options{name});
  }
  
  sub get_code {
      my ($self, %options) = @_;
  
      return $self->{response}->code();
  }
  
  sub get_message {
      my ($self, %options) = @_;
  
      return $self->{response}->message();
  }
  
  1;
  
  
  =head1 NAME
  
  HTTP LWP backend layer.
  
  =head1 SYNOPSIS
  
  HTTP LWP backend layer.
  
  =head1 BACKEND LWP OPTIONS
  
  =over 8
  
  =item B<--ssl-opt>
  
  Set SSL Options (--ssl-opt="SSL_version => TLSv1" --ssl-opt="SSL_verify_mode => SSL_VERIFY_NONE").
  
  =item B<--ssl>
  
  Set SSL version (--ssl=TLSv1).
  
  =back
  
  =head1 DESCRIPTION
  
  B<http>.
  
  =cut
CENTREON_PLUGINS_BACKEND_HTTP_LWP

$fatpacked{"centreon/plugins/backend/http/useragent.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'CENTREON_PLUGINS_BACKEND_HTTP_USERAGENT';
  #
  # Copyright 2019 Centreon (http://www.centreon.com/)
  #
  # Centreon is a full-fledged industry-strength solution that meets
  # the needs in IT infrastructure and application monitoring for
  # service performance.
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  #
  
  package centreon::plugins::backend::http::useragent;
  
  use strict;
  use warnings;
  use base 'LWP::UserAgent';
  
  sub new {
      my ($class, %options) = @_;
      my $self  = {};
      bless $self, $class;
  
      $self = LWP::UserAgent::new(@_);
      $self->agent("centreon::plugins::backend::http::useragent");
  
      $self->{credentials} = $options{credentials} if defined($options{credentials});
      $self->{username} = $options{username} if defined($options{username});
      $self->{password} = $options{password} if defined($options{password});
  
      return $self;
  }
  
  sub get_basic_credentials {
      my($self, $realm, $uri, $proxy) = @_;
      return if $proxy;
      return $self->{username}, $self->{password} if $self->{credentials} and wantarray;
      return $self->{username}.":".$self->{password} if $self->{credentials};
      return undef;
  }
  
  1;
CENTREON_PLUGINS_BACKEND_HTTP_USERAGENT

$fatpacked{"centreon/plugins/http.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'CENTREON_PLUGINS_HTTP';
  #
  # Copyright 2019 Centreon (http://www.centreon.com/)
  #
  # Centreon is a full-fledged industry-strength solution that meets
  # the needs in IT infrastructure and application monitoring for
  # service performance.
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  #
  
  package centreon::plugins::http;
  
  use strict;
  use warnings;
  
  sub new {
      my ($class, %options) = @_;
      my $self  = {};
      bless $self, $class;
  
      if (!defined($options{noptions}) || $options{noptions} != 1) {
          $options{options}->add_options(arguments => {
              "http-peer-addr:s"  => { name => 'http_peer_addr' },
              "proxyurl:s"        => { name => 'proxyurl' },
              "proxypac:s"        => { name => 'proxypac' },
              "http-backend:s"    => { name => 'http_backend', default => 'lwp' },
          });
          $options{options}->add_help(package => __PACKAGE__, sections => 'HTTP GLOBAL OPTIONS');
      }
  
      centreon::plugins::misc::mymodule_load(output => $options{output}, module => 'centreon::plugins::backend::http::lwp',
                                             error_msg => "Cannot load module 'centreon::plugins::backend::http::lwp'.");
      $self->{backend_lwp} = centreon::plugins::backend::http::lwp->new(%options);
  
      centreon::plugins::misc::mymodule_load(output => $options{output}, module => 'centreon::plugins::backend::http::curl',
                                             error_msg => "Cannot load module 'centreon::plugins::backend::http::curl'.");
      $self->{backend_curl} = centreon::plugins::backend::http::curl->new(%options);
  
      $self->{output} = $options{output};
      $self->{options} = {
          proto => 'http',
          url_path => '/',
          timeout => 5,
          method => 'GET',
          unknown_status => '%{http_code} < 200 or %{http_code} >= 300',
          warning_status => undef,
          critical_status => undef,
      };
  
      $self->{add_headers} = {};
      return $self;
  }
  
  sub set_options {
      my ($self, %options) = @_;
  
      $self->{options} = { %{$self->{options}} };
      foreach (keys %options) {
          $self->{options}->{$_} = $options{$_} if (defined($options{$_}));
      }
  }
  
  sub add_header {
      my ($self, %options) = @_;
  
      $self->{add_headers}->{$options{key}} = $options{value};
  }
  
  sub check_options {
      my ($self, %options) = @_;
  
      $options{request}->{http_backend} = 'lwp'
          if (!defined($options{request}->{http_backend}) || $options{request}->{http_backend} eq '');
      $self->{http_backend} = $options{request}->{http_backend};
      if ($self->{http_backend} !~ /^\s*lwp|curl\s*$/i) {
          $self->{output}->add_option_msg(short_msg => "Unsupported http backend specified '" . $self->{http_backend} . "'.");
          $self->{output}->option_exit();
      }
  
      if (($options{request}->{proto} ne 'http') && ($options{request}->{proto} ne 'https')) {
          $self->{output}->add_option_msg(short_msg => "Unsupported protocol specified '" . $self->{option_results}->{proto} . "'.");
          $self->{output}->option_exit();
      }
      if (!defined($options{request}->{hostname})) {
          $self->{output}->add_option_msg(short_msg => "Please set the hostname option");
          $self->{output}->option_exit();
      }
      if ((defined($options{request}->{credentials})) && (!defined($options{request}->{username}) || !defined($options{request}->{password}))) {
          $self->{output}->add_option_msg(short_msg => "You need to set --username= and --password= options when --credentials is used");
          $self->{output}->option_exit();
      }
      if ((defined($options{request}->{cert_pkcs12})) && (!defined($options{request}->{cert_file}) && !defined($options{request}->{cert_pwd}))) {
          $self->{output}->add_option_msg(short_msg => "You need to set --cert-file= and --cert-pwd= options when --pkcs12 is used");
          $self->{output}->option_exit();
      }
  
      $options{request}->{port_force} = $self->get_port();
  
      $options{request}->{headers} = {};
      if (defined($options{request}->{header})) {
          foreach (@{$options{request}->{header}}) {
              if (/^(.*?):(.*)/) {
                  $options{request}->{headers}->{$1} = $2;
              }
          }
      }
      foreach (keys %{$self->{add_headers}}) {
          $options{request}->{headers}->{$_} = $self->{add_headers}->{$_};
      }
  
      foreach my $method (('get', 'post')) {
          if (defined($options{request}->{$method . '_param'})) {
              $options{request}->{$method . '_params'} = {};
              foreach (@{$options{request}->{$method . '_param'}}) {
                  if (/^([^=]+)={0,1}(.*)$/) {
                      my $key = $1;
                      my $value = defined($2) ? $2 : 1;
                      if (defined($options{request}->{$method . '_params'}->{$key})) {
                          if (ref($options{request}->{$method . '_params'}->{$key}) ne 'ARRAY') {
                              $options{request}->{$method . '_params'}->{$key} = [ $options{request}->{$method . '_params'}->{$key} ];
                          }
                          push @{$options{request}->{$method . '_params'}->{$key}}, $value;
                      } else {
                          $options{request}->{$method . '_params'}->{$key} = $value;
                      }
                  }
              }
          }
      }
      
      $self->{'backend_' . $self->{http_backend}}->check_options(%options);
  }
  
  sub get_port {
      my ($self, %options) = @_;
  
      my $port = '';
      if (defined($self->{options}->{port}) && $self->{options}->{port} ne '') {
          $port = $self->{options}->{port};
      } else {
          $port = 80 if ($self->{options}->{proto} eq 'http');
          $port = 443 if ($self->{options}->{proto} eq 'https');
      }
  
      return $port;
  }
  
  sub get_port_request {
      my ($self, %options) = @_;
  
      my $port = '';
      if (defined($self->{options}->{port}) && $self->{options}->{port} ne '') {
          $port = $self->{options}->{port};
      }
      return $port;
  }
  
  sub request {
      my ($self, %options) = @_;
  
      my $request_options = { %{$self->{options}} };
      foreach (keys %options) {
          $request_options->{$_} = $options{$_} if (defined($options{$_}));
      }
      $self->check_options(request => $request_options);
  
      return $self->{'backend_' . $self->{http_backend}}->request(request => $request_options);
  }
  
  sub get_first_header {
      my ($self, %options) = @_;
  
      return $self->{'backend_' . $self->{http_backend}}->get_first_header(%options);
  }
  
  sub get_header {
      my ($self, %options) = @_;
  
      return $self->{'backend_' . $self->{http_backend}}->get_header(%options);
  }
  
  sub get_code {
      my ($self, %options) = @_;
  
      return $self->{'backend_' . $self->{http_backend}}->get_code();
  }
  
  sub get_message {
      my ($self, %options) = @_;
  
      return $self->{'backend_' . $self->{http_backend}}->get_message();
  }
  
  1;
  
  
  =head1 NAME
  
  HTTP abstraction layer.
  
  =head1 SYNOPSIS
  
  HTTP abstraction layer for lwp and curl backends
  
  =head1 HTTP GLOBAL OPTIONS
  
  =over 8
  
  =item B<--http-peer-addr>
  
  Set the address you want to connect (Useful if hostname is only a vhost. no ip resolve)
  
  =item B<--proxyurl>
  
  Proxy URL
  
  =item B<--proxypac>
  
  Proxy pac file (can be an url or local file)
  
  =item B<--http-backend>
  
  Set the backend used (Default: 'lwp')
  For curl: --http-backend=curl
  
  =back
  
  =head1 DESCRIPTION
  
  B<http>.
  
  =cut
CENTREON_PLUGINS_HTTP

$fatpacked{"centreon/plugins/misc.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'CENTREON_PLUGINS_MISC';
  #
  # Copyright 2019 Centreon (http://www.centreon.com/)
  #
  # Centreon is a full-fledged industry-strength solution that meets
  # the needs in IT infrastructure and application monitoring for
  # service performance.
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  #
  
  package centreon::plugins::misc;
  
  use strict;
  use warnings;
  use utf8;
  
  sub execute {
      my (%options) = @_;
      
      if ($^O eq 'MSWin32') {
          return windows_execute(%options, timeout => $options{options}->{timeout});
      } else {
          return unix_execute(%options);
      }
  }
  
  sub windows_execute {
      my (%options) = @_;
      my $result;
      my ($stdout, $pid, $ended) = ('');
      my ($exit_code, $cmd);
      
      $cmd = $options{command_path} . '/' if (defined($options{command_path}));
      $cmd .= $options{command} . ' ' if (defined($options{command}));
      $cmd .= $options{command_options} if (defined($options{command_options}));
      
      centreon::plugins::misc::mymodule_load(output => $options{output}, module => 'Win32::Job',
                                             error_msg => "Cannot load module 'Win32::Job'.");
      centreon::plugins::misc::mymodule_load(output => $options{output}, module => 'Time::HiRes',
                                             error_msg => "Cannot load module 'Time::HiRes'.");
      
      $| = 1;
      pipe FROM_CHILD, TO_PARENT or do {
          $options{output}->add_option_msg(short_msg => "Internal error: can't create pipe from child to parent: $!");
          $options{output}->option_exit();
      };
      my $job = Win32::Job->new;
      my $stderr = 'NUL';
      $stderr = \*TO_PARENT if ($options{output}->is_debug());
      if (!($pid = $job->spawn(undef, $cmd,
                         { stdin => 'NUL',
                           stdout => \*TO_PARENT,
                           stderr => $stderr }))) {
          $options{output}->add_option_msg(short_msg => "Internal error: execution issue: $^E");
          $options{output}->option_exit();
      }
      close TO_PARENT;
  
      my $ein = '';
      vec($ein, fileno(FROM_CHILD), 1) = 1;
      $job->watch(
          sub {            
              my ($buffer);
              my $time = $options{timeout};
              my $last_time = Time::HiRes::time();
              $ended = 0;
              while (select($ein, undef, undef, $options{timeout})) {
                  if (sysread(FROM_CHILD, $buffer, 16384)) {
                      $buffer =~ s/\r//g;
                      $stdout .= $buffer;
                  } else {
                      $ended = 1;
                      last;
                  }
                  $options{timeout} -= Time::HiRes::time() - $last_time;
                  last if ($options{timeout} <= 0);         
                  $last_time = Time::HiRes::time();
              }
              return 1 if ($ended == 0);
              return 0;
          },
          0.1
      );
          
      $result = $job->status;
      close FROM_CHILD;    
      
      if ($ended == 0) {
          $options{output}->add_option_msg(short_msg => 'Command too long to execute (timeout)...');
          $options{output}->option_exit();
      }
      chomp $stdout;
      
      if (defined($options{no_quit}) && $options{no_quit} == 1) {
          return ($stdout, $result->{$pid}->{exitcode});
      }
      
      if ($result->{$pid}->{exitcode} != 0) {
          $stdout =~ s/\n/ - /g;
          $options{output}->add_option_msg(short_msg => "Command error: $stdout");
          $options{output}->option_exit();
      }
      
      return ($stdout, $result->{$pid}->{exitcode});
  }
  
  sub unix_execute {
      my (%options) = @_;
      my $cmd = '';
      my $args = [];
      my ($lerror, $stdout, $exit_code);
  
      my $redirect_stderr = 1;
      $redirect_stderr = $options{redirect_stderr} if (defined($options{redirect_stderr}));
      my $wait_exit = 1;
      $wait_exit = $options{wait_exit} if (defined($options{wait_exit}));
      
      # Build command line
      # Can choose which command is done remotely (can filter and use local file)
      if (defined($options{options}->{remote}) && 
          ($options{options}->{remote} eq '' || !defined($options{label}) || $options{label} =~ /$options{options}->{remote}/)) {
          my $sub_cmd;
  
          $cmd = $options{options}->{ssh_path} . '/' if (defined($options{options}->{ssh_path}));
          $cmd .= $options{options}->{ssh_command} if (defined($options{options}->{ssh_command}));
          
          foreach (@{$options{options}->{ssh_option}}) {
              my ($lvalue, $rvalue) = split /=/;
              push @$args, $lvalue if (defined($lvalue));
              push @$args, $rvalue if (defined($rvalue));
          }
          
          if (defined($options{options}->{ssh_address}) && $options{options}->{ssh_address} ne '') {
              push @$args, $options{options}->{ssh_address};
          } else {
              push @$args, $options{options}->{hostname};
          }
  		
          $sub_cmd = 'sudo ' if (defined($options{sudo}));
          $sub_cmd .= $options{command_path} . '/' if (defined($options{command_path}));
          $sub_cmd .= $options{command} . ' ' if (defined($options{command}));
          $sub_cmd .= $options{command_options} if (defined($options{command_options}));
          # On some equipment. Cannot get a pseudo terminal
          if (defined($options{ssh_pipe}) && $options{ssh_pipe} == 1) {
              $cmd = "echo '" . $sub_cmd . "' | " . $cmd . ' ' . join(' ', @$args);
              ($lerror, $stdout, $exit_code) = backtick(
                  command => $cmd,
                  timeout => $options{options}->{timeout},
                  wait_exit => $wait_exit,
                  redirect_stderr => $redirect_stderr
              );
          } else {
              ($lerror, $stdout, $exit_code) = backtick(
                  command => $cmd,
                  arguments => [@$args, $sub_cmd],
                  timeout => $options{options}->{timeout},
                  wait_exit => $wait_exit,
                  redirect_stderr => $redirect_stderr
              );
          }
      } else {
          $cmd = 'sudo ' if (defined($options{sudo}));
          $cmd .= $options{command_path} . '/' if (defined($options{command_path}));
          $cmd .= $options{command} . ' ' if (defined($options{command}));
          $cmd .= $options{command_options} if (defined($options{command_options}));
          
          ($lerror, $stdout, $exit_code) = backtick(
              command => $cmd,
              timeout => $options{options}->{timeout},
              wait_exit => $wait_exit,
              redirect_stderr => $redirect_stderr
          );
      }
  
      if (defined($options{options}->{show_output}) && 
          ($options{options}->{show_output} eq '' || (defined($options{label}) && $options{label} eq $options{options}->{show_output}))) {
          print $stdout;
          exit $exit_code;
      }
      
      $stdout =~ s/\r//g;
      if ($lerror <= -1000) {
          $options{output}->add_option_msg(short_msg => $stdout);
          $options{output}->option_exit();
      }
      
      if (defined($options{no_quit}) && $options{no_quit} == 1) {
          return ($stdout, $exit_code);
      }
      
      if ($exit_code != 0 && (!defined($options{no_errors}) || !defined($options{no_errors}->{$exit_code}))) {
          $stdout =~ s/\n/ - /g;
          $options{output}->add_option_msg(short_msg => "Command error: $stdout");
          $options{output}->option_exit();
      }
      
      return $stdout;
  }
  
  sub mymodule_load {
      my (%options) = @_;
      my $file;
      ($file = ($options{module} =~ /\.pm$/ ? $options{module} : $options{module} . '.pm')) =~ s{::}{/}g;
      
      eval {
          local $SIG{__DIE__} = 'IGNORE';
          require $file;
          $file =~ s{/}{::}g;
          $file =~ s/\.pm$//;
      };
      if ($@) {
          return 1 if (defined($options{no_quit}) && $options{no_quit} == 1);
          $options{output}->add_option_msg(long_msg => $@);
          $options{output}->add_option_msg(short_msg => $options{error_msg});
          $options{output}->option_exit();
      }
      return wantarray ? (0, $file) : 0;
  }
  
  sub backtick {
      my %arg = (
          command => undef,
          arguments => [],
          timeout => 30,
          wait_exit => 0,
          redirect_stderr => 0,
          @_,
      );
      my @output;
      my $pid;
      my $return_code;
      
      my $sig_do;
      if ($arg{wait_exit} == 0) {
          $sig_do = 'IGNORE';
          $return_code = undef;
      } else {
          $sig_do = 'DEFAULT';
      }
      local $SIG{CHLD} = $sig_do;
      $SIG{TTOU} = 'IGNORE';
      $| = 1;
  
      if (!defined($pid = open( KID, "-|" ))) {
          return (-1001, "Cant fork: $!", -1);
      }
  
      if ($pid) {
          
          eval {
             local $SIG{ALRM} = sub { die "Timeout by signal ALARM\n"; };
             alarm( $arg{timeout} );
             while (<KID>) {
                 chomp;
                 push @output, $_;
             }
  
             alarm(0);
          };
  
          if ($@) {
              if ($pid != -1) {
                  kill -9, $pid;
              }
  
              alarm(0);
              return (-1000, 'Command too long to execute (timeout)...', -1);
          } else {
              if ($arg{wait_exit} == 1) {
                  # We're waiting the exit code                
                  waitpid($pid, 0);
                  $return_code = ($? >> 8);
              }
              close KID;
          }
      } else {
          # child
          # set the child process to be a group leader, so that
          # kill -9 will kill it and all its descendents
          # We have ignore SIGTTOU to let write background processes
          setpgrp( 0, 0 );
  
          if ($arg{redirect_stderr} == 1) {
              open STDERR, '>&STDOUT';
          }
          if (scalar(@{$arg{arguments}}) <= 0) {
              exec($arg{command});
          } else {
              exec($arg{command}, @{$arg{arguments}});
          }
          # Exec is in error. No such command maybe.
          exit(127);
      }
  
      return (0, join("\n", @output), $return_code);
  }
  
  sub trim {
      my ($value) = $_[0];
      
      # Sometimes there is a null character
      $value =~ s/\x00$//;
      $value =~ s/^[ \t\n]+//;
      $value =~ s/[ \t\n]+$//;
      return $value;
  }
  
  sub powershell_encoded {
      my ($value) = $_[0];
  
      require Encode;
      require MIME::Base64;
      my $bytes = Encode::encode('utf16LE', $value);
      my $script = MIME::Base64::encode_base64($bytes, "\n");
      $script =~ s/\n//g;
      return $script;
  }
  
  sub powershell_escape {
      my ($value) = $_[0];
      $value =~ s/`/``/g;
      $value =~ s/#/`#/g;
      $value =~ s/'/`'/g;
      $value =~ s/"/`"/g;
      return $value;
  }
  
  sub powershell_json_sanitizer {
      my (%options) = @_;
  
      centreon::plugins::misc::mymodule_load(output => $options{output}, module => 'JSON::XS',
                                             error_msg => "Cannot load module 'JSON::XS'.");
      foreach my $line (split /\n/, $options{string}) {
          eval { JSON::XS->new->utf8->decode($line) };
          return $line if (!$@);
      }
      return -1;
  }
  
  sub minimal_version {
      my ($version_src, $version_dst) = @_;
          
      # No Version. We skip   
      if (!defined($version_src) || !defined($version_dst) || 
          $version_src !~ /^[0-9]+(?:\.[0-9\.]+)*$/ || $version_dst !~ /^[0-9x]+(?:\.[0-9x]+)*$/) {
          return 1;
      }
    
      my @version_src = split /\./, $version_src;
      my @versions = split /\./, $version_dst;
      for (my $i = 0; $i < scalar(@versions); $i++) {
          return 1 if ($versions[$i] eq 'x');
          return 1 if (!defined($version_src[$i]));
          $version_src[$i] =~ /^([0-9]*)/;
          next if ($versions[$i] == int($1));
          return 0 if ($versions[$i] > int($1));
          return 1 if ($versions[$i] < int($1));
      }
      
      return 1;
  }
  
  sub change_seconds {
      my %options = @_;
      my ($str, $str_append) = ('', '');
      my $periods = [
          { unit => 'y', value => 31556926 },
          { unit => 'M', value => 2629743 },
          { unit => 'w', value => 604800 },
          { unit => 'd', value => 86400 },
          { unit => 'h', value => 3600 },
          { unit => 'm', value => 60 },
          { unit => 's', value => 1 },
      ];
      my %values = ('y' => 1, 'M' => 2, 'w' => 3, 'd' => 4, 'h' => 5, 'm' => 6, 's' => 7);
  
      foreach (@$periods) {
          next if (defined($options{start}) && $values{$_->{unit}} < $values{$options{start}});
          my $count = int($options{value} / $_->{value});
  
          next if ($count == 0);
          $str .= $str_append . $count . $_->{unit};
          $options{value} = $options{value} % $_->{value};
          $str_append = ' ';
      }
  
      return $str;
  }
  
  sub scale_bytesbit {
      my (%options) = @_;
      
      my $base = 1024;
      if (defined($options{dst_unit}) && defined($options{src_unit})) {
          $options{value} *= 8 if ($options{dst_unit} =~ /b/ && $options{src_unit} =~ /B/);
          $options{value} /= 8 if ($options{dst_unit} =~ /B/ && $options{src_unit} =~ /b/);
          if ($options{dst_unit} =~ /b/) {
              $base = 1000;
          }
      }
          
      my %expo = ('' => 0, k => 1, m => 2, g => 3, t => 4, p => 5, e => 6);
      my ($src_expo, $dst_expo) = (0, 0);
      $src_expo = $expo{lc($options{src_quantity})} if (defined($options{src_quantity}) && $options{src_quantity} =~ /[kmgtpe]/i);
      if ($options{dst_unit} eq 'auto') {
          my @auto = ('', 'k', 'm', 'g', 't', 'p', 'e');
          my $i = defined($options{src_quantity}) ? $expo{$options{src_quantity}} : 0;
          for (; $i < scalar(@auto); $i++) {
              last if ($options{value} < $base);
              $options{value} = $options{value} / $base;
          }
  
          return ($options{value}, $auto[$i], $options{src_unit});
      } elsif (defined($options{dst_quantity}) && ($options{dst_quantity} eq '' || $options{dst_quantity} =~ /[kmgtpe]/i )) {
          my $dst_expo = $expo{lc($options{dst_quantity})};
          if ($dst_expo - $src_expo > 0) {
              $options{value} = $options{value} / ($base ** ($dst_expo - $src_expo));
          } elsif ($dst_expo - $src_expo < 0) {
              $options{value} = $options{value} * ($base ** (($dst_expo - $src_expo) * -1));
          }
      }
      
      return $options{value};
  }
  
  sub convert_bytes {
      my (%options) = @_;
  
      my %expo = (k => 1, m => 2, g => 3, t => 4, p => 5);
      my $value = $options{value};
      my $base = defined($options{network}) ? 1000 : 1024;    
      if ($options{unit} =~ /([kmgt])b/i) {
          $value = $value * ($base ** $expo{lc($1)});
      }
  
      return $value;
  }
  
  sub expand_exponential {
      my (%options) = @_;
      
      return $options{value} unless ($options{value} =~ /^(.*)e([-+]?)(.*)$/);
      my ($num, $sign, $exp) = ($1, $2, $3);
      my $sig = $sign eq '-' ? "." . ($exp - 1 + length $num) : '';
      return sprintf("%${sig}f", $options{value});
  }
  
  sub parse_threshold {
      my (%options) = @_;
  
      my $perf = trim($options{threshold});
      my $perf_result = { arobase => 0, infinite_neg => 0, infinite_pos => 0, start => '', end => '' };
  
      my $global_status = 1;    
      if ($perf =~ /^(\@?)((?:~|(?:\+|-)?\d+(?:[\.,]\d+)?(?:[KMGTPE][bB])?|):)?((?:\+|-)?\d+(?:[\.,]\d+)?(?:[KMGTPE][bB])?)?$/) {
          $perf_result->{start} = $2 if (defined($2));
          $perf_result->{end} = $3 if (defined($3));
          $perf_result->{arobase} = 1 if (defined($1) && $1 eq '@');
          $perf_result->{start} =~ s/[\+:]//g;
          $perf_result->{end} =~ s/\+//;
          if ($perf_result->{start} =~ s/([KMGTPE])([bB])//) {
              $perf_result->{start} = scale_bytesbit(
                  value => $perf_result->{start},
                  src_unit => $2, dst_unit => $2,
                  src_quantity => $1, dst_quantity => '',
              );
          }
          if ($perf_result->{end} =~ s/([KMGTPE])([bB])//) {
              $perf_result->{end} = scale_bytesbit(
                  value => $perf_result->{end},
                  src_unit => $2, dst_unit => $2,
                  src_quantity => $1, dst_quantity => '',
              );
          }
          if ($perf_result->{end} eq '') {
              $perf_result->{end} = 1e500;
              $perf_result->{infinite_pos} = 1;
          }
          $perf_result->{start} = 0 if ($perf_result->{start} eq '');      
          $perf_result->{start} =~ s/,/\./;
          $perf_result->{end} =~ s/,/\./;
          
          if ($perf_result->{start} eq '~') {
              $perf_result->{start} = -1e500;
              $perf_result->{infinite_neg} = 1;
          }
      } else {
          $global_status = 0;
      }
  
      return ($global_status, $perf_result);
  }
  
  sub get_threshold_litteral {
      my (%options) = @_;
      
      my $perf_output = ($options{arobase} == 1 ? '@' : '') . 
                        (($options{infinite_neg} == 0) ? $options{start} : '~') . 
                        ':' . 
                        (($options{infinite_pos} == 0) ? $options{end} : '');
      return $perf_output;
  }
  
  sub set_timezone {
      my (%options) = @_;
      
      return {} if (!defined($options{name}) || $options{name} eq '');
       
      centreon::plugins::misc::mymodule_load(output => $options{output}, module => 'DateTime::TimeZone',
                                             error_msg => "Cannot load module 'DateTime::TimeZone'.");
      if (DateTime::TimeZone->is_valid_name($options{name})) {
          return { time_zone => DateTime::TimeZone->new(name => $options{name}) };
      }
      
      # try to manage syntax (:Pacific/Noumea for example)
      if ($options{name} =~ /^:(.*)$/ && DateTime::TimeZone->is_valid_name($1)) {
          return { time_zone => DateTime::TimeZone->new(name => $1) };
      }
  
      return {};
  }
  
  1;
  
  
CENTREON_PLUGINS_MISC

$fatpacked{"centreon/plugins/mode.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'CENTREON_PLUGINS_MODE';
  #
  # Copyright 2019 Centreon (http://www.centreon.com/)
  #
  # Centreon is a full-fledged industry-strength solution that meets
  # the needs in IT infrastructure and application monitoring for
  # service performance.
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  #
  
  package centreon::plugins::mode;
  
  use strict;
  use warnings;
  use centreon::plugins::perfdata;
  
  sub new {
      my ($class, %options) = @_;
      my $self  = {};
      bless $self, $class;
  
      $self->{perfdata} = centreon::plugins::perfdata->new(output => $options{output});
      
      %{$self->{option_results}} = ();
      $self->{output} = $options{output};
      $self->{output}->use_new_perfdata(value => 1)
          if (defined($options{force_new_perfdata}) && $options{force_new_perfdata} == 1);
      $self->{mode} = $options{mode};
      $self->{version} = '1.0';
  
      return $self;
  }
  
  sub init {
      my ($self, %options) = @_;
      # options{default} = { mode_xxx => { option_name => option_value }, }
  
      %{$self->{option_results}} = %{$options{option_results}};
      # Manage default value
      return if (!defined($options{default}));
      foreach (keys %{$options{default}}) {
          if ($_ eq $self->{mode}) {
              foreach my $value (keys %{$options{default}->{$_}}) {
                  if (!defined($self->{option_results}->{$value})) {
                      $self->{option_results}->{$value} = $options{default}->{$_}->{$value};
                  }
              }
          }
      }
  }
  
  sub version {
      my ($self, %options) = @_;
      
      $self->{output}->add_option_msg(short_msg => "Mode Version: " . $self->{version});
  }
  
  sub disco_format {
      my ($self, %options) = @_;
  
  }
  
  sub disco_show {
      my ($self, %options) = @_;
  
  }
  
  1;
  
  
CENTREON_PLUGINS_MODE

$fatpacked{"centreon/plugins/options.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'CENTREON_PLUGINS_OPTIONS';
  #
  # Copyright 2019 Centreon (http://www.centreon.com/)
  #
  # Centreon is a full-fledged industry-strength solution that meets
  # the needs in IT infrastructure and application monitoring for
  # service performance.
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  #
  
  package centreon::plugins::options;
  
  use Pod::Usage;
  use Pod::Find qw(pod_where);
  use strict;
  use warnings;
  
  my $alternative = 1;
  
  sub new {
      my ($class) = @_;
      my $self  = {};
      bless $self, $class;
  
      $self->{sanity} = 0;
      $self->{options_stored} = {};
      $self->{options} = {};
      @{$self->{pod_package}} = ();
      $self->{pod_packages_once} = {};
      
      if ($alternative == 0) {
          require Getopt::Long;
          Getopt::Long->import();
          Getopt::Long::Configure("pass_through");
          Getopt::Long::Configure('bundling');
          Getopt::Long::Configure('no_auto_abbrev');
      } else {
          require centreon::plugins::alternative::Getopt;
          $centreon::plugins::alternative::Getopt::warn_message = 0;
          centreon::plugins::alternative::Getopt->import();
      }
      
      return $self;
  }
  
  sub set_sanity {
      my ($self, %options) = @_;
      
      if ($alternative == 0) {
          Getopt::Long::Configure('no_pass_through');
      } else {
          $centreon::plugins::alternative::Getopt::warn_message = 1;
      }
  
      $self->{sanity} = 1;
  }
  
  sub set_output {
      my ($self, %options) = @_;
      
      $self->{output} = $options{output};
  }
  
  sub display_help {
      my ($self, %options) = @_;
      
      my $stdout;
      foreach (@{$self->{pod_package}}) {
          
          {
              local *STDOUT;
              open STDOUT, '>', \$stdout;
              my $where = pod_where({-inc => 1}, $_->{package});
              pod2usage(-exitval => 'NOEXIT', -input => $where,
                        -verbose => 99, 
                        -sections => $_->{sections}) if (defined($where));
          }
          
          $self->{output}->add_option_msg(long_msg => $stdout) if (defined($stdout));
      }
  }
  
  sub add_help {
      my ($self, %options) = @_;
      # $options{package} = string package
      # $options{sections} = string sections
      # $options{help_first} = put at the beginning
      # $options{once} = put help only one time for a package
      
      if (defined($options{once}) && defined($self->{pod_packages_once}->{$options{package}})) {
          return ;
      }
      
      if (defined($options{help_first})) {
          unshift @{$self->{pod_package}}, {package => $options{package}, sections => $options{sections}};
      } else {
          push @{$self->{pod_package}}, { package => $options{package}, sections => $options{sections} };
      }
      
      $self->{pod_packages_once}->{$options{package}} = 1;
  }
  
  sub add_options {
      my ($self, %options) = @_;
      # $options{arguments} = ref to hash table with string and name to store (example: { 'mode:s' => { name => 'mode', default => 'defaultvalue' )
      
      foreach (keys %{$options{arguments}}) {
          if (defined($options{arguments}->{$_}->{redirect})) {
              $self->{options}->{$_} = \$self->{options_stored}->{$options{arguments}->{$_}->{redirect}};
              next;
          }
          
          if (defined($options{arguments}->{$_}->{default})) {
              $self->{options_stored}->{$options{arguments}->{$_}->{name}} = $options{arguments}->{$_}->{default};
          } else {
              $self->{options_stored}->{$options{arguments}->{$_}->{name}} = undef;
          }
          
          $self->{options}->{$_} = \$self->{options_stored}->{$options{arguments}->{$_}->{name}};
      }
  }
  
  sub parse_options {
      my $self = shift;
      #%{$self->{options_stored}} = ();
  
      my $save_warn_handler;
      if ($self->{sanity} == 1) {
          $save_warn_handler = $SIG{__WARN__};
          $SIG{__WARN__} = sub {
              $self->{output}->add_option_msg(short_msg => $_[0]);
              $self->{output}->option_exit(nolabel => 1);
          };
      }
      
      GetOptions(
         %{$self->{options}}
      );
      %{$self->{options}} = ();
      
      $SIG{__WARN__} = $save_warn_handler if ($self->{sanity} == 1);
  }
  
  sub get_option {
      my ($self, %options) = @_;
  
      return $self->{options_stored}->{$options{argument}};
  }
  
  sub get_options {
      my $self = shift;
  
      return $self->{options_stored};
  }
  
  sub clean {
      my $self = shift;
      
      $self->{options_stored} = {};
  }
  
  1;
  
CENTREON_PLUGINS_OPTIONS

$fatpacked{"centreon/plugins/output.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'CENTREON_PLUGINS_OUTPUT';
  #
  # Copyright 2019 Centreon (http://www.centreon.com/)
  #
  # Centreon is a full-fledged industry-strength solution that meets
  # the needs in IT infrastructure and application monitoring for
  # service performance.
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  #
  
  package centreon::plugins::output;
  
  use strict;
  use warnings;
  use centreon::plugins::misc;
  
  sub new {
      my ($class, %options) = @_;
      my $self  = {};
      bless $self, $class;
      if (!defined($options{options})) {
          print "Class Output: Need to specify 'options' argument to load.\n";
          exit 3;
      }
  
      $options{options}->add_options(arguments => {
          'explode-perfdata-max:s@' => { name => 'explode_perfdata_max' },
          'range-perfdata:s'        => { name => 'range_perfdata' },
          'filter-perfdata:s'       => { name => 'filter_perfdata' },
          'change-perfdata:s@'      => { name => 'change_perfdata' },
          'extend-perfdata:s@'      => { name => 'extend_perfdata' },
          'extend-perfdata-group:s@'=> { name => 'extend_perfdata_group' },
          'change-short-output:s@'  => { name => 'change_short_output' },
          'use-new-perfdata'        => { name => 'use_new_perfdata' },
          'filter-uom:s'            => { name => 'filter_uom' },
          'verbose'                 => { name => 'verbose' },
          'debug'                   => { name => 'debug' },
          'opt-exit:s'              => { name => 'opt_exit', default => 'unknown' },
          'output-xml'              => { name => 'output_xml' },
          'output-json'             => { name => 'output_json' },
          'output-openmetrics'      => { name => 'output_openmetrics' },
          'output-file:s'           => { name => 'output_file' },
          'disco-format'            => { name => 'disco_format' },
          'disco-show'              => { name => 'disco_show' },
          'float-precision:s'       => { name => 'float_precision', default => 8 },
      });
      
      %{$self->{option_results}} = ();
  
      $self->{option_msg} = [];
      
      $self->{is_output_xml} = 0;
      $self->{is_output_json} = 0;
      $self->{errors} = {OK => 0, WARNING => 1, CRITICAL => 2, UNKNOWN => 3, PENDING => 4};
      $self->{errors_num} = {0 => 'OK', 1 => 'WARNING', 2 => 'CRITICAL', 3 => 'UNKNOWN', 4 => 'PENDING'};
      $self->{myerrors} = {0 => "OK", 1 => "WARNING", 3 => "UNKNOWN", 7 => "CRITICAL"};
      $self->{myerrors_mask} = {CRITICAL => 7, WARNING => 1, UNKNOWN => 3, OK => 0};
      $self->{global_short_concat_outputs} = {OK => undef, WARNING => undef, CRITICAL => undef, UNKNOWN => undef, UNQUALIFIED_YET => undef};
      $self->{global_short_outputs} = {OK => [], WARNING => [], CRITICAL => [], UNKNOWN => [], UNQUALIFIED_YET => []};
      $self->{global_long_output} = [];
      $self->{perfdatas} = [];
      $self->{explode_perfdatas} = {};
      $self->{change_perfdata} = {};
      $self->{explode_perfdata_total} = 0;
      $self->{range_perfdata} = 0;
      $self->{global_status} = 0;
      $self->{encode_utf8_import} = 0;
      $self->{perlqq} = 0;
  
      $self->{disco_elements} = [];
      $self->{disco_entries} = [];
  
      $self->{plugin} = '';
      $self->{mode} = '';
  
      return $self;
  }
  
  sub check_options {
      my ($self, %options) = @_;
      # $options{option_results} = ref to options result
  
      %{$self->{option_results}} = %{$options{option_results}};
      $self->{option_results}->{opt_exit} = lc($self->{option_results}->{opt_exit});
      if (!$self->is_litteral_status(status => $self->{option_results}->{opt_exit})) {
          $self->add_option_msg(short_msg => "Unknown value '" . $self->{option_results}->{opt_exit}  . "' for --opt-exit.");
          $self->option_exit(exit_litteral => 'unknown');
      }
      # Go in XML Mode
      if ($self->is_disco_show() || $self->is_disco_format()) {
          # By Default XML
          if (!defined($self->{option_results}->{output_json})) {
              $self->{option_results}->{output_xml} = 1;
          }
      }
      
      if (defined($self->{option_results}->{range_perfdata})) {
          $self->{range_perfdata} = $self->{option_results}->{range_perfdata};
          $self->{range_perfdata} = 1 if ($self->{range_perfdata} eq '');
          if ($self->{range_perfdata} !~ /^[012]$/) {
              $self->add_option_msg(short_msg => "Wrong range-perfdata option '" . $self->{range_perfdata} . "'");
              $self->option_exit();
          }
      }
      
      if (defined($self->{option_results}->{explode_perfdata_max})) {
          if (${$self->{option_results}->{explode_perfdata_max}}[0] eq '') {
              $self->{explode_perfdata_total} = 2;
          } else {
              $self->{explode_perfdata_total} = 1;
              foreach (@{$self->{option_results}->{explode_perfdata_max}}) {
                  my ($perf_match, $perf_result) = split /,/;
                  if (!defined($perf_result)) {
                      $self->add_option_msg(short_msg => "Wrong explode-perfdata-max option '" . $_ . "' (syntax: match,value)");
                      $self->option_exit();
                  }
                  $self->{explode_perfdatas}->{$perf_match} = $perf_result;
              }
          }
      }
      
      $self->load_perfdata_extend_args();
      $self->{option_results}->{use_new_perfdata} = 1 if (defined($self->{option_results}->{output_openmetrics}));
  }
  
  sub add_option_msg {
      my ($self, %options) = @_;
      # $options{short_msg} = string msg
      # $options{long_msg} = string msg
      $options{severity} = 'UNQUALIFIED_YET';
      
      $self->output_add(%options);
  }
  
  sub set_status {
      my ($self, %options) = @_;
      # $options{exit_litteral} = string litteral exit
  
      # Nothing to do for 'UNQUALIFIED_YET'
      if (!$self->{myerrors_mask}->{uc($options{exit_litteral})}) {
          return ;
      }
      $self->{global_status} |= $self->{myerrors_mask}->{uc($options{exit_litteral})};
  }
  
  sub output_add {
      my ($self, %params) = @_;
      my %args = (
          severity => 'OK',
          separator => ' - ',
          debug => 0,
          short_msg => undef,
          long_msg => undef,
      );
      my $options = {%args, %params};
      
      if (defined($options->{short_msg})) {
          chomp $options->{short_msg};
          if (defined($self->{global_short_concat_outputs}->{uc($options->{severity})})) {
              $self->{global_short_concat_outputs}->{uc($options->{severity})} .= $options->{separator} . $options->{short_msg};
          } else {
              $self->{global_short_concat_outputs}->{uc($options->{severity})} = $options->{short_msg};
          }
          
          push @{$self->{global_short_outputs}->{uc($options->{severity})}}, $options->{short_msg};
          $self->set_status(exit_litteral => $options->{severity});
      }
      if (defined($options->{long_msg}) && 
          ($options->{debug} == 0 || defined($self->{option_results}->{debug}))) {
          chomp $options->{long_msg};
          push @{$self->{global_long_output}}, $options->{long_msg};
      }
  }
  
  sub perfdata_add {
      my ($self, %options) = @_;
      my $perfdata = {
          label => '', value => '', unit => '', warning => '', critical => '', min => '', max => ''
      };
      foreach (keys %options) {
          next if (!defined($options{$_}));
          $perfdata->{$_} = $options{$_};
      }
      
      if (defined($self->{option_results}->{use_new_perfdata}) && defined($options{nlabel})) {
          $perfdata->{label} = $options{nlabel};
      }
      if (defined($options{instances})) {
          $options{instances} = [$options{instances}] if (!ref($options{instances}));
          my ($external_instance_separator, $internal_instance_separator) = ('#', '~');
          if (defined($self->{option_results}->{use_new_perfdata})) {
              $perfdata->{label} = join('~', @{$options{instances}}) . '#' . $perfdata->{label};
          } else {
              $perfdata->{label} .= '_' . join('_', @{$options{instances}});
          }
      }
      
      $perfdata->{label} =~ s/'/''/g;
      push @{$self->{perfdatas}}, $perfdata;
  }
  
  sub range_perfdata {
      my ($self, %options) = @_;
      
      return if ($self->{range_perfdata} == 0);
      if ($self->{range_perfdata} == 1) {
          for (my $i = 0; $i < scalar(@{$options{ranges}}); $i++) {
              ${${$options{ranges}}[$i]} =~ s/^(@?)-?[0\.]+:/$1/;
          }
      } else {
          for (my $i = 0; $i < scalar(@{$options{ranges}}); $i++) {
              ${${$options{ranges}}[$i]} = '';
          }
      }
  }
  
  sub output_json {
      my ($self, %options) = @_;
      my $force_ignore_perfdata = (defined($options{force_ignore_perfdata}) && $options{force_ignore_perfdata} == 1) ? 1 : 0;
      my $force_long_output = (defined($options{force_long_output}) && $options{force_long_output} == 1) ? 1 : 0;
      my $json_content = {
          plugin => {
              name => $self->{plugin},
              mode => $self->{mode},
              exit => $options{exit_litteral},
              outputs => [],
              perfdatas => []
          }
      };    
  
      foreach my $code_litteral (keys %{$self->{global_short_outputs}}) {
          foreach (@{$self->{global_short_outputs}->{$code_litteral}}) {
              my ($child_output, $child_type, $child_msg, $child_exit);
              my $lcode_litteral = ($code_litteral eq 'UNQUALIFIED_YET' ? uc($options{exit_litteral}) : $code_litteral);
  
              push @{$json_content->{plugin}->{outputs}}, {
                  type => 1,
                  msg => ($options{nolabel} == 0 ? ($lcode_litteral . ': ') : '') . $_,
                  exit => $lcode_litteral
              };
          }
      }
  
      if (defined($self->{option_results}->{verbose}) || $force_long_output == 1) {
          foreach (@{$self->{global_long_output}}) {
              push @{$json_content->{plugin}->{outputs}}, {
                  type => 2,
                  msg => $_,
              };
          }
      }
  
      if ($options{force_ignore_perfdata} == 0) {
          $self->change_perfdata();
          foreach my $perf (@{$self->{perfdatas}}) {
              next if (defined($self->{option_results}->{filter_perfdata}) &&
                       $perf->{label} !~ /$self->{option_results}->{filter_perfdata}/);
              $self->range_perfdata(ranges => [\$perf->{warning}, \$perf->{critical}]);
              
              my %values = ();
              foreach my $key (keys %$perf) {
                  $perf->{$key} = '' if (defined($self->{option_results}->{filter_uom}) && $key eq 'unit' &&
                      $perf->{$key} !~ /$self->{option_results}->{filter_uom}/);
                  $values{$key} = $perf->{$key};
              }
              
              push @{$json_content->{plugin}->{perfdatas}}, {
                  %values
              };
          }
      }
  
      print $self->{json_output}->encode($json_content);
  }
  
  sub output_xml {
      my ($self, %options) = @_;
      my $force_ignore_perfdata = (defined($options{force_ignore_perfdata}) && $options{force_ignore_perfdata} == 1) ? 1 : 0;
      my $force_long_output = (defined($options{force_long_output}) && $options{force_long_output} == 1) ? 1 : 0;
      my ($child_plugin_name, $child_plugin_mode, $child_plugin_exit, $child_plugin_output, $child_plugin_perfdata); 
  
      my $root = $self->{xml_output}->createElement('plugin');
      $self->{xml_output}->setDocumentElement($root);
  
      $child_plugin_name = $self->{xml_output}->createElement('name');
      $child_plugin_name->appendText($self->{plugin});
  
      $child_plugin_mode = $self->{xml_output}->createElement('mode');
      $child_plugin_mode->appendText($self->{mode});
  
      $child_plugin_exit = $self->{xml_output}->createElement('exit');
      $child_plugin_exit->appendText($options{exit_litteral});
  
      $child_plugin_output = $self->{xml_output}->createElement('outputs');
      $child_plugin_perfdata = $self->{xml_output}->createElement('perfdatas');
  
      $root->addChild($child_plugin_name);
      $root->addChild($child_plugin_mode);
      $root->addChild($child_plugin_exit);
      $root->addChild($child_plugin_output);
      $root->addChild($child_plugin_perfdata);
  
      foreach my $code_litteral (keys %{$self->{global_short_outputs}}) {
          foreach (@{$self->{global_short_outputs}->{$code_litteral}}) {
              my ($child_output, $child_type, $child_msg, $child_exit);
              my $lcode_litteral = ($code_litteral eq 'UNQUALIFIED_YET' ? uc($options{exit_litteral}) : $code_litteral);
  
              $child_output = $self->{xml_output}->createElement('output');
              $child_plugin_output->addChild($child_output);
  
              $child_type = $self->{xml_output}->createElement('type');
              $child_type->appendText(1); # short
  
              $child_msg = $self->{xml_output}->createElement('msg');
              $child_msg->appendText(($options{nolabel} == 0 ? ($lcode_litteral . ': ') : '') . $_);
              $child_exit = $self->{xml_output}->createElement('exit');
              $child_exit->appendText($lcode_litteral);
  
              $child_output->addChild($child_type);
              $child_output->addChild($child_exit);
              $child_output->addChild($child_msg);
          }
      }
  
      if (defined($self->{option_results}->{verbose}) || $force_long_output == 1) {
          foreach (@{$self->{global_long_output}}) {
              my ($child_output, $child_type, $child_msg);
          
              $child_output = $self->{xml_output}->createElement('output');
              $child_plugin_output->addChild($child_output);
  
              $child_type = $self->{xml_output}->createElement('type');
              $child_type->appendText(2); # long
  
              $child_msg = $self->{xml_output}->createElement('msg');
              $child_msg->appendText($_);
  
              $child_output->addChild($child_type);
              $child_output->addChild($child_msg);
          }
      }
  
      if ($options{force_ignore_perfdata} == 0) {
          $self->change_perfdata();
          foreach my $perf (@{$self->{perfdatas}}) {
              next if (defined($self->{option_results}->{filter_perfdata}) &&
                       $perf->{label} !~ /$self->{option_results}->{filter_perfdata}/);
              $self->range_perfdata(ranges => [\$perf->{warning}, \$perf->{critical}]);
          
              my ($child_perfdata);
              $child_perfdata = $self->{xml_output}->createElement('perfdata');
              $child_plugin_perfdata->addChild($child_perfdata);
              foreach my $key (keys %$perf) {
                  $perf->{$key} = '' if (defined($self->{option_results}->{filter_uom}) && $key eq 'unit' &&
                      $perf->{$key} !~ /$self->{option_results}->{filter_uom}/);
                  my $child = $self->{xml_output}->createElement($key);
                  $child->appendText($perf->{$key});
                  $child_perfdata->addChild($child);
              }
          }
      }
  
      print $self->{xml_output}->toString(1);
  }
  
  sub output_openmetrics {
      my ($self, %options) = @_;
  
      $self->change_perfdata();
      foreach my $perf (@{$self->{perfdatas}}) {
          next if (defined($self->{option_results}->{filter_perfdata}) &&
                   $perf->{label} !~ /$self->{option_results}->{filter_perfdata}/);
          $perf->{unit} = '' if (defined($self->{option_results}->{filter_uom}) &&
              $perf->{unit} !~ /$self->{option_results}->{filter_uom}/);
          $self->range_perfdata(ranges => [\$perf->{warning}, \$perf->{critical}]);
          my $label = $perf->{label};
          my $instance;
          if ($label =~ /^(.*?)#(.*)$/) {
              ($perf->{instance}, $label) = ($1, $2);
          }
          my ($bucket, $append) = ('{plugin="' . $self->{plugin} . '",mode="' . $self->{mode} . '"', '');
          foreach ('unit', 'warning', 'critical', 'min', 'max', 'instance') {
              if (defined($perf->{$_}) && $perf->{$_} ne '') {
                  $bucket .= ',' . $_ . '="' . $perf->{$_} . '"';
              }
          }
          $bucket .= '}';
          
          print $label . $bucket . ' ' . $perf->{value} . "\n";
      }
  }
  
  sub output_txt_short_display {
      my ($self, %options) = @_;
      
      if (defined($self->{global_short_concat_outputs}->{CRITICAL})) {
          print (($options{nolabel} == 0 ? 'CRITICAL: ' : '') . $self->{global_short_concat_outputs}->{CRITICAL} . " ");
      }
      if (defined($self->{global_short_concat_outputs}->{WARNING})) {
          print (($options{nolabel} == 0 ? 'WARNING: ' : '') . $self->{global_short_concat_outputs}->{WARNING} . " ");
      }
      if (defined($self->{global_short_concat_outputs}->{UNKNOWN})) {
          print (($options{nolabel} == 0 ? 'UNKNOWN: ' : '') . $self->{global_short_concat_outputs}->{UNKNOWN} . " ");
      }
      if (uc($options{exit_litteral}) eq 'OK') {
          print (($options{nolabel} == 0 ? 'OK: ' : '') . (defined($self->{global_short_concat_outputs}->{OK}) ? $self->{global_short_concat_outputs}->{OK} : '') . " ");
      }
  }
  
  sub output_txt_short {
      my ($self, %options) = @_;
      
      if (!defined($self->{option_results}->{change_short_output})) {
          $self->output_txt_short_display(%options);
          return ;
      }
      
      my $stdout = '';
      {
          local *STDOUT;
          open STDOUT, '>', \$stdout;
          $self->output_txt_short_display(%options);
      }
      
      foreach (@{$self->{option_results}->{change_short_output}}) {
           my ($pattern, $replace, $modifier) = split /~/;
           next if (!defined($pattern));
           $replace = '' if (!defined($replace));
           $modifier = '' if (!defined($modifier));
           eval "\$stdout =~ s{$pattern}{$replace}$modifier";
      }
      
      print $stdout;
  }
  
  sub output_txt {
      my ($self, %options) = @_;
      my $force_ignore_perfdata = (defined($options{force_ignore_perfdata}) && $options{force_ignore_perfdata} == 1) ? 1 : 0;
      my $force_long_output = (defined($options{force_long_output}) && $options{force_long_output} == 1) ? 1 : 0;
  
      if (defined($self->{global_short_concat_outputs}->{UNQUALIFIED_YET})) {
          $self->output_add(severity => uc($options{exit_litteral}), short_msg => $self->{global_short_concat_outputs}->{UNQUALIFIED_YET});
      }
  
      $self->output_txt_short(%options);
  
      if ($force_ignore_perfdata == 1) {
          print "\n";
      } else {
          print '|';
          $self->change_perfdata();
          foreach my $perf (@{$self->{perfdatas}}) {
              next if (defined($self->{option_results}->{filter_perfdata}) &&
                       $perf->{label} !~ /$self->{option_results}->{filter_perfdata}/);
              $perf->{unit} = '' if (defined($self->{option_results}->{filter_uom}) &&
                  $perf->{unit} !~ /$self->{option_results}->{filter_uom}/);
              $self->range_perfdata(ranges => [\$perf->{warning}, \$perf->{critical}]);
              print " '" . $perf->{label} . "'=" . $perf->{value} . $perf->{unit} . ';' . $perf->{warning} . ';' . $perf->{critical} . ';' . $perf->{min} . ';' . $perf->{max};
          }
          print "\n";
      }
      
      if (defined($self->{option_results}->{verbose}) || $force_long_output == 1) {
          if (scalar(@{$self->{global_long_output}})) {
              print join("\n", @{$self->{global_long_output}});
              print "\n";
          }
      }
  }
  
  sub display {
      my ($self, %options) = @_;
      my $nolabel = defined($options{nolabel}) ? 1 : 0;
      my $force_ignore_perfdata = (defined($options{force_ignore_perfdata}) && $options{force_ignore_perfdata} == 1) ? 1 : 0;
      my $force_long_output = (defined($options{force_long_output}) && $options{force_long_output} == 1) ? 1 : 0;
      $force_long_output = 1 if (defined($self->{option_results}->{debug}));
  
      if (defined($self->{option_results}->{output_file})) {
          if (!open (STDOUT, '>', $self->{option_results}->{output_file})) {
              $self->output_add(severity => 'UNKNOWN',
                                short_msg => "cannot open file  '" . $self->{option_results}->{output_file} . "': $!");
          }
      }
      if (defined($self->{option_results}->{output_xml})) {
          $self->create_xml_document();
          if ($self->{is_output_xml}) {
              $self->output_xml(exit_litteral => $self->get_litteral_status(), 
                                nolabel => $nolabel, 
                                force_ignore_perfdata => $force_ignore_perfdata, force_long_output => $force_long_output);
              return ;
          }
      } elsif (defined($self->{option_results}->{output_json})) {
          $self->create_json_document();
          if ($self->{is_output_json}) {
              $self->output_json(exit_litteral => $self->get_litteral_status(), 
                                 nolabel => $nolabel,
                                 force_ignore_perfdata => $force_ignore_perfdata, force_long_output => $force_long_output);
              return ;
          }
      } elsif (defined($self->{option_results}->{output_openmetrics})) {
          $self->output_openmetrics();
          return ;
      }
      
      $self->output_txt(
          exit_litteral => $self->get_litteral_status(), 
          nolabel => $nolabel,
          force_ignore_perfdata => $force_ignore_perfdata, force_long_output => $force_long_output
      );
  }
  
  sub die_exit {
      my ($self, %options) = @_;
      # $options{exit_litteral} = string litteral exit
      # $options{nolabel} = interger label display
      my $exit_litteral = defined($options{exit_litteral}) ? $options{exit_litteral} : $self->{option_results}->{opt_exit};
      my $nolabel = defined($options{nolabel}) ? 1 : 0;
      # ignore long output in the following case
      $self->{option_results}->{verbose} = undef;
  
      if (defined($self->{option_results}->{output_xml})) {
          $self->create_xml_document();
          if ($self->{is_output_xml}) {
              $self->output_xml(exit_litteral => $exit_litteral, nolabel => $nolabel, force_ignore_perfdata => 1);
              $self->exit(exit_litteral => $exit_litteral);
          }
      } elsif (defined($self->{option_results}->{output_json})) {
          $self->create_json_document();
          if ($self->{is_output_json}) {
              $self->output_json(exit_litteral => $exit_litteral, nolabel => $nolabel, force_ignore_perfdata => 1);
              $self->exit(exit_litteral => $exit_litteral);
          }
      } 
  
      $self->output_txt(exit_litteral => $exit_litteral, nolabel => $nolabel, force_ignore_perfdata => 1);
      $self->exit(exit_litteral => $exit_litteral);
  }
  
  sub option_exit {
      my ($self, %options) = @_;
      # $options{exit_litteral} = string litteral exit
      # $options{nolabel} = interger label display
      my $exit_litteral = defined($options{exit_litteral}) ? $options{exit_litteral} : $self->{option_results}->{opt_exit};
      my $nolabel = defined($options{nolabel}) ? 1 : 0;
  
      if (defined($self->{option_results}->{output_xml})) {
          $self->create_xml_document();
          if ($self->{is_output_xml}) {
              $self->output_xml(exit_litteral => $exit_litteral, nolabel => $nolabel, force_ignore_perfdata => 1, force_long_output => 1);
              $self->exit(exit_litteral => $exit_litteral);
          }
      } elsif (defined($self->{option_results}->{output_json})) {
          $self->create_json_document();
          if ($self->{is_output_json}) {
              $self->output_json(exit_litteral => $exit_litteral, nolabel => $nolabel, force_ignore_perfdata => 1, force_long_output => 1);
              $self->exit(exit_litteral => $exit_litteral);
          }
      }
  
      $self->output_txt(exit_litteral => $exit_litteral, nolabel => $nolabel, force_ignore_perfdata => 1, force_long_output => 1);
      $self->exit(exit_litteral => $exit_litteral);
  }
  
  sub exit {
      my ($self, %options) = @_;
      # $options{exit_litteral} = exit
      
      if (defined($options{exit_litteral})) {
          exit $self->{errors}->{uc($options{exit_litteral})};
      }
      exit $self->{errors}->{$self->{myerrors}->{$self->{global_status}}};
  }
  
  sub get_most_critical {
      my ($self, %options) = @_;
      my $current_status = 0; # For 'OK'
  
      foreach (@{$options{status}}) {
          if ($self->{myerrors_mask}->{uc($_)} > $current_status) {
              $current_status = $self->{myerrors_mask}->{uc($_)};
          }
      }
      return $self->{myerrors}->{$current_status};
  }
  
  sub get_litteral_status {
      my ($self, %options) = @_;
      
      if (defined($options{status})) {
          if (defined($self->{errors_num}->{$options{status}})) {
              return $self->{errors_num}->{$options{status}};
          }
          return $options{status};
      } else {
          return $self->{myerrors}->{$self->{global_status}};
      }
  }
  
  sub is_status {
      my ($self, %options) = @_;
      # $options{value} = string status 
      # $options{litteral} = value is litteral
      # $options{compare} = string status 
  
      if (defined($options{litteral})) {
          my $value = defined($options{value}) ? $options{value} : $self->get_litteral_status();
      
          if (uc($value) eq uc($options{compare})) {
              return 1;
          }
          return 0;
      }
  
      my $value = defined($options{value}) ? $options{value} : $self->{global_status};
      my $dec_val = $self->{myerrors_mask}->{$value};
      my $lresult = $value & $dec_val;
      # Need to manage 0
      if ($lresult > 0 || ($dec_val == 0 && $value == 0)) {
          return 1;
      }
      return 0;
  }
  
  sub is_litteral_status {
      my ($self, %options) = @_;
      # $options{status} = string status
  
      if (defined($self->{errors}->{uc($options{status})})) {
          return 1;
      }
  
      return 0;
  }
  
  sub create_json_document {
      my ($self) = @_;
  
      if (centreon::plugins::misc::mymodule_load(no_quit => 1, module => 'JSON',
                                             error_msg => "Cannot load module 'JSON'.")) {
          print "Cannot load module 'JSON'\n";
          $self->exit(exit_litteral => 'unknown');
      }
      $self->{is_output_json} = 1;
      $self->{json_output} = JSON->new->utf8();
  }
  
  sub create_xml_document {
      my ($self) = @_;
  
      if (centreon::plugins::misc::mymodule_load(no_quit => 1, module => 'XML::LibXML',
                                             error_msg => "Cannot load module 'XML::LibXML'.")) {
          print "Cannot load module 'XML::LibXML'\n";
          $self->exit(exit_litteral => 'unknown');
      }
      $self->{is_output_xml} = 1;
      $self->{xml_output} = XML::LibXML::Document->new('1.0', 'utf-8');
  }
  
  sub plugin {
      my ($self, %options) = @_;
      # $options{name} = string name
      
      if (defined($options{name})) {
          $self->{plugin} = $options{name};
      }
      return $self->{plugin};
  }
  
  sub mode {
      my ($self, %options) = @_;
      # $options{name} = string name
  
      if (defined($options{name})) {
          $self->{mode} = $options{name};
      }
      return $self->{mode};
  }
  
  sub add_disco_format {
      my ($self, %options) = @_;
  
      push @{$self->{disco_elements}}, @{$options{elements}};
  }
  
  sub display_disco_format {
      my ($self, %options) = @_;
      
      if (defined($self->{option_results}->{output_xml})) {
          $self->create_xml_document();
      
          my $root = $self->{xml_output}->createElement('data');
          $self->{xml_output}->setDocumentElement($root);
  
          foreach (@{$self->{disco_elements}}) {
              my $child = $self->{xml_output}->createElement("element");
              $child->appendText($_);
              $root->addChild($child);
          }
  
          print $self->{xml_output}->toString(1);
      } elsif (defined($self->{option_results}->{output_json})) {
          $self->create_json_document();
          my $json_content = {data => [] };
          foreach (@{$self->{disco_elements}}) {
              push @{$json_content->{data}}, $_;
          }
          
          print $self->{json_output}->encode($json_content);
      }
  }
  
  sub display_disco_show {
      my ($self, %options) = @_;
      
       if (defined($self->{option_results}->{output_xml})) {
          $self->create_xml_document();
          
          my $root = $self->{xml_output}->createElement('data');
          $self->{xml_output}->setDocumentElement($root);
  
          foreach (@{$self->{disco_entries}}) {
              my $child = $self->{xml_output}->createElement('label');
              foreach my $key (keys %$_) {
                  $child->setAttribute($key, $_->{$key});
              }
              $root->addChild($child);
          }
  
          print $self->{xml_output}->toString(1);
      } elsif (defined($self->{option_results}->{output_json})) {
          $self->create_json_document();
          my $json_content = {data => [] };
          foreach (@{$self->{disco_entries}}) {
              my %values = ();
              foreach my $key (keys %$_) {
                  $values{$key} = $_->{$key};
              }
              push @{$json_content->{data}}, {%values};
          }
          
          print $self->{json_output}->encode($json_content);
      }
  }
  
  sub to_utf8 {
      my ($self, $value) = @_;
      
      if ($self->{encode_utf8_import} == 0) {
          # Some Perl version dont have the following module (like Perl 5.6.x)
          if (centreon::plugins::misc::mymodule_load(no_quit => 1, module => 'Encode',
                                                     error_msg => "Cannot load module 'Encode'.")) {
              print "Cannot load module 'Encode'\n";
              $self->exit(exit_litteral => 'unknown');
          }
          
          $self->{encode_utf8_import} = 1;
          eval '$self->{perlqq} = Encode::PERLQQ';
      }
      
      return centreon::plugins::misc::trim(Encode::decode('UTF-8', $value, $self->{perlqq}));
  }
  
  sub add_disco_entry {
      my ($self, %options) = @_;
      
      push @{$self->{disco_entries}}, {%options};
  }
  
  sub is_disco_format {
      my ($self) = @_;
  
      if (defined($self->{option_results}->{disco_format})) {
          return 1;
      }
      return 0;
  }
  
  sub is_disco_show {
      my ($self) = @_;
  
      if (defined($self->{option_results}->{disco_show})) {
          return 1;
      }
      return 0;
  }
  
  sub is_verbose {
      my ($self) = @_;
  
      if (defined($self->{option_results}->{verbose})) {
          return 1;
      }
      return 0;
  }
  
  sub is_debug {
      my ($self) = @_;
  
      if (defined($self->{option_results}->{debug})) {
          return 1;
      }
      return 0;
  }
  
  sub use_new_perfdata {
      my ($self, %options) = @_;
  
      $self->{option_results}->{use_new_perfdata} = $options{value}
          if (defined($options{value}));
      if (defined($self->{option_results}->{use_new_perfdata})) {
          return 1;
      }
      return 0;
  }
  
  sub get_instance_perfdata_separator {
      my ($self) = @_;
  
      if (defined($self->{option_results}->{use_new_perfdata})) {
          return '~';
      }
      return '_';
  }
  
  sub parse_pfdata_scale {
      my ($self, %options) = @_;
      
      # --extend-perfdata=traffic_in,,scale(Mbps),mbps
      my $args = { unit => 'auto' };
      if ($options{args} =~ /^([KMGTPEkmgtpe])?(B|b|bps|Bps|b\/s|auto)$/) {
          $args->{quantity} = defined($1) ? $1 : '';
          $args->{unit} = $2;
      } elsif ($options{args} ne '') {
          return 1;
      }
      
      return (0, $args);
  }
  
  sub parse_pfdata_math {
      my ($self, %options) = @_;
  
      # --extend-perfdata=perfx,,math(current + 10 - 100, 1)
      my $args = { math => undef, apply_threshold => 0 };
      my ($math, $apply_threshold) = split /\|/, $options{args};
      if ($math =~ /^((?:[\s\.\-\+\*\/0-9\(\)]|current)+)$/) {
          $args->{math} = $1;
      } elsif ($options{args} ne '') {
          return 1;
      }
      
      if (defined($apply_threshold) && $apply_threshold =~ /^\s*(0|1)\s*$/ ) {
          $args->{apply_threshold} = $1;
      }
      
      return (0, $args);
  }
  
  sub parse_group_pfdata {
      my ($self, %options) = @_;
      
      $options{args} =~ s/^\s+//;
      $options{args} =~ s/\s+$//;
      my $args = { pattern_pf => $options{args} };
      return $args;
  }
  
  sub parse_pfdata_min {
      my ($self, %options) = @_;
      
      my $args = $self->parse_group_pfdata(%options);
      return (0, $args);
  }
  
  sub parse_pfdata_max {
      my ($self, %options) = @_;
      
      my $args = $self->parse_group_pfdata(%options);
      return (0, $args);
  }
  
  sub parse_pfdata_average {
      my ($self, %options) = @_;
      
      my $args = $self->parse_group_pfdata(%options);
      return (0, $args);
  }
  
  sub parse_pfdata_sum {
      my ($self, %options) = @_;
      
      my $args = $self->parse_group_pfdata(%options);
      return (0, $args);
  }
  
  sub apply_pfdata_scale {
      my ($self, %options) = @_;
      
      return if (${$options{perf}}->{unit} !~ /^([KMGTPEkmgtpe])?(B|b|bps|Bps|b\/s)$/);
      
      my ($src_quantity, $src_unit) = ($1, $2);
      my ($value, $dst_quantity, $dst_unit) = centreon::plugins::misc::scale_bytesbit(value => ${$options{perf}}->{value},
          src_quantity => $src_quantity, src_unit => $src_unit, dst_quantity => $options{args}->{quantity}, dst_unit => $options{args}->{unit});
      ${$options{perf}}->{value} = sprintf("%.2f", $value);
      if (defined($dst_unit)) {
         ${$options{perf}}->{unit} = $dst_quantity . $dst_unit;
      } else {
          ${$options{perf}}->{unit} = $options{args}->{quantity} . $options{args}->{unit};
      }
      
      if (defined(${$options{perf}}->{max}) && ${$options{perf}}->{max} ne '') {
          ($value) = centreon::plugins::misc::scale_bytesbit(value => ${$options{perf}}->{max},
              src_quantity => $src_quantity, src_unit => $src_unit, 
              dst_quantity => defined($dst_unit) ? $dst_quantity : $options{args}->{quantity}, 
              dst_unit => defined($dst_unit) ? $dst_unit : $options{args}->{unit});
          ${$options{perf}}->{max} = sprintf('%.2f', $value);
      }
      
      foreach my $threshold ('warning', 'critical') {
          next if (${$options{perf}}->{$threshold} eq '');
          my ($status, $result) = centreon::plugins::misc::parse_threshold(threshold => ${$options{perf}}->{$threshold});
          next if ($status == 0);
  
          if ($result->{start} ne '' && $result->{infinite_neg} == 0) {
              ($result->{start}) = centreon::plugins::misc::scale_bytesbit(value => $result->{start},
                  src_quantity => $src_quantity, src_unit => $src_unit, 
                  dst_quantity => defined($dst_unit) ? $dst_quantity : $options{args}->{quantity}, 
                  dst_unit => defined($dst_unit) ? $dst_unit : $options{args}->{unit});
          }
          if ($result->{end} ne '' && $result->{infinite_pos} == 0) {
              ($result->{end}) = centreon::plugins::misc::scale_bytesbit(value => $result->{end},
                  src_quantity => $src_quantity, src_unit => $src_unit, 
                  dst_quantity => defined($dst_unit) ? $dst_quantity : $options{args}->{quantity}, 
                  dst_unit => defined($dst_unit) ? $dst_unit : $options{args}->{unit});
          }
          
          ${$options{perf}}->{$threshold} = centreon::plugins::misc::get_threshold_litteral(%$result);
      }
  }
  
  sub apply_pfdata_invert {
      my ($self, %options) = @_;
      
      return if (!defined(${$options{perf}}->{max}) || ${$options{perf}}->{max} eq '');
      
      ${$options{perf}}->{value} = ${$options{perf}}->{max} - ${$options{perf}}->{value};
      foreach my $threshold ('warning', 'critical') {
          next if (${$options{perf}}->{$threshold} eq '');
          my ($status, $result) = centreon::plugins::misc::parse_threshold(threshold => ${$options{perf}}->{$threshold});
          next if ($status == 0);
          
          my $tmp = { arobase => $result->{arobase}, infinite_pos => 0, infinite_neg => 0, start => $result->{start}, end => $result->{end} };
          $tmp->{infinite_neg} = 1 if ($result->{infinite_pos} == 1);
          $tmp->{infinite_pos} = 1 if ($result->{infinite_neg} == 1);
  
          if ($result->{start} ne '' && $result->{infinite_neg} == 0) {
              $tmp->{end} = ${$options{perf}}->{max} - $result->{start};
          }
          if ($result->{end} ne '' && $result->{infinite_pos} == 0) {
              $tmp->{start} = ${$options{perf}}->{max} - $result->{end};
          }
          
          ${$options{perf}}->{$threshold} = centreon::plugins::misc::get_threshold_litteral(%$tmp);
      }
  }
  
  sub apply_pfdata_percent {
      my ($self, %options) = @_;
  
      return if (!defined(${$options{perf}}->{max}) || ${$options{perf}}->{max} eq '');
      
      ${$options{perf}}->{value} = sprintf('%.2f', ${$options{perf}}->{value} * 100 / ${$options{perf}}->{max});
      ${$options{perf}}->{unit} = '%';
      foreach my $threshold ('warning', 'critical') {
          next if (${$options{perf}}->{$threshold} eq '');
          my ($status, $result) = centreon::plugins::misc::parse_threshold(threshold => ${$options{perf}}->{$threshold});
          next if ($status == 0);
  
          if ($result->{start} ne '' && $result->{infinite_neg} == 0) {
              $result->{start} = sprintf('%.2f', $result->{start} * 100 / ${$options{perf}}->{max});
          }
          if ($result->{end} ne '' && $result->{infinite_pos} == 0) {
              $result->{end} = sprintf('%.2f', $result->{end} * 100 / ${$options{perf}}->{max});
          }
          
          ${$options{perf}}->{$threshold} = centreon::plugins::misc::get_threshold_litteral(%$result);
      }
      
      ${$options{perf}}->{max} = 100; 
  }
  
  sub apply_pfdata_math {
      my ($self, %options) = @_;
      
      my $math = $options{args}->{math};
      $math =~ s/current/\$value/g;
      
      my $value = ${$options{perf}}->{value};
      eval "\${\$options{perf}}->{value} = $math";
      
      return if ($options{args}->{apply_threshold} == 0);
      
      foreach my $threshold ('warning', 'critical') {
          next if (${$options{perf}}->{$threshold} eq '');
          my ($status, $result) = centreon::plugins::misc::parse_threshold(threshold => ${$options{perf}}->{$threshold});
          next if ($status == 0);
  
          if ($result->{start} ne '' && $result->{infinite_neg} == 0) {
              $value = $result->{start};
              eval "\$result->{start} = $math";
          }
          if ($result->{end} ne '' && $result->{infinite_pos} == 0) {
              $value = $result->{end};
              eval "\$result->{end} = $math";
          }
          
          ${$options{perf}}->{$threshold} = centreon::plugins::misc::get_threshold_litteral(%$result);
      }
      
      ${$options{perf}}->{max} = 100;
  }
  
  sub apply_pfdata_min {
      my ($self, %options) = @_;
  
      my $pattern_pf;
      eval "\$pattern_pf = \"$options{args}->{pattern_pf}\"";
      my $min;
      for (my $i = 0; $i < scalar(@{$self->{perfdatas}}); $i++) {
          next if ($self->{perfdatas}->[$i]->{label} !~ /$pattern_pf/);
          next if ($self->{perfdatas}->[$i]->{value} !~ /\d+/);
          $min = $self->{perfdatas}->[$i]->{value}
              if (!defined($min) || $min > $self->{perfdatas}->[$i]->{value});
      }
  
      ${$options{perf}}->{value} = $min
          if (defined($min));
  }
  
  sub apply_pfdata_max {
      my ($self, %options) = @_;
  
      my $pattern_pf;
      eval "\$pattern_pf = \"$options{args}->{pattern_pf}\"";
      my $max;
      for (my $i = 0; $i < scalar(@{$self->{perfdatas}}); $i++) {
          next if ($self->{perfdatas}->[$i]->{label} !~ /$pattern_pf/);
          next if ($self->{perfdatas}->[$i]->{value} !~ /\d+/);
          $max = $self->{perfdatas}->[$i]->{value}
              if (!defined($max) || $max < $self->{perfdatas}->[$i]->{value});
      }
  
      ${$options{perf}}->{value} = $max
          if (defined($max));
  }
  
  sub apply_pfdata_sum {
      my ($self, %options) = @_;
  
      my $pattern_pf;
      eval "\$pattern_pf = \"$options{args}->{pattern_pf}\"";
      my ($sum, $num) = (0, 0);
      for (my $i = 0; $i < scalar(@{$self->{perfdatas}}); $i++) {
          next if ($self->{perfdatas}->[$i]->{label} !~ /$pattern_pf/);
          next if ($self->{perfdatas}->[$i]->{value} !~ /\d+/);
          $sum += $self->{perfdatas}->[$i]->{value};
          $num++;
      }
  
      ${$options{perf}}->{value} = $sum
          if ($num > 0);
  }
  
  sub apply_pfdata_average {
      my ($self, %options) = @_;
  
      my $pattern_pf;
      eval "\$pattern_pf = \"$options{args}->{pattern_pf}\"";
      my ($sum, $num) = (0, 0);
      for (my $i = 0; $i < scalar(@{$self->{perfdatas}}); $i++) {
          next if ($self->{perfdatas}->[$i]->{label} !~ /$pattern_pf/);
          next if ($self->{perfdatas}->[$i]->{value} !~ /\d+/);
          $sum += $self->{perfdatas}->[$i]->{value};
          $num++;
      }
  
      ${$options{perf}}->{value} = sprintf("%.2f", ($sum / $num))
          if ($num > 0);
  }
  
  sub load_perfdata_extend_args {
      my ($self, %options) = @_;
  
      foreach (
          [$self->{option_results}->{change_perfdata}, 1],
          [$self->{option_results}->{extend_perfdata}, 2],
          [$self->{option_results}->{extend_perfdata_group}, 3],
      ) {
          next if (!defined($_->[0]));
          foreach my $arg (@{$_->[0]}) {
              $self->parse_perfdata_extend_args(arg => $arg, type => $_->[1]);
          }
      }
  }
  
  sub parse_perfdata_extend_args {
      my ($self, %options) = @_;
      
      # --extend-perfdata=searchlabel,newlabel,method[,[newuom],[min],[max]]
      my ($pfdata_match, $pfdata_substitute, $method, $uom_sub, $min_sub, $max_sub) = 
          split /,/, $options{arg};
      return if ((!defined($pfdata_match) || $pfdata_match eq '') && $options{type} != 3);
      
      $self->{pfdata_extends} = [] if (!defined($self->{pfdata_extends}));
      my $pfdata_extends = {
          pfdata_match => defined($pfdata_match) && $pfdata_match ne '' ? $pfdata_match : undef,
          pfdata_substitute => defined($pfdata_substitute) && $pfdata_substitute ne '' ? $pfdata_substitute : undef,
          uom_sub => defined($uom_sub) && $uom_sub ne '' ? $uom_sub : undef,
          min_sub => defined($min_sub) && $min_sub ne '' ? $min_sub : undef,
          max_sub => defined($max_sub) && $max_sub ne '' ? $max_sub : undef,
          type => $options{type}
      };
  
      if (defined($method) && $method ne '') {
          if ($method !~ /^\s*(invert|percent|scale|math|min|max|average|sum)\s*\(\s*(.*?)\s*\)\s*$/) {
              $self->output_add(long_msg => "method in argument '$options{arg}' is unknown", debug => 1);
              return ;
          }
          
          $pfdata_extends->{method_name} = $1;
          my $args = $2;
          if (my $func = $self->can('parse_pfdata_' . $pfdata_extends->{method_name})) {
              (my $status, $pfdata_extends->{method_args}) = $func->($self, args => $args);
              if ($status == 1) {
                  $self->output_add(long_msg => "argument in method '$options{arg}' is unknown", debug => 1);
                  return ;
              }
          }
      }
  
      push  @{$self->{pfdata_extends}}, $pfdata_extends;
  }
  
  sub apply_perfdata_explode {
      my ($self, %options) = @_;
      
      return if ($self->{explode_perfdata_total} == 0);
      foreach (@{$self->{perfdatas}}) {
          next if ($_->{max} eq '');
          if ($self->{explode_perfdata_total} == 2) {
              $self->perfdata_add(label => $_->{label} . '_max', value => $_->{max});
              next;
          }
          foreach my $regexp (keys %{$self->{explode_perfdatas}}) {
              if ($_->{label} =~ /$regexp/) {
                  $self->perfdata_add(label => $self->{explode_perfdatas}->{$regexp}, value => $_->{max});
                  last;
              }
          }
      }
  }
  
  sub apply_perfdata_extend {
      my ($self, %options) = @_;
  
      foreach my $extend (@{$self->{pfdata_extends}}) {
          my $new_pfdata = [];
          
          # Manage special case when type group and pfdata_match empty
          if ($extend->{type} == 3 && (!defined($extend->{pfdata_match}) || $extend->{pfdata_match} eq '')) {
              next if (!defined($extend->{pfdata_substitute}) || $extend->{pfdata_substitute} eq '');
              my $new_perf = {
                  label => $extend->{pfdata_substitute}, value => '',
                  unit => defined($extend->{uom_sub}) ? $extend->{uom_sub} : '',
                  warning => '', critical => '',
                  min => defined($extend->{min_sub}) ? $extend->{min_sub} : '',
                  max => defined($extend->{max_sub}) ? $extend->{max_sub} : ''
              };
  
              if (defined($extend->{method_name})) {
                  my $func = $self->can('apply_pfdata_' . $extend->{method_name});
                  $func->($self, perf => \$new_perf, args => $extend->{method_args});
              }
  
              if (length($new_perf->{value})) {
                  push @{$self->{perfdatas}}, $new_perf;
              }
              next;
          }
          
          for (my $i = 0; $i < scalar(@{$self->{perfdatas}}); $i++) {
              next if ($self->{perfdatas}->[$i]->{label} !~ /$extend->{pfdata_match}/);
              
              my $new_perf = { %{$self->{perfdatas}->[$i]} };
              if ($extend->{type} == 3) {
                  $new_perf = { label => $self->{perfdatas}->[$i]->{label}, value => '', unit => '', warning => '', critical => '', min => '', max => '' };
              }
              
              if (defined($extend->{pfdata_substitute})) {
                  eval "\$new_perf->{label} =~ s{$extend->{pfdata_match}}{$extend->{pfdata_substitute}}";
              }
  
              if (defined($extend->{method_name})) {
                  my $func = $self->can('apply_pfdata_' . $extend->{method_name});
                  $func->($self, perf => \$new_perf, args => $extend->{method_args});
              }
              
              $new_perf->{unit} = $extend->{uom_sub} if (defined($extend->{uom_sub}));
              $new_perf->{min} = $extend->{min_sub} if (defined($extend->{min_sub}));
              $new_perf->{max} = $extend->{max_sub} if (defined($extend->{max_sub}));
  
              if ($extend->{type} == 1) {
                  $self->{perfdatas}->[$i] = $new_perf;
              } else {
                  push @$new_pfdata, $new_perf if (length($new_perf->{value}));
              }
          }
  
          push @{$self->{perfdatas}}, @$new_pfdata;
      }
  }
  
  sub change_perfdata {
      my ($self, %options) = @_;
      
      $self->apply_perfdata_extend();
      $self->apply_perfdata_explode();
  }
  
  1;
  
  
  =head1 NAME
  
  Output class
  
  =head1 SYNOPSIS
  
  -
  
  =head1 OUTPUT OPTIONS
  
  =over 8
  
  =item B<--verbose>
  
  Display long output.
  
  =item B<--debug>
  
  Display also debug messages.
  
  =item B<--filter-perfdata>
  
  Filter perfdata that match the regexp.
  
  =item B<--explode-perfdata-max>
  
  Put max perfdata (if it exist) in a specific perfdata 
  (without values: same with '_max' suffix) (Multiple options)
  
  =item B<--change-perfdata> B<--extend-perfdata> 
  
  Change or extend perfdata. 
  Syntax: --extend-perfdata=searchlabel,newlabel,target[,[newuom],[min],[max]]
  
  Common examples:
  
  =over 4
  
  Change storage free perfdata in used: --change-perfdata=free,used,invert()
  
  Change storage free perfdata in used: --change-perfdata=used,free,invert()
  
  Scale traffic values automaticaly: --change-perfdata=traffic,,scale(auto)
  
  Scale traffic values in Mbps: --change-perfdata=traffic_in,,scale(Mbps),mbps
  
  Change traffic values in percent: --change-perfdata=traffic_in,,percent()
  
  =back
  
  =item B<--extend-perfdata-group> 
  
  Extend perfdata from multiple perfdatas (methods in target are: min, max, average, sum)
  Syntax: --extend-perfdata-group=searchlabel,newlabel,target[,newuom]
  
  Common examples:
  
  =over 4
  
  Sum wrong packets from all interfaces (with interface need  --units-errors=absolute): --extend-perfdata-group=',packets_wrong,sum(packets_(discard|error)_(in|out))'
  
  Sum traffic by interface: --extend-perfdata-group='traffic_in_(.*),traffic_$1,sum(traffic_(in|out)_$1)'
  
  =back
  
  =item B<--change-short-output>
  
  Change short output display. --change-short-output=pattern~replace~modifier
  
  =item B<--range-perfdata>
  
  Change perfdata range thresholds display: 
  1 = start value equals to '0' is removed, 2 = threshold range is not display.
  
  =item B<--filter-uom>
  
  Filter UOM that match the regexp.
  
  =item B<--opt-exit>
  
  Optional exit code for an execution error (i.e. wrong option provided,
  SSH connection refused, timeout, etc)
  (Default: unknown).
  
  =item B<--output-xml>
  
  Display output in XML format.
  
  =item B<--output-json>
  
  Display output in JSON format.
  
  =item B<--output-openmetrics>
  
  Display metrics in OpenMetrics format.
  
  =item B<--output-file>
  
  Write output in file (can be used with json and xml options)
  
  =item B<--disco-format>
  
  Display discovery arguments (if the mode manages it).
  
  =item B<--disco-show>
  
  Display discovery values (if the mode manages it).
  
  =item B<--float-precision>
  
  Set the float precision for thresholds (Default: 8).
  
  =head1 DESCRIPTION
  
  B<output>.
  
  =cut
CENTREON_PLUGINS_OUTPUT

$fatpacked{"centreon/plugins/perfdata.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'CENTREON_PLUGINS_PERFDATA';
  #
  # Copyright 2019 Centreon (http://www.centreon.com/)
  #
  # Centreon is a full-fledged industry-strength solution that meets
  # the needs in IT infrastructure and application monitoring for
  # service performance.
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  #
  
  package centreon::plugins::perfdata;
  
  use strict;
  use warnings;
  use centreon::plugins::misc;
  
  sub new {
      my ($class, %options) = @_;
      my $self  = {};
      bless $self, $class;
  
      $self->{output} = $options{output};
      # Typical Nagios Perfdata 'with ~ @ ..'
      $self->{threshold_label} = {};
      $self->{float_precision} = defined($self->{output}->{option_results}->{float_precision}) && $self->{output}->{option_results}->{float_precision} =~ /\d+/ ?  
          int($self->{output}->{option_results}->{float_precision}) : 8;
  
      return $self;
  }
  
  sub get_perfdata_for_output {
      my ($self, %options) = @_;
      # $options{label} : threshold label
      # $options{total} : percent threshold to transform in global
      # $options{cast_int} : cast absolute to int
      # $options{op} : operator to apply to start/end value (uses with 'value'})
      # $options{value} : value to apply with 'op' option
      
      if (!defined($self->{threshold_label}->{$options{label}}->{value}) || $self->{threshold_label}->{$options{label}}->{value} eq '') {
          return '';
      }
      
      my %perf_value = %{$self->{threshold_label}->{$options{label}}};
      
      if (defined($options{op}) && defined($options{value})) {
          eval "\$perf_value{start} = \$perf_value{start} $options{op} \$options{value}" if ($perf_value{infinite_neg} == 0);
          eval "\$perf_value{end} = \$perf_value{end} $options{op} \$options{value}" if ($perf_value{infinite_pos} == 0);
      }
      if (defined($options{total})) {
          $perf_value{start} = $perf_value{start} * $options{total} / 100 if ($perf_value{infinite_neg} == 0);
          $perf_value{end} = $perf_value{end} * $options{total} / 100 if ($perf_value{infinite_pos} == 0);
          $perf_value{start} = sprintf("%.2f", $perf_value{start}) if ($perf_value{infinite_neg} == 0 && (!defined($options{cast_int}) || $options{cast_int} != 1));
          $perf_value{end} = sprintf("%.2f", $perf_value{end}) if ($perf_value{infinite_pos} == 0 && (!defined($options{cast_int}) || $options{cast_int} != 1));
      }
      
      $perf_value{start} = int($perf_value{start}) if ($perf_value{infinite_neg} == 0 && defined($options{cast_int}) && $options{cast_int} == 1);
      $perf_value{end} = int($perf_value{end}) if ($perf_value{infinite_pos} == 0 && defined($options{cast_int}) && $options{cast_int} == 1);
      
      my $perf_output = ($perf_value{arobase} == 1 ? '@' : '') . 
                        (($perf_value{infinite_neg} == 0) ? $perf_value{start} : '~') . 
                        ':' . 
                        (($perf_value{infinite_pos} == 0) ? $perf_value{end} : '');
  
      return $perf_output;
  }
  
  sub threshold_validate {
      my ($self, %options) = @_;
      # $options{label} : threshold label
      # $options{value} : threshold value
  
      my $status = 1;
      $self->{threshold_label}->{$options{label}} = { value => $options{value}, start => undef, end => undef, arobase => undef, infinite_neg => undef, infinite_pos => undef };
      if (!defined($options{value}) || $options{value} eq '') {
          return $status;
      }
  
      ($status, my $result_perf) = 
          centreon::plugins::misc::parse_threshold(threshold => $options{value});
      $self->{threshold_label}->{$options{label}} = { %{$self->{threshold_label}->{$options{label}}}, %$result_perf };
      
      $self->{threshold_label}->{$options{label}}->{start_precision} = $self->{threshold_label}->{$options{label}}->{start};
      if ($self->{threshold_label}->{$options{label}}->{start} =~ /[.,]/) {
          $self->{threshold_label}->{$options{label}}->{start_precision} = sprintf("%.$self->{output}->{option_results}->{float_precision}f", $self->{threshold_label}->{$options{label}}->{start});
      }
      
      $self->{threshold_label}->{$options{label}}->{end_precision} = $self->{threshold_label}->{$options{label}}->{end};
      if ($self->{threshold_label}->{$options{label}}->{end} =~ /[.,]/) {
          $self->{threshold_label}->{$options{label}}->{end_precision} = sprintf("%.$self->{output}->{option_results}->{float_precision}f", $self->{threshold_label}->{$options{label}}->{end});
      }
      
      return $status;
  }
  
  sub threshold_check {
      my ($self, %options) = @_;
      # Can check multiple threshold. First match: out. Order is important
      # options{value}: value to compare
      # options{threshold}: ref to an array (example: [ {label => 'warning', exit_litteral => 'warning' }, {label => 'critical', exit_litteral => 'critical'} ]
      if ($options{value} =~ /[.,]/) {
          $options{value} = sprintf("%.$self->{output}->{option_results}->{float_precision}f", $options{value});
      }
      
      foreach (@{$options{threshold}}) {
          next if (!defined($self->{threshold_label}->{$_->{label}}));
          next if (!defined($self->{threshold_label}->{$_->{label}}->{value}) || $self->{threshold_label}->{$_->{label}}->{value} eq '');
          if ($self->{threshold_label}->{$_->{label}}->{arobase} == 0 && ($options{value} < $self->{threshold_label}->{$_->{label}}->{start_precision} || $options{value} > $self->{threshold_label}->{$_->{label}}->{end_precision})) {
              return $_->{exit_litteral};
          } elsif ($self->{threshold_label}->{$_->{label}}->{arobase}  == 1 && ($options{value} >= $self->{threshold_label}->{$_->{label}}->{start_precision} && $options{value} <= $self->{threshold_label}->{$_->{label}}->{end_precision})) {
              return $_->{exit_litteral};
          }
      }
  
      return 'ok';
  }
  
  sub trim {
      my ($self, $value) = @_;
      
      $value =~ s/^[ \t]+//;
      $value =~ s/[ \t]+$//;
      return $value;
  }
  
  sub change_bytes {
      my ($self, %options) = @_;
  
      my $value = $options{value};
      my $divide = defined($options{network}) ? 1000 : 1024;
      my @units = ('K', 'M', 'G', 'T');
      my $unit = '';
      my $sign = '';
  
      $sign = '-' if ($value != abs($value));
      $value = abs($value);
      
      for (my $i = 0; $i < scalar(@units); $i++) {
          last if (($value / $divide) < 1);
          $unit = $units[$i];
          $value = $value / $divide;
      }
  
      return (sprintf('%.2f', $sign . $value), $unit . (defined($options{network}) ? 'b' : 'B'));
  }
  
  1;
  
  
  =head1 NAME
  
  Perfdata class
  
  =head1 SYNOPSIS
  
  -
  
  =head1 DESCRIPTION
  
  B<perfdata>.
  
  =cut
CENTREON_PLUGINS_PERFDATA

$fatpacked{"centreon/plugins/script.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'CENTREON_PLUGINS_SCRIPT';
  #
  # Copyright 2019 Centreon (http://www.centreon.com/)
  #
  # Centreon is a full-fledged industry-strength solution that meets
  # the needs in IT infrastructure and application monitoring for
  # service performance.
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  #
  
  package centreon::plugins::script;
  
  use strict;
  use warnings;
  use centreon::plugins::output;
  use centreon::plugins::misc;
  use FindBin;
  use Pod::Usage;
  use Pod::Find qw(pod_where);
  
  my %handlers = (DIE => {});
  
  my $global_version = '20190704 (727d0077)';
  my $alternative_fatpacker = 1;
  
  sub new {
      my ($class) = @_;
      my $self  = {};
      bless $self, $class;
  
      $self->{options} = undef;
      $self->{plugin} = undef;
      $self->{help} = undef;
  
      # Avoid to destroy because it keeps a ref on the object. 
      # A problem if we execute it multiple times in the same perl execution
      # Use prepare_destroy
      $self->set_signal_handlers;
      return $self;
  }
  
  sub prepare_destroy {
      my ($self) = @_;
  
      delete $handlers{DIE}->{$self};
  }
  
  sub set_signal_handlers {
      my $self = shift;
  
      $SIG{__DIE__} = \&class_handle_DIE;
      $handlers{DIE}->{$self} = sub { $self->handle_DIE($_[0]) };
  }
  
  sub class_handle_DIE {
      my ($msg) = @_;
  
      foreach (keys %{$handlers{DIE}}) {
          &{$handlers{DIE}->{$_}}($msg);
      }
  }
  
  sub handle_DIE {
      my ($self, $msg) = @_;
  
      return unless defined $^S and $^S == 0; # Ignore errors in eval
      $self->{output}->add_option_msg(short_msg => $msg);
      $self->{output}->die_exit();
  }
  
  sub get_global_version {
      return $global_version;
  }
  
  sub get_plugin {
      my ($self) = @_;
      
      ######
      # Need to load global 'Output' and 'Options'
      ######
      if ($alternative_fatpacker == 0) {
          require centreon::plugins::options;
          $self->{options} = centreon::plugins::options->new();
      } else {
          require centreon::plugins::alternative::FatPackerOptions;
          $self->{options} = centreon::plugins::alternative::FatPackerOptions->new();
      }
      $self->{output} = centreon::plugins::output->new(options => $self->{options});
      $self->{options}->set_output(output => $self->{output});
  
      $self->{options}->add_options(arguments => {
          'plugin:s'          => { name => 'plugin' },
          'list-plugin'       => { name => 'list_plugin' }, 
          'help'              => { name => 'help' },
          'ignore-warn-msg'   => { name => 'ignore_warn_msg' },
          'version'           => { name => 'version' },
          'runas:s'           => { name => 'runas' },
          'environment:s%'    => { name => 'environment' },
          'convert-args:s'    => { name => 'convert_args' },
      });
  
      $self->{options}->parse_options();
  
      $self->{plugin} = $self->{options}->get_option(argument => 'plugin' );
      $self->{list_plugin} = $self->{options}->get_option(argument => 'list_plugin' );
      $self->{help} = $self->{options}->get_option(argument => 'help' );
      $self->{version} = $self->{options}->get_option(argument => 'version' );
      $self->{runas} = $self->{options}->get_option(argument => 'runas' );
      $self->{environment} = $self->{options}->get_option(argument => 'environment' );
      $self->{ignore_warn_msg} = $self->{options}->get_option(argument => 'ignore_warn_msg' );
      $self->{convert_args} = $self->{options}->get_option(argument => 'convert_args' );
  
      $self->{output}->plugin(name => $self->{plugin});
      $self->{output}->check_options(option_results => $self->{options}->get_options());
  
      $self->{options}->clean();
  }
  
  sub convert_args {
      my ($self) = @_;
      
      if ($self->{convert_args} =~ /^(.+?),(.*)/) {
          my ($search, $replace) = ($1, $2);
          for (my $i = 0; $i <= $#ARGV; $i++) {
              eval "\$ARGV[\$i] =~ s/$search/$replace/g";
          }
      }
  }
  
  sub display_local_help {
      my ($self) = @_;
  
      my $stdout;
      if ($self->{help}) {
          local *STDOUT;
          open STDOUT, '>', \$stdout;
          
          if ($alternative_fatpacker == 0) {
              pod2usage(-exitval => 'NOEXIT', -input => pod_where({-inc => 1}, __PACKAGE__));
          } else {
              my $pp = __PACKAGE__ . '.pm';
              $pp =~ s{::}{/}g;
              my $content_class = $INC{$pp}->{$pp};
              open my $str_fh, '<', \$content_class;
              pod2usage(-exitval => 'NOEXIT', -input => $str_fh);
              close $str_fh;
          }
      }
      
      $self->{output}->add_option_msg(long_msg => $stdout) if (defined($stdout));
  }
  
  sub check_directory {
      my ($self, $directory) = @_;
      
      opendir(my $dh, $directory) || return ;
      while (my $filename = readdir $dh) {
          $self->check_directory($directory . '/' . $filename) if ($filename !~ /^\./ && -d $directory . '/' . $filename);
          if ($filename eq 'plugin.pm') {
              my $stdout = '';
              
              {
                  local *STDOUT;
                  open STDOUT, '>', \$stdout;
                  pod2usage(-exitval => 'NOEXIT', -input => $directory . "/" . $filename,
                            -verbose => 99, 
                            -sections => "PLUGIN DESCRIPTION");
              }
              $self->{plugins_result}->{$directory . "/" . $filename} = $stdout;
          }
      }
      closedir $dh;
  }
  
  sub fatpacker_find_plugin {
      my ($self) = @_;
      
      my $plugins = [];
      foreach (@INC) {
          next if (ref($_) !~ /FatPacked/);
          foreach my $name (keys %$_) {
              if ($name =~ /plugin.pm$/) {
                  push @$plugins, $name;
              }
          }
      }
      
      return $plugins;
  }
  
  sub check_plugin_option {
      my ($self) = @_;
      
      if (defined($self->{version})) {
          $self->{output}->add_option_msg(short_msg => 'Global Version: ' . $global_version);
          $self->{output}->option_exit(nolabel => 1);
      }
      
      my $no_plugin = 1;
      if ($alternative_fatpacker == 1) {
          my $integrated_plugins = $self->fatpacker_find_plugin();
          if (scalar(@$integrated_plugins) == 1) {
              $self->{plugin} = $integrated_plugins->[0];
              $no_plugin = 0;
          }
      }
      
      if ($no_plugin == 1) {
          $self->{output}->add_option_msg(short_msg => "Need to specify '--plugin' option.");
          $self->{output}->option_exit();
      }
  }
  
  sub display_list_plugin {
      my ($self) = @_;
      $self->{plugins_result} = {};
      
      if ($alternative_fatpacker == 1) {
          my $integrated_plugins = $self->fatpacker_find_plugin();
          
          foreach my $key (@$integrated_plugins) {
              # Need to load it to get the description
              centreon::plugins::misc::mymodule_load(output => $self->{output}, module => $key, 
                                                     error_msg => 'Cannot load module --plugin.');
                                                 
              my $name = $key;
              $name =~ s/\.pm//g;
              $name =~ s/\//::/g;
              $self->{output}->add_option_msg(long_msg => '-----------------');
              $self->{output}->add_option_msg(long_msg => 'PLUGIN: ' . $name);
              {
                  my $stdout = '';
                  local *STDOUT;
                  open STDOUT, '>', \$stdout;
                  my $content_class = $INC{$key}->{$key};
                  open my $str_fh, '<', \$content_class;
                  pod2usage(-exitval => 'NOEXIT', -input => $str_fh, -verbose => 99, -sections => 'PLUGIN DESCRIPTION');
                  close $str_fh;
                  $self->{output}->add_option_msg(long_msg => $stdout);
              }
          }
          return ;
      }
      
      # Search file 'plugin.pm'
      $self->check_directory($FindBin::Bin);
      foreach my $key (keys %{$self->{plugins_result}}) {
          my $name = $key;
          $name =~ s/^$FindBin::Bin\/(.*)\.pm/$1/;
          $name =~ s/\//::/g;
          $self->{plugins_result}->{$key} =~ s/^Plugin Description/DESCRIPTION/i;
          
          $self->{output}->add_option_msg(long_msg => '-----------------');
          $self->{output}->add_option_msg(long_msg => 'PLUGIN: ' . $name);
          $self->{output}->add_option_msg(long_msg => $self->{plugins_result}->{$key});
      }
  }
  
  sub check_relaunch {
      my $self = shift;
      my $need_restart = 0;
      my $cmd = $FindBin::Bin . "/" . $FindBin::Script;
      my @args = ();
      
      if (defined($self->{environment})) {
          foreach (keys %{$self->{environment}}) {
              if ($_ ne '' && (!defined($ENV{$_}) || $ENV{$_} ne $self->{environment}->{$_})) {
                  $ENV{$_} = $self->{environment}->{$_};
                  $need_restart = 1;
              }
          }
      }
      
      if (defined($self->{runas}) && $self->{runas} ne '') {
          # Check if it's already me and user exist ;)
          my ($name, $passwd, $uid) = getpwnam($self->{runas});
          if (!defined($uid)) {
              $self->{output}->add_option_msg(short_msg => "Runas user '" . $self->{runas} . "' not exist.");
              $self->{output}->option_exit();
          }
          if ($uid != $>) {
              if ($> == 0) {
                  unshift @args, "-s", "/bin/bash", "-l", $self->{runas}, "-c", join(" ", $cmd, "--plugin=" . $self->{plugin}, @ARGV);
                  $cmd = "su";
              } else {
                  unshift @args, "-S", "-u", $self->{runas}, $cmd, "--plugin=" . $self->{plugin}, @ARGV;
                  $cmd = "sudo";
              }
              $need_restart = 1;
          }
      }
  
      if ($need_restart == 1) {
          if (scalar(@args) <= 0) {
              unshift @args, @ARGV, '--plugin=' . $self->{plugin}
          }
  
          my ($lerror, $stdout, $exit_code) = centreon::plugins::misc::backtick(
              command => $cmd,
              arguments => [@args],
              timeout => 30,
              wait_exit => 1
          );
  
          if ($exit_code <= -1000) {
              if ($exit_code == -1000) {
                  $self->{output}->output_add(severity => 'UNKNOWN', 
                                              short_msg => $stdout);
              }
              $self->{output}->display();
              $self->{output}->exit();
          }
          print $stdout;
          # We put unknown
          if (!($exit_code >= 0 && $exit_code <= 4)) {
              exit 3;
          }
          exit $exit_code;
      }
  }
  
  sub run {
      my ($self) = @_;
  
      $self->get_plugin();
  
      if (defined($self->{help}) && !defined($self->{plugin})) {
          $self->display_local_help();
          $self->{output}->option_exit();
      }
      if (defined($self->{list_plugin})) {
          $self->display_list_plugin();
          $self->{output}->option_exit();
      }
      $self->check_plugin_option() if (!defined($self->{plugin}) || $self->{plugin} eq '');
      if (defined($self->{ignore_warn_msg})) {
          $SIG{__WARN__} = sub {};
      }
      $self->convert_args() if (defined($self->{convert_args}));
  
      $self->check_relaunch();
      
      (undef, $self->{plugin}) = 
          centreon::plugins::misc::mymodule_load(output => $self->{output}, module => $self->{plugin}, 
                                                 error_msg => 'Cannot load module --plugin.');
      my $plugin = $self->{plugin}->new(options => $self->{options}, output => $self->{output});
      $plugin->init(help => $self->{help},
                    version => $self->{version});
      $plugin->run();
  }
  
  1;
  
  
  =head1 NAME
  
  centreon_plugins.pl - main program to call Centreon plugins.
  
  =head1 SYNOPSIS
  
  centreon_plugins.pl [options]
  
  =head1 OPTIONS
  
  =over 8
  
  =item B<--plugin>
  
  Specify the path to the plugin.
  
  =item B<--list-plugin>
  
  Print available plugins.
  
  =item B<--version>
  
  Print global version.
  
  =item B<--help>
  
  Print a brief help message and exits.
  
  =item B<--ignore-warn-msg>
  
  Perl warn messages are ignored (not displayed).
  
  =item B<--runas>
  
  Run the script as a different user (prefer to use directly the good user).
  
  =item B<--environment>
  
  Set environment variables for the script (prefer to set it before running it for better performance).
  
  =item B<--convert-args>
  
  Change strings of arguments. Useful to use '!' in nrpe protocol.
  Example: --convert-args='##,\x21'
  
  =back
  
  =head1 DESCRIPTION
  
  B<centreon_plugins.pl> .
  
  =cut
CENTREON_PLUGINS_SCRIPT

$fatpacked{"centreon/plugins/script_custom.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'CENTREON_PLUGINS_SCRIPT_CUSTOM';
  #
  # Copyright 2019 Centreon (http://www.centreon.com/)
  #
  # Centreon is a full-fledged industry-strength solution that meets
  # the needs in IT infrastructure and application monitoring for
  # service performance.
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  #
  
  package centreon::plugins::script_custom;
  
  use strict;
  use warnings;
  use centreon::plugins::misc;
  
  sub new {
      my ($class, %options) = @_;
      my $self  = {};
      bless $self, $class;
      # $options{package} = parent package caller
      # $options{options} = options object
      # $options{output} = output object
      $self->{options} = $options{options};
      $self->{output} = $options{output};
      
      $self->{options}->add_options(
          arguments => {
              'mode:s'          => { name => 'mode_name' },
              'dyn-mode:s'      => { name => 'dynmode_name' },
              'list-mode'       => { name => 'list_mode' },
              'custommode:s'    => { name => 'custommode_name' },
              'list-custommode' => { name => 'list_custommode' },
              'multiple'        => { name => 'multiple' },
              'sanity-options'  => { name => 'sanity_options' }, # keep it for 6 month before remove it
          }
      );
      $self->{version} = '1.0';
      %{$self->{modes}} = ();
      %{$self->{custom_modes}} = ();
      $self->{default} = undef;
      $self->{customdefault} = {};
      $self->{custommode_current} = undef;
      $self->{custommode_stored} = [];
      
      $self->{options}->parse_options();
      $self->{option_results} = $self->{options}->get_options();
      foreach (keys %{$self->{option_results}}) {
          $self->{$_} = $self->{option_results}->{$_};
      }
      $self->{options}->clean();
  
      $self->{options}->add_help(package => $options{package}, sections => 'PLUGIN DESCRIPTION');
      $self->{options}->add_help(package => __PACKAGE__, sections => 'GLOBAL OPTIONS');
      $self->{output}->mode(name => $self->{mode_name});
  
      return $self;
  }
  
  sub load_custom_mode {
      my ($self, %options) = @_;
      
      $self->is_custommode(custommode => $self->{custommode_name});
      centreon::plugins::misc::mymodule_load(output => $self->{output}, module => $self->{custom_modes}{$self->{custommode_name}}, 
                                             error_msg => "Cannot load module --custommode.");
      $self->{custommode_current} = $self->{custom_modes}{$self->{custommode_name}}->new(options => $self->{options}, output => $self->{output}, mode => $self->{custommode_name});
  }
  
  sub init {
      my ($self, %options) = @_;
      # $options{version} = string version
      # $options{help} = string help
  
      if (defined($options{help}) && !defined($self->{mode_name}) && !defined($self->{dynmode_name})) {
          $self->{options}->display_help();
          $self->{output}->option_exit();
      }
      if (defined($options{version}) && !defined($self->{mode_name})&& !defined($self->{dynmode_name})) {
          $self->version();
      }
      if (defined($self->{list_mode})) {
          $self->list_mode();
      }
      if (defined($self->{list_custommode})) {
          $self->list_custommode();
      }
      $self->{options}->set_sanity();
  
      # Output HELP
      $self->{options}->add_help(package => 'centreon::plugins::output', sections => 'OUTPUT OPTIONS');
      
      $self->load_password_mgr();
  
      if (defined($self->{custommode_name}) && $self->{custommode_name} ne '') {
          $self->load_custom_mode();
      } elsif (scalar(keys %{$self->{custom_modes}}) == 1) {
          $self->{custommode_name} = (keys(%{$self->{custom_modes}}))[0];
          $self->load_custom_mode();
      } else {
          $self->{output}->add_option_msg(short_msg => "Need to specify '--custommode'.");
          $self->{output}->option_exit();
      }
      
      # Load mode
      if (defined($self->{mode_name}) && $self->{mode_name} ne '') {
          $self->is_mode(mode => $self->{mode_name});
          centreon::plugins::misc::mymodule_load(output => $self->{output}, module => $self->{modes}{$self->{mode_name}}, 
                                                 error_msg => "Cannot load module --mode.");
          $self->{mode} = $self->{modes}{$self->{mode_name}}->new(options => $self->{options}, output => $self->{output}, mode => $self->{mode_name});
      } elsif (defined($self->{dynmode_name}) && $self->{dynmode_name} ne '') {
          (undef, $self->{dynmode_name}) = centreon::plugins::misc::mymodule_load(output => $self->{output}, module => $self->{dynmode_name}, 
                                                                                  error_msg => "Cannot load module --dyn-mode.");
          $self->{mode} = $self->{dynmode_name}->new(options => $self->{options}, output => $self->{output}, mode => $self->{dynmode_name});
      } else {
          $self->{output}->add_option_msg(short_msg => "Need to specify '--mode' or '--dyn-mode' option.");
          $self->{output}->option_exit();
      }
  
      if (defined($options{help})) {
          if (defined($self->{mode_name}) && $self->{mode_name} ne '') {
              $self->{options}->add_help(package => $self->{modes}{$self->{mode_name}}, sections => 'MODE');
          } else {
              $self->{options}->add_help(package => $self->{dynmode_name}, sections => 'MODE');
          }
          $self->{options}->display_help();
          $self->{output}->option_exit();
      }
      if (defined($options{version})) {
          $self->{mode}->version();
          $self->{output}->option_exit(nolabel => 1);
      }
      
      $self->{options}->parse_options();
      $self->{option_results} = $self->{options}->get_options();
      $self->{pass_mgr}->manage_options(option_results => $self->{option_results}) if (defined($self->{pass_mgr}));
  
      push @{$self->{custommode_stored}}, $self->{custommode_current};
      $self->{custommode_current}->set_options(option_results => $self->{option_results});
      $self->{custommode_current}->set_defaults(default => $self->{customdefault});
  
      while ($self->{custommode_current}->check_options()) {
          $self->{custommode_current} = $self->{custom_modes}{$self->{custommode_name}}->new(noptions => 1, options => $self->{options}, output => $self->{output}, mode => $self->{custommode_name});
          $self->{custommode_current}->set_options(option_results => $self->{option_results});
          push @{$self->{custommode_stored}}, $self->{custommode_current};
      }
      $self->{mode}->check_options(option_results => $self->{option_results}, default => $self->{default});
  }
  
  sub load_password_mgr {
      my ($self, %options) = @_;
      
      return if (!defined($self->{option_results}->{pass_manager}) || $self->{option_results}->{pass_manager} eq '');
  
      (undef, my $pass_mgr_name) = centreon::plugins::misc::mymodule_load(
          output => $self->{output}, module => "centreon::plugins::passwordmgr::" . $self->{option_results}->{pass_manager}, 
          error_msg => "Cannot load module 'centreon::plugins::passwordmgr::" . $self->{option_results}->{pass_manager} . "'"
      );
      $self->{pass_mgr} = $pass_mgr_name->new(options => $self->{options}, output => $self->{output});
  }
  
  sub run {
      my $self = shift;
  
      if ($self->{output}->is_disco_format()) {
          $self->{mode}->disco_format();
          $self->{output}->display_disco_format();
          $self->{output}->exit(exit_litteral => 'ok');
      }
  
      if ($self->{output}->is_disco_show()) {
          if (defined($self->{multiple})) {
              $self->{mode}->disco_show(custom => $self->{custommode});
          } else {
              $self->{mode}->disco_show(custom => $self->{custommode_stored}[0]);
          }
          $self->{output}->display_disco_show();
          $self->{output}->exit(exit_litteral => 'ok');
      } else {
          if (defined($self->{multiple})) {
              $self->{mode}->run(custom => $self->{custommode_stored});
          } else {
              $self->{mode}->run(custom => $self->{custommode_stored}[0]);
          }
      }
  }
  
  sub is_mode {
      my ($self, %options) = @_;
      
      # $options->{mode} = mode
      if (!defined($self->{modes}{$options{mode}})) {
          $self->{output}->add_option_msg(short_msg => "mode '" . $options{mode} . "' doesn't exist (use --list-mode option to show available modes).");
          $self->{output}->option_exit();
      }
  }
  
  sub is_custommode {
      my ($self, %options) = @_;
      
      # $options->{custommode} = mode
      if (!defined($self->{custom_modes}{$options{custommode}})) {
          $self->{output}->add_option_msg(short_msg => "mode '" . $options{custommode} . "' doesn't exist (use --list-custommode option to show available modes).");
          $self->{output}->option_exit();
      }
  }
  
  sub version {
      my $self = shift;    
      $self->{output}->add_option_msg(short_msg => "Plugin Version: " . $self->{version});
      $self->{output}->option_exit(nolabel => 1);
  }
  
  sub list_mode {
      my $self = shift;
      $self->{options}->display_help();
      
      $self->{output}->add_option_msg(long_msg => "Modes Available:");
      foreach (sort keys %{$self->{modes}}) {
          $self->{output}->add_option_msg(long_msg => "   " . $_);
      }
      $self->{output}->option_exit(nolabel => 1);
  }
  
  sub list_custommode {
      my $self = shift;
      $self->{options}->display_help();
      
      $self->{output}->add_option_msg(long_msg => "Custom Modes Available:");
      foreach (keys %{$self->{custom_modes}}) {
          $self->{output}->add_option_msg(long_msg => "   " . $_);
      }
      $self->{output}->option_exit(nolabel => 1);
  }
  
  1;
  
  
  =head1 NAME
  
  -
  
  =head1 SYNOPSIS
  
  -
  
  =head1 GLOBAL OPTIONS
  
  =over 8
  
  =item B<--mode>
  
  Choose a mode.
  
  =item B<--dyn-mode>
  
  Specify a mode with the path (separated by '::').
  
  =item B<--list-mode>
  
  List available modes.
  
  =item B<--mode-version>
  
  Check minimal version of mode. If not, unknown error.
  
  =item B<--version>
  
  Display plugin version.
  
  =item B<--custommode>
  
  Choose a custom mode.
  
  =item B<--list-custommode>
  
  List available custom modes.
  
  =item B<--multiple>
  
  Multiple custom mode objects (some mode needs it).
  
  =back
  
  =head1 DESCRIPTION
  
  B<>.
  
  =cut
CENTREON_PLUGINS_SCRIPT_CUSTOM

$fatpacked{"centreon/plugins/statefile.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'CENTREON_PLUGINS_STATEFILE';
  #
  # Copyright 2019 Centreon (http://www.centreon.com/)
  #
  # Centreon is a full-fledged industry-strength solution that meets
  # the needs in IT infrastructure and application monitoring for
  # service performance.
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  #
  
  package centreon::plugins::statefile;
  
  use strict;
  use warnings;
  use Data::Dumper;
  use vars qw($datas);
  use centreon::plugins::misc;
  
  my $default_dir = '/var/lib/centreon/centplugins';
  
  sub new {
      my ($class, %options) = @_;
      my $self  = {};
      bless $self, $class;
  
      if (defined($options{options})) {
          $options{options}->add_options(arguments => {
              'memcached:s'           => { name => 'memcached' },
              'redis-server:s'        => { name => 'redis_server' },
              'redis-attribute:s%'    => { name => 'redis_attribute' },
              'redis-db:s'            => { name => 'redis_db' },
              'memexpiration:s'       => { name => 'memexpiration', default => 86400 },
              'statefile-dir:s'       => { name => 'statefile_dir', default => $default_dir },
              'statefile-suffix:s'    => { name => 'statefile_suffix', default => '' },
              'statefile-concat-cwd'  => { name => 'statefile_concat_cwd' },
              'statefile-storable'    => { name => 'statefile_storable' },
          });
          $options{options}->add_help(package => __PACKAGE__, sections => 'RETENTION OPTIONS', once => 1);
      }
      
      $self->{error} = 0;
      $self->{output} = $options{output};
      $self->{datas} = {};
      $self->{storable} = 0;
      $self->{memcached_ok} = 0;
      $self->{memcached} = undef;
      
      $self->{statefile_dir} = undef;
      $self->{statefile_suffix} = undef;
      
      return $self;
  }
  
  sub check_options {
      my ($self, %options) = @_;
  
      if (defined($options{option_results}) && defined($options{option_results}->{memcached})) {
          centreon::plugins::misc::mymodule_load(output => $self->{output}, module => 'Memcached::libmemcached',
                                                 error_msg => "Cannot load module 'Memcached::libmemcached'.");
          $self->{memcached} = Memcached::libmemcached->new();
          Memcached::libmemcached::memcached_server_add($self->{memcached}, $options{option_results}->{memcached});
      }
      
      # Check redis
      if (defined($options{option_results}->{redis_server})) {
          $self->{redis_attributes} = '';
          if (defined($options{option_results}->{redis_attribute})) {
              foreach (keys %{$options{option_results}->{redis_attribute}}) {
                  $self->{redis_attributes} .= "$_ => " . $options{option_results}->{redis_attribute}->{$_} . ', ';
              }
          }
          
          centreon::plugins::misc::mymodule_load(output => $self->{output}, module => 'Redis',
                                                 error_msg => "Cannot load module 'Redis'.");
          eval {
              $self->{redis_cnx} = Redis->new(server => $options{option_results}->{redis_server}, 
                                              eval $self->{redis_attributes});
              if (defined($self->{redis_cnx}) && 
                  defined($options{option_results}->{redis_db}) &&
                  $options{option_results}->{redis_db} ne ''
                  ) {
                  $self->{redis_cnx}->select($options{option_results}->{redis_db});
              }
          };
      }
      
      $self->{statefile_dir} = $options{option_results}->{statefile_dir};
      if ($self->{statefile_dir} ne $default_dir && defined($options{option_results}->{statefile_concat_cwd})) {
          centreon::plugins::misc::mymodule_load(output => $self->{output}, module => 'Cwd',
                                                 error_msg => "Cannot load module 'Cwd'.");
          $self->{statefile_dir} = Cwd::cwd() . '/' . $self->{statefile_dir};
      }
      if (defined($options{option_results}->{statefile_storable})) {
          centreon::plugins::misc::mymodule_load(output => $self->{output}, module => 'Storable',
                                                 error_msg => "Cannot load module 'Storable'.");
          $self->{storable} = 1;
      }
      $self->{statefile_suffix} = $options{option_results}->{statefile_suffix};
      $self->{memexpiration} = $options{option_results}->{memexpiration};
  }
  
  sub error {
      my ($self) = shift;
       
      if (@_) {
          $self->{error} = $_[0];
      }
      return $self->{error};
  }
  
  sub read {
      my ($self, %options) = @_;
      $self->{statefile_suffix} = defined($options{statefile_suffix}) ? $options{statefile_suffix} : $self->{statefile_suffix};
      $self->{statefile_dir} = defined($options{statefile_dir}) ? $options{statefile_dir} : $self->{statefile_dir};
      $self->{statefile} = defined($options{statefile}) ? $options{statefile} . $self->{statefile_suffix} : 
                              $self->{statefile};
      $self->{no_quit} = defined($options{no_quit}) && $options{no_quit} == 1 ? 1 : 0;
  
      if (defined($self->{memcached})) {
          # if "SUCCESS" or "NOT FOUND" is ok. Other with use the file
          my $val = Memcached::libmemcached::memcached_get($self->{memcached}, $self->{statefile_dir} . "/" . $self->{statefile});
          if (defined($self->{memcached}->errstr) && $self->{memcached}->errstr =~ /^SUCCESS|NOT FOUND$/i) {
              $self->{memcached_ok} = 1;
              if (defined($val)) {
                  eval( $val );
                  $self->{datas} = $datas;
                  $datas = {};
                  return 1;
              }
              return 0;
          }
      }
      
      if (defined($self->{redis_cnx})) {
          my $val = $self->{redis_cnx}->get($self->{statefile_dir} . "/" . $self->{statefile});
          if (defined($val)) {
              eval($val);
              $self->{datas} = $datas;
              $datas = {};
              return 1;
          }
          
          return 0;
      }
      
      if (! -e $self->{statefile_dir} . '/' . $self->{statefile}) {
          if (! -w $self->{statefile_dir} || ! -x $self->{statefile_dir}) {
              $self->error(1);
              $self->{output}->add_option_msg(short_msg =>  "Cannot write statefile '" . $self->{statefile_dir} . "/" . $self->{statefile} . "'. Need write/exec permissions on directory.");
              if ($self->{no_quit} == 0) {
                  $self->{output}->option_exit();
              }
          }
          return 0;
      } elsif (! -w $self->{statefile_dir} . '/' . $self->{statefile}) {
          $self->error(1);
          $self->{output}->add_option_msg(short_msg => "Cannot write statefile '" . $self->{statefile_dir} . "/" . $self->{statefile} . "'. Need write permissions on file.");
          if ($self->{no_quit} == 0) {
              $self->{output}->option_exit();
          }
          return 1;
      } elsif (! -s $self->{statefile_dir} . '/' . $self->{statefile}) {
          # Empty file. Not a problem. Maybe plugin not manage not values
          return 0;
      }
      
      if ($self->{storable} == 1) {
          open FILE, $self->{statefile_dir} . '/' . $self->{statefile};
          eval {
              $self->{datas} = Storable::fd_retrieve(*FILE);
          };
          # File is corrupted surely. We'll reset it
          if ($@) {
              close FILE;
              return 0;
          }
          close FILE;
      } else {
          unless (my $return = do $self->{statefile_dir} . '/' . $self->{statefile}) {
              # File is corrupted surely. We'll reset it
              return 0;
              #if ($@) {
              #    $self->{output}->add_option_msg(short_msg => "Couldn't parse '" . $self->{statefile_dir} . "/" . $self->{statefile} . "': $@");
              #    $self->{output}->option_exit();
              #}
              #unless (defined($return)) {
              #    $self->{output}->add_option_msg(short_msg => "Couldn't do '" . $self->{statefile_dir} . "/" . $self->{statefile} . "': $!");
              #    $self->{output}->option_exit();
              #}
              #unless ($return) {
              #    $self->{output}->add_option_msg(short_msg => "Couldn't run '" . $self->{statefile_dir} . "/" . $self->{statefile} . "': $!");
              #    $self->{output}->option_exit();
          }
          $self->{datas} = $datas;
          $datas = {};
      }
  
      return 1;
  }
  
  sub get_string_content {
      my ($self, %options) = @_;
  
      return Data::Dumper::Dumper($self->{datas});
  }
  
  sub get {
      my ($self, %options) = @_;
  
      if (defined($self->{datas}->{$options{name}})) {
          return $self->{datas}->{$options{name}};
      }
      return undef;
  }
  
  sub write {
      my ($self, %options) = @_;
  
      if ($self->{memcached_ok} == 1) {
          Memcached::libmemcached::memcached_set($self->{memcached}, $self->{statefile_dir} . '/' . $self->{statefile}, 
                                                 Data::Dumper->Dump([$options{data}], ['datas']), $self->{memexpiration});
          if (defined($self->{memcached}->errstr) && $self->{memcached}->errstr =~ /^SUCCESS$/i) {
              return ;
          }
      }
      if (defined($self->{redis_cnx})) {
          return if (defined($self->{redis_cnx}->set($self->{statefile_dir} . '/' . $self->{statefile}, Data::Dumper->Dump([$options{data}], ['datas']),
                                                    'EX', $self->{memexpiration})));
      }
      open FILE, '>', $self->{statefile_dir} . '/' . $self->{statefile};
      if ($self->{storable} == 1) {
          Storable::store_fd($options{data}, *FILE);
      } else {
          print FILE Data::Dumper->Dump([$options{data}], ['datas']);
      }
      close FILE;
  }
  
  1;
  
  
  =head1 NAME
  
  Statefile class
  
  =head1 SYNOPSIS
  
  -
  
  =head1 RETENTION OPTIONS
  
  =over 8
  
  =item B<--memcached>
  
  Memcached server to use (only one server).
  
  =item B<--redis-server>
  
  Redis server to use (only one server).
  
  =item B<--redis-attribute>
  
  Set Redis Options (--redis-attribute="cnx_timeout=5").
  
  =item B<--redis-db>
  
  Set Redis database index.
  
  =item B<--memexpiration>
  
  Time to keep data in seconds (Default: 86400).
  
  =item B<--statefile-dir>
  
  Directory for statefile (Default: '/var/lib/centreon/centplugins').
  
  =item B<--statefile-suffix>
  
  Add a suffix for the statefile name (Default: '').
  
  =item B<--statefile-concat-cwd>
  
  Concat current working directory with option '--statefile-dir'.
  Useful on Windows when plugin is compiled.
  
  =item B<--statefile-storable>
  
  Use Perl Module 'Storable' (instead Data::Dumper) to store datas.
  
  =back
  
  =head1 DESCRIPTION
  
  B<statefile>.
  
  =cut
CENTREON_PLUGINS_STATEFILE

$fatpacked{"centreon/plugins/templates/catalog_functions.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'CENTREON_PLUGINS_TEMPLATES_CATALOG_FUNCTIONS';
  #
  # Copyright 2018 Centreon (http://www.centreon.com/)
  #
  # Centreon is a full-fledged industry-strength solution that meets
  # the needs in IT infrastructure and application monitoring for
  # service performance.
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  #
  
  package centreon::plugins::templates::catalog_functions;
  
  use strict;
  use warnings;
  use Exporter;
  
  our @ISA = qw(Exporter);
  our @EXPORT_OK = qw(catalog_status_threshold catalog_status_calc);
  
  sub catalog_status_threshold {
      my ($self, %options) = @_;
      my $status = 'ok';
      my $message;
  
      eval {
          local $SIG{__WARN__} = sub { $message = $_[0]; };
          local $SIG{__DIE__} = sub { $message = $_[0]; };
  
          my $label = $self->{label};
          $label =~ s/-/_/g;
          if (defined($self->{instance_mode}->{option_results}->{'ok_' . $label}) && $self->{instance_mode}->{option_results}->{'ok_' . $label} ne '' &&
              eval "$self->{instance_mode}->{option_results}->{'ok_' . $label}") {
              $status = 'ok';
          } elsif (defined($self->{instance_mode}->{option_results}->{'critical_' . $label}) && $self->{instance_mode}->{option_results}->{'critical_' . $label} ne '' &&
              eval "$self->{instance_mode}->{option_results}->{'critical_' . $label}") {
              $status = 'critical';
          } elsif (defined($self->{instance_mode}->{option_results}->{'warning_' . $label}) && $self->{instance_mode}->{option_results}->{'warning_' . $label} ne '' &&
              eval "$self->{instance_mode}->{option_results}->{'warning_' . $label}") {
              $status = 'warning';
          } elsif (defined($self->{instance_mode}->{option_results}->{'unknown_' . $label}) && $self->{instance_mode}->{option_results}->{'unknown_' . $label} ne '' &&
              eval "$self->{instance_mode}->{option_results}->{'unknown_' . $label}") {
              $status = 'unknown';
          }
      };
      if (defined($message)) {
          $self->{output}->output_add(long_msg => 'filter status issue: ' . $message);
      }
  
      return $status;
  }
  
  sub catalog_status_calc {
      my ($self, %options) = @_;
  
      foreach (keys %{$options{new_datas}}) {
          if (/^\Q$self->{instance}\E_(.*)/) {
              $self->{result_values}->{$1} = $options{new_datas}->{$_};
          }
      }
  }
  
  1;
  
  
CENTREON_PLUGINS_TEMPLATES_CATALOG_FUNCTIONS

$fatpacked{"centreon/plugins/templates/counter.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'CENTREON_PLUGINS_TEMPLATES_COUNTER';
  #
  # Copyright 2019 Centreon (http://www.centreon.com/)
  #
  # Centreon is a full-fledged industry-strength solution that meets
  # the needs in IT infrastructure and application monitoring for
  # service performance.
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  #
  
  package centreon::plugins::templates::counter;
  
  use base qw(centreon::plugins::mode);
  
  use strict;
  use warnings;
  use centreon::plugins::values;
  use centreon::plugins::misc;
  
  my $sort_subs = {
      num => sub { $a <=> $b },
      cmp => sub { $a cmp $b },
  };
  
  sub set_counters {
      my ($self, %options) = @_;
      
      if (!defined($self->{maps_counters})) {
          $self->{maps_counters} = {};
      }
      
      $self->{maps_counters_type} = [];
      
      # 0 = mode total
      # 1 = mode instances
      #push @{$self->{maps_counters_type}}, { 
      #    name => 'global', type => 0, message_separator => ', ', cb_prefix_output => undef, cb_init => undef,
      #};
  
      #$self->{maps_counters}->{global} = [
      #    { label => 'client', set => {
      #           key_values => [ { name => 'client' } ],
      #           output_template => 'Current client connections : %s',
      #           perfdatas => [
      #               { label => 'Client', value => 'client_absolute', template => '%s', 
      #                 min => 0, unit => 'con' },
      #           ],
      #       }
      #    },
      #];
      
      # Example for instances
      #push @{$self->{maps_counters_type}}, { 
      #    name => 'cpu', type => 1, message_separator => ', ', cb_prefix_output => undef, cb_init => undef,
      #    message_multiple => 'All CPU usages are ok',
      #};    
  }
  
  sub get_callback {
      my ($self, %options) = @_;
  
      if (defined($options{method_name})) {
          return $self->can($options{method_name});
      }
      
      return undef;
  }
  
  sub call_object_callback {
      my ($self, %options) = @_;
      
      if (defined($options{method_name})) {
          my $method = $self->can($options{method_name});
          if ($method) {
              return $self->$method(%options);
          }
      }
      
      return undef;
  }
  
  sub get_threshold_prefix {
      my ($self, %options) = @_;
      
      my $prefix = '';
      END_LOOP: foreach (@{$self->{maps_counters_type}}) {
          if ($_->{name} eq $options{name}) {
              $prefix = 'instance-' if ($_->{type} == 1);
              last;
          }
          
          if ($_->{type} == 3) {
              foreach (@{$_->{group}}) {
                  if ($_->{name} eq $options{name}) {
                      $prefix = 'instance-' if ($_->{type} == 0);
                      $prefix = 'subinstance-' if ($_->{type} == 1);
                      last END_LOOP;
                  }
              }
          }
      }
  
      return $prefix;
  }
  
  sub new {
      my ($class, %options) = @_;
      my $self = $class->SUPER::new(package => __PACKAGE__, %options);
      bless $self, $class;
      
      $self->{version} = '1.0';
      $options{options}->add_options(arguments => {
          'filter-counters:s'     => { name => 'filter_counters' },
          'display-ok-counters:s' => { name => 'display_ok_counters' },
          'list-counters'         => { name => 'list_counters' },
      });
      $self->{statefile_value} = undef;
      if (defined($options{statefile}) && $options{statefile}) {
          centreon::plugins::misc::mymodule_load(output => $self->{output}, module => 'centreon::plugins::statefile',
                                                 error_msg => "Cannot load module 'centreon::plugins::statefile'.");
          $self->{statefile_value} = centreon::plugins::statefile->new(%options);
      }
      
      $self->{maps_counters} = {} if (!defined($self->{maps_counters}));
      $self->set_counters(%options);
      
      foreach my $key (keys %{$self->{maps_counters}}) {
          foreach (@{$self->{maps_counters}->{$key}}) {
              my $label = $_->{label};
              my $thlabel = $label;
              if ($self->{output}->use_new_perfdata() && defined($_->{nlabel})) {
                  $label = $_->{nlabel};
                  $thlabel = $self->get_threshold_prefix(name => $key) . $label;
              }
              $thlabel =~ s/\./-/g;
              
              if (!defined($_->{threshold}) || $_->{threshold} != 0) {
                  $options{options}->add_options(arguments => {
                      'warning-' . $thlabel . ':s'     => { name => 'warning-' . $thlabel },
                      'critical-' . $thlabel . ':s'    => { name => 'critical-' . $thlabel },
                  });
  
                  if (defined($_->{nlabel})) {
                      $options{options}->add_options(arguments => {
                          'warning-' . $_->{label} . ':s'     => { name => 'warning-' . $_->{label}, redirect => 'warning-' . $thlabel },
                          'critical-' . $_->{label} . ':s'    => { name => 'critical-' . $_->{label}, redirect => 'critical-' . $thlabel },
                      });
                  }
              }
              $_->{obj} = centreon::plugins::values->new(
                  statefile => $self->{statefile_value},
                  output => $self->{output}, perfdata => $self->{perfdata},
                  label => $_->{label}, nlabel => $_->{nlabel}, thlabel => $thlabel,
              );
              $_->{obj}->set(%{$_->{set}});
          }
      }
  
      return $self;
  }
  
  sub check_options {
      my ($self, %options) = @_;
      $self->SUPER::init(%options);
      
      if (defined($self->{option_results}->{list_counters})) {
          my $list_counter = 'counter list:';
          my $th_counter = '';
          foreach my $key (keys %{$self->{maps_counters}}) {
              foreach (@{$self->{maps_counters}->{$key}}) {
                  my $label = $_->{label};
                  $label =~ s/-//g;
                  $list_counter .= " " . $_->{label};
                  $th_counter .= " --warning-$_->{label}='\$_SERVICEWARNING" . uc($label) . "\$' --critical-$_->{label}='\$_SERVICECRITICAL" . uc($label) . "\$'";  
              }
          }
          $self->{output}->output_add(short_msg => $list_counter);
          $self->{output}->output_add(long_msg => 'configuration: ' . $th_counter); 
          $self->{output}->display(nolabel => 1, force_ignore_perfdata => 1);
          $self->{output}->exit();
      }
      foreach my $key (keys %{$self->{maps_counters}}) {
          foreach (@{$self->{maps_counters}->{$key}}) {
              $_->{obj}->{instance_mode} = $self;
              $_->{obj}->init(option_results => $self->{option_results});
          }
      }
      
      if (defined($self->{statefile_value})) {
          $self->{statefile_value}->check_options(%options);
      }
  }
  
  sub run_global {
      my ($self, %options) = @_;
      
      return undef if (defined($options{config}->{cb_init}) && $self->call_object_callback(method_name => $options{config}->{cb_init}) == 1);
      my $resume = defined($options{resume}) && $options{resume} == 1 ? 1 : 0;
      # Can be set when it comes from type 3 counters
      my $called_multiple = defined($options{called_multiple}) && $options{called_multiple} == 1 ? 1 : 0;
      my $multiple_parent = defined($options{multiple_parent}) && $options{multiple_parent} == 1 ? 1 : 0;
      my $force_instance = defined($options{force_instance}) ? $options{force_instance} : undef;
      
      my $message_separator = defined($options{config}->{message_separator}) ? 
          $options{config}->{message_separator}: ', ';
      my ($short_msg, $short_msg_append, $long_msg, $long_msg_append) = ('', '', '', '');
      my @exits;
      foreach (@{$self->{maps_counters}->{$options{config}->{name}}}) {
          my $obj = $_->{obj};
  
          next if (defined($self->{option_results}->{filter_counters}) && $self->{option_results}->{filter_counters} ne '' &&
              $_->{label} !~ /$self->{option_results}->{filter_counters}/);
      
          $obj->set(instance => defined($force_instance) ? $force_instance : $options{config}->{name});
      
          my ($value_check) = $obj->execute(new_datas => $self->{new_datas}, values => $self->{$options{config}->{name}});
  
          next if (defined($options{config}->{skipped_code}) && defined($options{config}->{skipped_code}->{$value_check}));
          if ($value_check != 0) {
              $long_msg .= $long_msg_append . $obj->output_error();
              $long_msg_append = $message_separator;
              next;
          }
          my $exit2 = $obj->threshold_check();
          push @exits, $exit2;
  
          my $output = $obj->output();
          if (!defined($_->{display_ok}) || $_->{display_ok} != 0 ||
              (defined($self->{option_results}->{display_ok_counters}) && $self->{option_results}->{display_ok_counters} ne '' &&
               $_->{label} =~ /$self->{option_results}->{display_ok_counters}/)) {
              $long_msg .= $long_msg_append . $output;
              $long_msg_append = $message_separator;
          }
  
          if (!$self->{output}->is_status(litteral => 1, value => $exit2, compare => 'ok')) {
              $short_msg .= $short_msg_append . $output;
              $short_msg_append = $message_separator;
          }
          
          $obj->perfdata(extra_instance => $multiple_parent);
      }
  
      my ($prefix_output, $suffix_output);
      $prefix_output = $self->call_object_callback(method_name => $options{config}->{cb_prefix_output}) 
          if (defined($options{config}->{cb_prefix_output}));
      $prefix_output = '' if (!defined($prefix_output));
      
      $suffix_output = $self->call_object_callback(method_name => $options{config}->{cb_suffix_output}) 
          if (defined($options{config}->{cb_suffix_output}));
      $suffix_output = '' if (!defined($suffix_output));
      
      if ($called_multiple == 1 && $long_msg ne '') {
          $self->{output}->output_add(long_msg => $options{indent_long_output} . $prefix_output. $long_msg . $suffix_output);
      }
      
      my $exit = $self->{output}->get_most_critical(status => [ @exits ]);
      if (!$self->{output}->is_status(litteral => 1, value => $exit, compare => 'ok')) {
          if ($called_multiple == 0) {
              $self->{output}->output_add(severity => $exit,
                                          short_msg => $prefix_output . $short_msg . $suffix_output);
          } else {
              $self->run_multiple_prefix_output(severity => $exit,
                                                short_msg => $prefix_output . $short_msg . $suffix_output);
          }
      } else {
          if ($long_msg ne '' && $multiple_parent == 0) {
              if ($called_multiple == 0) {
                  $self->{output}->output_add(short_msg => $prefix_output . $long_msg . $suffix_output) ;
              } else {
                  $self->run_multiple_prefix_output(severity => 'ok',
                                                    short_msg => $prefix_output . $long_msg . $suffix_output);
              }
          }
      }
  }
  
  sub run_instances {
      my ($self, %options) = @_;
      
      return undef if (defined($options{config}->{cb_init}) && $self->call_object_callback(method_name => $options{config}->{cb_init}) == 1);
      my $cb_init_counters = $self->get_callback(method_name => $options{config}->{cb_init_counters});
      my $display_status_lo = defined($options{display_status_long_output}) && $options{display_status_long_output} == 1 ? 1 : 0;
      my $resume = defined($options{resume}) && $options{resume} == 1 ? 1 : 0;
      my $no_message_multiple = 1;
      
      $self->{lproblems} = 0;
      $self->{multiple} = 1;
      if (scalar(keys %{$self->{$options{config}->{name}}}) == 1) {
          $self->{multiple} = 0;
      }
      
      my $message_separator = defined($options{config}->{message_separator}) ? 
          $options{config}->{message_separator}: ', ';
  
      my $sort_method = 'cmp';
      $sort_method = $options{config}->{sort_method}
          if (defined($options{config}->{sort_method}));
      foreach my $id (sort { $sort_subs->{$sort_method}->() } keys %{$self->{$options{config}->{name}}}) {
          my ($short_msg, $short_msg_append, $long_msg, $long_msg_append) = ('', '', '', '');
          my @exits = ();
          foreach (@{$self->{maps_counters}->{$options{config}->{name}}}) {
              my $obj = $_->{obj};
  
              next if (defined($self->{option_results}->{filter_counters}) && $self->{option_results}->{filter_counters} ne '' &&
                  $_->{label} !~ /$self->{option_results}->{filter_counters}/);
              next if ($cb_init_counters && $self->$cb_init_counters(%$_) == 1);
  
              $no_message_multiple = 0;
              $obj->set(instance => $id);
          
              my ($value_check) = $obj->execute(new_datas => $self->{new_datas},
                                                values => $self->{$options{config}->{name}}->{$id});
              next if (defined($options{config}->{skipped_code}) && defined($options{config}->{skipped_code}->{$value_check}));
              if ($value_check != 0) {
                  $long_msg .= $long_msg_append . $obj->output_error();
                  $long_msg_append = $message_separator;
                  next;
              }
              my $exit2 = $obj->threshold_check();
              push @exits, $exit2;
  
              my $output = $obj->output();
              if (!defined($_->{display_ok}) || $_->{display_ok} != 0 ||
                  (defined($self->{option_results}->{display_ok_counters}) && $self->{option_results}->{display_ok_counters} ne '' &&
                   $_->{label} =~ /$self->{option_results}->{display_ok_counters}/)) {
                  $long_msg .= $long_msg_append . $output;
                  $long_msg_append = $message_separator;
              }
              
              if (!$self->{output}->is_status(litteral => 1, value => $exit2, compare => 'ok')) {
                  $self->{lproblems}++;
                  $short_msg .= $short_msg_append . $output;
                  $short_msg_append = $message_separator;
              }
              
              $obj->perfdata(extra_instance => $self->{multiple});
          }
  
          my ($prefix_output, $suffix_output);
          $prefix_output = $self->call_object_callback(method_name => $options{config}->{cb_prefix_output}, instance_value => $self->{$options{config}->{name}}->{$id})
              if (defined($options{config}->{cb_prefix_output}));
          $prefix_output = '' if (!defined($prefix_output));
          
          $suffix_output = $self->call_object_callback(method_name => $options{config}->{cb_suffix_output}) 
          if (defined($options{config}->{cb_suffix_output}));
          $suffix_output = '' if (!defined($suffix_output));
  
          my $exit = $self->{output}->get_most_critical(status => [ @exits ]);
          # in mode grouped, we don't display 'ok'
          my $debug = 0;
          $debug = 1 if ($display_status_lo == 1 && $self->{output}->is_status(value => $exit, compare => 'OK', litteral => 1));
          if (scalar @{$self->{maps_counters}->{$options{config}->{name}}} > 0 && $long_msg ne '') {
              $self->{output}->output_add(long_msg => ($display_status_lo == 1 ? lc($exit) . ': ' : '') . $prefix_output . $long_msg . $suffix_output, debug => $debug);
          }
          if ($resume == 1) {
              $self->{most_critical_instance} = $self->{output}->get_most_critical(status => [ $self->{most_critical_instance},  $exit ]);  
              next;
          }
          
          if (!$self->{output}->is_status(litteral => 1, value => $exit, compare => 'ok')) {
              $self->{output}->output_add(severity => $exit,
                                          short_msg => $prefix_output . $short_msg . $suffix_output);
          }
          
          if ($self->{multiple} == 0)  {
              $self->{output}->output_add(short_msg => $prefix_output . $long_msg . $suffix_output);
          }
      }
      
      if ($no_message_multiple == 0 && $self->{multiple} == 1 && $resume == 0) {
          $self->{output}->output_add(short_msg => $options{config}->{message_multiple});
      }
  }
  
  sub run_group {
      my ($self, %options) = @_;
  
      my $multiple = 1;
      return if (scalar(keys %{$self->{$options{config}->{name}}}) <= 0);
      if (scalar(keys %{$self->{$options{config}->{name}}}) == 1) {
          $multiple = 0;
      }
      
      if ($multiple == 1) {
          $self->{output}->output_add(severity => 'OK',
                                      short_msg => $options{config}->{message_multiple});
      }
      
      my $format_output = defined($options{config}->{format_output}) ? $options{config}->{format_output} : '%s problem(s) detected';
      
      my ($global_exit, $total_problems) = ([], 0);
      foreach my $id (sort keys %{$self->{$options{config}->{name}}}) {
          $self->{most_critical_instance} = 'ok';
          if (defined($options{config}->{cb_long_output})) {
              $self->{output}->output_add(long_msg => $self->call_object_callback(method_name => $options{config}->{cb_long_output},
                                                                                  instance_value => $self->{$options{config}->{name}}->{$id}));
          }
          
          foreach my $group (@{$options{config}->{group}}) {
              $self->{$group->{name}} = $self->{$options{config}->{name}}->{$id}->{$group->{name}};
              
              # we resume datas
              $self->run_instances(config => $group, display_status_long_output => 1, resume => 1);
              
              push @{$global_exit}, $self->{most_critical_instance};
              $total_problems += $self->{lproblems};
              
              my $prefix_output;
              $prefix_output = $self->call_object_callback(method_name => $options{config}->{cb_prefix_output}, instance_value => $self->{$options{config}->{name}}->{$id})
              if (defined($options{config}->{cb_prefix_output}));
              $prefix_output = '' if (!defined($prefix_output));
              
              if ($multiple == 0 && (!defined($group->{display}) || $group->{display} != 0)) {
                  $self->{output}->output_add(severity => $self->{most_critical_instance},
                                              short_msg => sprintf("${prefix_output}" . $format_output, $self->{lproblems}));
              }
          }
      }
      
      if ($multiple == 1) {
          my $exit = $self->{output}->get_most_critical(status => [ @{$global_exit} ]);
          if (!$self->{output}->is_status(litteral => 1, value => $exit, compare => 'ok')) {
              $self->{output}->output_add(severity => $exit,
                                          short_msg => sprintf($format_output, $total_problems));
          }
      }
      
      if (defined($options{config}->{display_counter_problem})) {
          $self->{output}->perfdata_add(
              label => $options{config}->{display_counter_problem}->{label},
              nlabel => $options{config}->{display_counter_problem}->{nlabel},
              unit => $options{config}->{display_counter_problem}->{unit},
              value => $total_problems,
              min => $options{config}->{display_counter_problem}->{min}, max => $options{config}->{display_counter_problem}->{max}
          );
      }
  }
  
  sub run_multiple_instances {
      my ($self, %options) = @_;
      
      return undef if (defined($options{config}->{cb_init}) && $self->call_object_callback(method_name => $options{config}->{cb_init}) == 1);
      my $use_new_perfdata = $self->{output}->use_new_perfdata();
      my $multiple_parent = defined($options{multiple_parent}) && $options{multiple_parent} == 1 ? $options{multiple_parent} : 0;
      my $indent_long_output = defined($options{indent_long_output}) ? $options{indent_long_output} : '';
      my $no_message_multiple = 1;
      
      my $multiple = 1;
      if (scalar(keys %{$self->{$options{config}->{name}}}) == 1) {
          $multiple = 0;
      }
      
      my $message_separator = defined($options{config}->{message_separator}) ? 
          $options{config}->{message_separator} : ', ';
      my $sort_method = 'cmp';
      $sort_method = $options{config}->{sort_method}
          if (defined($options{config}->{sort_method}));
      foreach my $id (sort { $sort_subs->{$sort_method}->() } keys %{$self->{$options{config}->{name}}}) {
          my ($short_msg, $short_msg_append, $long_msg, $long_msg_append) = ('', '', '', '');
          my @exits = ();
          foreach (@{$self->{maps_counters}->{$options{config}->{name}}}) {
              my $obj = $_->{obj};
              
              next if (defined($self->{option_results}->{filter_counters}) && $self->{option_results}->{filter_counters} ne '' &&
                  $_->{label} !~ /$self->{option_results}->{filter_counters}/);
              
              my $instance = $id;
              if ($use_new_perfdata || ($multiple_parent == 1 && $multiple == 1)) {
                  $instance = $options{instance_parent} . ($self->{output}->get_instance_perfdata_separator()) . $id;
              } elsif ($multiple_parent == 1 && $multiple == 0) {
                  $instance = $options{instance_parent};
              }
              
              $no_message_multiple = 0;
              $obj->set(instance => $instance);
          
              my ($value_check) = $obj->execute(new_datas => $self->{new_datas},
                                                values => $self->{$options{config}->{name}}->{$id});
              next if (defined($options{config}->{skipped_code}) && defined($options{config}->{skipped_code}->{$value_check}));
              if ($value_check != 0) {
                  $long_msg .= $long_msg_append . $obj->output_error();
                  $long_msg_append = $message_separator;
                  next;
              }
              my $exit2 = $obj->threshold_check();
              push @exits, $exit2;
  
              my $output = $obj->output();
              $long_msg .= $long_msg_append . $output;
              $long_msg_append = $message_separator;
              
              if (!$self->{output}->is_status(litteral => 1, value => $exit2, compare => 'ok')) {
                  $short_msg .= $short_msg_append . $output;
                  $short_msg_append = $message_separator;
              }
              
              if ($multiple_parent == 1 && $multiple == 0) {
                  $obj->perfdata(extra_instance => 1);
              } else {
                  $obj->perfdata(extra_instance => $multiple);
              }
          }
  
          my ($prefix_output, $suffix_output);
          $prefix_output = $self->call_object_callback(method_name => $options{config}->{cb_prefix_output}, instance_value => $self->{$options{config}->{name}}->{$id})
              if (defined($options{config}->{cb_prefix_output}));
          $prefix_output = '' if (!defined($prefix_output));
          
          $suffix_output = $self->call_object_callback(method_name => $options{config}->{cb_suffix_output}) 
          if (defined($options{config}->{cb_suffix_output}));
          $suffix_output = '' if (!defined($suffix_output));
  
          my $exit = $self->{output}->get_most_critical(status => [ @exits ]);
          if (scalar @{$self->{maps_counters}->{$options{config}->{name}}} > 0 && $long_msg ne '') {
              $self->{output}->output_add(long_msg => $indent_long_output . $prefix_output . $long_msg . $suffix_output)
                  if (!defined($options{config}->{display_long}) || $options{config}->{display_long} != 0);
          }
          
          if (!$self->{output}->is_status(litteral => 1, value => $exit, compare => 'ok')) {
              $self->run_multiple_prefix_output(severity => $exit,
                  short_msg => $prefix_output . $short_msg . $suffix_output);
          }
          
          if ($multiple == 0 && $multiple_parent == 0) {
              $self->run_multiple_prefix_output(severity => 'ok', short_msg => $prefix_output . $long_msg . $suffix_output);            
          }
      }
      
      if ($no_message_multiple == 0 && $multiple == 1 && $multiple_parent == 0) {
          $self->{output}->output_add(short_msg => $options{config}->{message_multiple});
      }
  }
  
  sub run_multiple_prefix_output {
      my ($self, %options) = @_;
      
      my %separator;
      if ($self->{prefix_multiple_output_done}->{lc($options{severity})} == 0) {
          $self->{output}->output_add(severity => $options{severity}, short_msg => $self->{prefix_multiple_output});
          $self->{prefix_multiple_output_done}->{lc($options{severity})} = 1;
          $separator{separator} = '';
      }
      
      $self->{output}->output_add(severity => $options{severity}, short_msg => "$options{short_msg}", %separator);
  }
  
  sub run_multiple {
      my ($self, %options) = @_;
  
      my $multiple = 1;
      if (scalar(keys %{$self->{$options{config}->{name}}}) == 1) {
          $multiple = 0;
      }
      
      if ($multiple == 1) {
          $self->{output}->output_add(severity => 'OK',
                                      short_msg => $options{config}->{message_multiple});
      }
      
      foreach my $instance (sort keys %{$self->{$options{config}->{name}}}) {
          if (defined($options{config}->{cb_long_output})) {
              $self->{output}->output_add(long_msg => $self->call_object_callback(method_name => $options{config}->{cb_long_output},
                                                                                  instance_value => $self->{$options{config}->{name}}->{$instance}));
          }
          
          $self->{prefix_multiple_output} = '';
          $self->{prefix_multiple_output_done} = { ok => 0, warning => 0, critical => 0, unknown => 0 };
          $self->{prefix_multiple_output} = $self->call_object_callback(method_name => $options{config}->{cb_prefix_output}, instance_value => $self->{$options{config}->{name}}->{$instance})
               if (defined($options{config}->{cb_prefix_output}));
          my $indent_long_output = '';
          $indent_long_output = $options{config}->{indent_long_output}
              if (defined($options{config}->{indent_long_output}));
          
          foreach my $group (@{$options{config}->{group}}) {
              next if (!defined($self->{$options{config}->{name}}->{$instance}->{$group->{name}}));
              $self->{$group->{name}} = $self->{$options{config}->{name}}->{$instance}->{$group->{name}};
              
              if ($group->{type} == 1) {
                  $self->run_multiple_instances(config => $group, multiple_parent => $multiple, instance_parent => $instance, indent_long_output => $indent_long_output);
              } elsif ($group->{type} == 0) {
                  $self->run_global(config => $group, multiple_parent => $multiple, called_multiple => 1, force_instance => $instance, indent_long_output => $indent_long_output);
              }
          }
      }
  }
  
  sub run {
      my ($self, %options) = @_;
      
      $self->manage_selection(%options);
      
      $self->{new_datas} = undef;
      if (defined($self->{statefile_value})) {
          $self->{new_datas} = {};
          $self->{statefile_value}->read(statefile => $self->{cache_name}) if (defined($self->{cache_name}));
          $self->{new_datas}->{last_timestamp} = time();
      }
      
      foreach my $entry (@{$self->{maps_counters_type}}) {
          if ($entry->{type} == 0) {
              $self->run_global(config => $entry);
          } elsif ($entry->{type} == 1) {
              $self->run_instances(config => $entry);
          } elsif ($entry->{type} == 2) {
              $self->run_group(config => $entry);
          } elsif ($entry->{type} == 3) {
              $self->run_multiple(config => $entry);
          }
      }
          
      if (defined($self->{statefile_value})) {
          $self->{statefile_value}->write(data => $self->{new_datas});
      }
      $self->{output}->display();
      $self->{output}->exit();
  }
  
  sub manage_selection {
      my ($self, %options) = @_;
  
      # example for snmp
      #use Digest::MD5 qw(md5_hex);
      #$self->{cache_name} = "choose_name_" . $options{snmp}->get_hostname()  . '_' . $options{snmp}->get_port() . '_' . $self->{mode} . '_' . 
      #    (defined($self->{option_results}->{filter_counters}) ? md5_hex($self->{option_results}->{filter_counters}) : md5_hex('all'));
  }
  
  sub change_macros {
      my ($self, %options) = @_;
  
      foreach (@{$options{macros}}) {
          if (defined($self->{option_results}->{$_})) {
              $self->{option_results}->{$_} =~ s/%\{(.*?)\}/\$self->{result_values}->{$1}/g;
          }
      }
  }
      
  1;
  
  
  =head1 MODE
  
  Default template for counters. Should be extended.
  
  =over 8
  
  =item B<--filter-counters>
  
  Only display some counters (regexp can be used).
  Example to check SSL connections only : --filter-counters='^xxxx|yyyy$'
  
  =item B<--warning-*>
  
  Threshold warning.
  Can be: 'xxx', 'xxx'.
  
  =item B<--critical-*>
  
  Threshold critical.
  Can be: 'xxx', 'xxx'.
  
  =back
  
  =cut
CENTREON_PLUGINS_TEMPLATES_COUNTER

$fatpacked{"centreon/plugins/templates/hardware.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'CENTREON_PLUGINS_TEMPLATES_HARDWARE';
  #
  # Copyright 2019 Centreon (http://www.centreon.com/)
  #
  # Centreon is a full-fledged industry-strength solution that meets
  # the needs in IT infrastructure and application monitoring for
  # service performance.
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  #
  
  package centreon::plugins::templates::hardware;
  
  use base qw(centreon::plugins::mode);
  
  use strict;
  use warnings;
  
  sub set_system {
      my ($self, %options) = @_;
      
      # To check with a regexp
      #$self->{regexp_threshold_overload_check_section_option} = '';
      #$self->{cb_threshold_overload_check_section_option} = 'callbackname';
      
      #$self->{regexp_threshold_numeric_check_section_option} = '';
      #$self->{cb_threshold_numeric_check_section_option} = 'callbackname';
      
      # Some callbacks 
      #$self->{cb_hook1} = 'callbackname'; # before the loads
      #$self->{cb_hook2} = 'callbackname'; # between loads and requests
      #$self->{cb_hook3} = 'callbackname'; # after requests
      #$self->{cb_hook4} = 'callbackname'; # after output
      
      # Example for threshold:
      #$self->{thresholds} = {
      #    fan => [
      #        ['bad', 'CRITICAL'],
      #        ['good', 'OK'],
      #        ['notPresent', 'OK'],
      #    ],
      #};
      
      # Unset the call to load components
      #$self->{components_exec_load} = 0;
      
      # Set the path_info
      #$self->{components_path} = 'network::xxxx::mode::components';
      
      # Set the components
      #$self->{components_module} = ['cpu', 'memory', ...];
  }
  
  sub call_object_callback {
      my ($self, %options) = @_;
      
      if (defined($options{method_name})) {
          my $method = $self->can($options{method_name});
          if ($method) {
              return $self->$method(%options);
          }
      }
      
      return undef;
  }
  
  sub new {
      my ($class, %options) = @_;
      my $self = $class->SUPER::new(package => __PACKAGE__, %options);
      bless $self, $class;
      
      $self->{version} = '1.0';
      $options{options}->add_options(arguments => {
          'component:s'             => { name => 'component', default => '.*' },
          'no-component:s'          => { name => 'no_component' },
          'threshold-overload:s@'   => { name => 'threshold_overload' },
          'add-name-instance'       => { name => 'add_name_instance' },
      });
      
      $self->{performance} = (defined($options{no_performance}) && $options{no_performance} == 1) ?
          0 : 1;
      if ($self->{performance} == 1) {
          $options{options}->add_options(arguments => {
              'warning:s@'     => { name => 'warning' },
              'critical:s@'   => { name => 'critical' },
          });
      }
      
      $self->{filter_exclude} = (defined($options{no_filter_exclude}) && $options{no_filter_exclude} == 1) ?
          0 : 1;
      if ($self->{filter_exclude} == 1) {
          $options{options}->add_options(arguments => {
              'exclude:s'     => { name => 'exclude' },
              'filter:s@'     => { name => 'filter' },
          });
      }
      $self->{absent} = (defined($options{no_absent}) && $options{no_absent} == 1) ?
          0 : 1;
      if ($self->{absent} == 1) {
          $options{options}->add_options(arguments => {
              'absent-problem:s@'       => { name => 'absent_problem' },
          });
      }
      
      $self->{load_components} = (defined($options{no_load_components}) && $options{no_load_components} == 1) ?
          0 : 1;
      $self->{components} = {};
      $self->{no_components} = undef;
      
      $self->{components_module} = [];
      $self->{components_exec_load} = 1;
      $self->set_system();
  
      $self->{count} = (defined($options{no_count}) && $options{no_count} == 1) ?
          0 : 1;
      if ($self->{count} == 1) {
          foreach my $component (@{$self->{components_module}}) {
              $options{options}->add_options(arguments => {
                  'warning-count-' . $component . ':s'    => { name => 'warning_count_' . $component },
                  'critical-count-' . $component . ':s'    => { name => 'critical_count_' . $component },
              });
          }
      }
  
      $self->{request} = [];
      
      return $self;
  }
  
  sub check_options {
      my ($self, %options) = @_;
      $self->SUPER::init(%options);
      
      if (defined($self->{option_results}->{no_component})) {
          if ($self->{option_results}->{no_component} ne '') {
              $self->{no_components} = $self->{option_results}->{no_component};
          } else {
              $self->{no_components} = 'critical';
          }
      }
      
      if ($self->{filter_exclude} == 1) {
          $self->{filter} = [];
          foreach my $val (@{$self->{option_results}->{filter}}) {
              next if (!defined($val) || $val eq '');
              my @values = split (/,/, $val);
              push @{$self->{filter}}, { filter => $values[0], instance => $values[1] }; 
          }
      }
      
      if ($self->{absent} == 1) {
          $self->{absent_problem} = [];
          foreach my $val (@{$self->{option_results}->{absent_problem}}) {
              next if (!defined($val) || $val eq '');
              my @values = split (/,/, $val);
              push @{$self->{absent_problem}}, { filter => $values[0], instance => $values[1] }; 
          }
      }
      
      $self->{overload_th} = {};
      foreach my $val (@{$self->{option_results}->{threshold_overload}}) {
          next if (!defined($val) || $val eq '');
          my @values = split (/,/, $val);
          if (scalar(@values) < 3) {
              $self->{output}->add_option_msg(short_msg => "Wrong threshold-overload option '" . $val . "'.");
              $self->{output}->option_exit();
          }
          my ($section, $instance, $status, $filter);
          if (scalar(@values) == 3) {
              ($section, $status, $filter) = @values;
              $instance = '.*';
          } else {
               ($section, $instance, $status, $filter) = @values;
          }
          if (defined($self->{regexp_threshold_overload_check_section_option}) && 
              $section !~ /$self->{regexp_threshold_overload_check_section_option}/) {
              $self->{output}->add_option_msg(short_msg => "Wrong threshold-overload section '" . $val . "'.");
              $self->{output}->option_exit();
          }
          $self->call_object_callback(method_name => $self->{cb_threshold_overload_check_section_option}, 
                                      section => $section, option_value => $val);
  
          if ($self->{output}->is_litteral_status(status => $status) == 0) {
              $self->{output}->add_option_msg(short_msg => "Wrong threshold-overload status '" . $val . "'.");
              $self->{output}->option_exit();
          }
          $self->{overload_th}->{$section} = [] if (!defined($self->{overload_th}->{$section}));
          push @{$self->{overload_th}->{$section}}, {filter => $filter, status => $status, instance => $instance };
      }
      
      if ($self->{performance} == 1) {
          $self->{numeric_threshold} = {};
          foreach my $option (('warning', 'critical')) {
              foreach my $val (@{$self->{option_results}->{$option}}) {
                  next if (!defined($val) || $val eq '');
                  if ($val !~ /^(.*?),(.*?),(.*)$/) {
                      $self->{output}->add_option_msg(short_msg => "Wrong $option option '" . $val . "'.");
                      $self->{output}->option_exit();
                  }
                  my ($section, $instance, $value) = ($1, $2, $3);                
                  if (defined($self->{regexp_threshold_numeric_check_section_option}) && 
                      $section !~ /$self->{regexp_threshold_numeric_check_section_option}/) {
                      $self->{output}->add_option_msg(short_msg => "Wrong $option option '" . $val . "'.");
                      $self->{output}->option_exit();
                  }   
                  $self->call_object_callback(method_name => $self->{cb_threshold_numeric_check_section_option}, 
                                              section => $section, option_name => $option, option_value => $val);
  
                  my $position = 0;
                  if (defined($self->{numeric_threshold}->{$section})) {
                      $position = scalar(@{$self->{numeric_threshold}->{$section}});
                  }
                  if (($self->{perfdata}->threshold_validate(label => $option . '-' . $section . '-' . $position, value => $value)) == 0) {
                      $self->{output}->add_option_msg(short_msg => "Wrong $option threshold '" . $value . "'.");
                      $self->{output}->option_exit();
                  }
                  $self->{numeric_threshold}->{$section} = [] if (!defined($self->{numeric_threshold}->{$section}));
                  push @{$self->{numeric_threshold}->{$section}}, { label => $option . '-' . $section . '-' . $position, threshold => $option, instance => $instance };
              }
          }
      }
      
      if ($self->{count} == 1) {
          foreach my $comp (@{$self->{components_module}}) {
              foreach my $threshold (('warning', 'critical')) {
                  if (($self->{perfdata}->threshold_validate(label => $threshold . '-count-' . $comp, value => $self->{option_results}->{$threshold . '_count_' . $comp})) == 0) {
                      $self->{output}->add_option_msg(short_msg => "Wrong " . $threshold . " threshold '" . $self->{option_results}->{$threshold . '_count_' . $comp} . "'.");
                      $self->{output}->option_exit();
                  }
              }
          }
      }
  }
  
  sub load_components {
      my ($self, %options) = @_;
      
      foreach (@{$self->{components_module}}) {
          if (/$self->{option_results}->{component}/) {
              my $mod_name = $self->{components_path} . "::$_";
              centreon::plugins::misc::mymodule_load(output => $self->{output}, module => $mod_name,
                                                     error_msg => "Cannot load module '$mod_name'.") if ($self->{load_components} == 1);
              $self->{loaded} = 1;
              if ($self->{components_exec_load} == 1) {
                  my $func = $mod_name->can('load');
                  $func->($self);
              }
          }
      }
  }
  
  sub exec_components {
      my ($self, %options) = @_;
      
      foreach (@{$self->{components_module}}) {
          if (/$self->{option_results}->{component}/) {
              my $mod_name = $self->{components_path} . "::$_";
              my $func = $mod_name->can('check');
              $func->($self); 
          }
      }
  }
  
  sub display {
      my ($self, %options) = @_;
      
      my $total_components = 0;
      my $display_by_component = '';
      my $display_by_component_append = '';
      my $exit = 'OK';
      my $exits = [];
      my ($warn, $crit);
  
      foreach my $comp (sort(keys %{$self->{components}})) {
          # Skipping short msg when no components
          next if ($self->{components}->{$comp}->{total} == 0 && $self->{components}->{$comp}->{skip} == 0);
  
          if ($self->{count} == 1) {
              ($exit, $warn, $crit) = $self->get_severity_count(label => $comp, value => $self->{components}->{$comp}->{total});
              if (!$self->{output}->is_status(value => $exit, compare => 'ok', litteral => 1)) {
                  $self->{output}->output_add(severity => $exit,
                                              short_msg => sprintf("'%s' components '%s' checked",
                                                              $self->{components}->{$comp}->{total},
                                                              $comp));
              }
              $self->{output}->perfdata_add(
                  label => 'count_' . $comp,
                  nlabel => 'hardware.' . $comp . '.count',
                  value => $self->{components}->{$comp}->{total},
                  warning => $warn,
                  critical => $crit
              );
              push @{$exits}, $exit;
          }
  
          $total_components += $self->{components}->{$comp}->{total} + $self->{components}->{$comp}->{skip};
          my $count_by_components = $self->{components}->{$comp}->{total} + $self->{components}->{$comp}->{skip}; 
          $display_by_component .= $display_by_component_append . $self->{components}->{$comp}->{total} . '/' . $count_by_components . ' ' . $self->{components}->{$comp}->{name};
          $display_by_component_append = ', ';
      }
  
      $exit = $self->{output}->get_most_critical(status => $exits) if (scalar(@{$exits}) > 0);
      
      if ($self->{output}->is_status(value => $exit, compare => 'ok', litteral => 1)) {
          $self->{output}->output_add(short_msg => sprintf('All %s components are ok [%s].', 
                                                          $total_components,
                                                          $display_by_component)
                                      );
      }
  
      if (defined($self->{option_results}->{no_component}) && $total_components == 0) {
          $self->{output}->output_add(severity => $self->{no_components},
                                      short_msg => 'No components are checked.');
      }
  }
  
  sub run {
      my ($self, %options) = @_;
  
      $self->{loaded} = 0;  
      $self->call_object_callback(method_name => $self->{cb_hook1}, %options);
  
      $self->load_components(%options);
      if ($self->{loaded} == 0) {
          $self->{output}->add_option_msg(short_msg => "Wrong option. Cannot find component '" . $self->{option_results}->{component} . "'.");
          $self->{output}->option_exit();
      }
      
      $self->call_object_callback(method_name => $self->{cb_hook2}, %options);
      $self->exec_components(%options);
      $self->call_object_callback(method_name => $self->{cb_hook3}, %options);
      
      $self->display();
  
      $self->call_object_callback(method_name => $self->{cb_hook4}, %options);
      
      $self->{output}->display();
      $self->{output}->exit();
  }
  
  sub check_filter {
      my ($self, %options) = @_;
      
      # Old compatibility variable. We'll be deleted
      if (defined($self->{option_results}->{exclude})) {
          if (defined($options{instance})) {
              if ($self->{option_results}->{exclude} =~ /(^|\s|,)${options{section}}[^,]*#\Q$options{instance}\E#/) {
                  $self->{components}->{$options{section}}->{skip}++;
                  $self->{output}->output_add(long_msg => sprintf("skipping $options{section} section $options{instance} instance."));
                  return 1;
              }
          } elsif (defined($self->{option_results}->{exclude}) && $self->{option_results}->{exclude} =~ /(^|\s|,)$options{section}(\s|,|$)/) {
              $self->{output}->output_add(long_msg => sprintf("skipping $options{section} section."));
              return 1;
          }
      }
  
      $options{instance} .= '#' . $options{name} if (defined($self->{option_results}->{add_name_instance}) && defined($options{name}));   
      foreach (@{$self->{filter}}) {
          if ($options{section} =~ /$_->{filter}/) {
              if (!defined($options{instance}) && !defined($_->{instance})) {
                  $self->{output}->output_add(long_msg => sprintf("skipping $options{section} section."));
                  return 1;
              } elsif (defined($options{instance}) && $options{instance} =~ /$_->{instance}/) {
                  $self->{output}->output_add(long_msg => sprintf("skipping $options{section} section $options{instance} instance."));
                  return 1;
              }
          }
      }
      
      return 0;
  }
  
  sub absent_problem {
      my ($self, %options) = @_;
  
      $options{instance} .= '#' . $options{name} if (defined($self->{option_results}->{add_name_instance}) && defined($options{name}));
      foreach (@{$self->{absent_problem}}) {
          if ($options{section} =~ /$_->{filter}/) {
              if (!defined($_->{instance}) || $options{instance} =~ /$_->{instance}/) {
                  $self->{output}->output_add(severity => 'CRITICAL',
                                              short_msg => sprintf("Component '%s' instance '%s' is not present", 
                                                                   $options{section}, $options{instance}));
                  $self->{output}->output_add(long_msg => sprintf("Skipping $options{section} section $options{instance} instance (not present)"));
                  $self->{components}->{$options{section}}->{skip}++;
                  return 1;
              }
          }
      }
      
      return 0;
  }
  
  sub get_severity_count {
      my ($self, %options) = @_;
      my $status = 'OK'; # default
      my $thresholds = { warning => undef, critical => undef };
      
      $status = $self->{perfdata}->threshold_check(value => $options{value},
                                                   threshold => [ { label => 'critical-count-' . $options{label}, 'exit_litteral' => 'critical' }, 
                                                                  { label => 'warning-count-' . $options{label}, 'exit_litteral' => 'warning' } ]);
      $thresholds->{critical} = $self->{perfdata}->get_perfdata_for_output(label => 'critical-count-' . $options{label});
      $thresholds->{warning} = $self->{perfdata}->get_perfdata_for_output(label => 'warning-count-' . $options{label});
  
      return ($status, $thresholds->{warning}, $thresholds->{critical});
  }
  
  sub get_severity_numeric {
      my ($self, %options) = @_;
      my $status = 'OK'; # default
      my $thresholds = { warning => undef, critical => undef };
      my $checked = 0;
  
      $options{instance} .= '#' . $options{name} if (defined($self->{option_results}->{add_name_instance}) && defined($options{name}));
      if (defined($self->{numeric_threshold}->{$options{section}})) {
          my $exits = [];
          foreach (@{$self->{numeric_threshold}->{$options{section}}}) {
              if ($options{instance} =~ /$_->{instance}/) {
                  push @{$exits}, $self->{perfdata}->threshold_check(value => $options{value}, threshold => [ { label => $_->{label}, exit_litteral => $_->{threshold} } ]);
                  $thresholds->{$_->{threshold}} = $self->{perfdata}->get_perfdata_for_output(label => $_->{label});
                  $checked = 1;
              }
          }
          $status = $self->{output}->get_most_critical(status => $exits) if (scalar(@{$exits}) > 0);
      }
      
      return ($status, $thresholds->{warning}, $thresholds->{critical}, $checked);
  }
  
  sub get_severity {
      my ($self, %options) = @_;
      my $status = 'UNKNOWN'; # default 
      
      if (defined($self->{overload_th}->{$options{section}})) {
          foreach (@{$self->{overload_th}->{$options{section}}}) {            
              if ($options{value} =~ /$_->{filter}/i && 
                  (!defined($options{instance}) || $options{instance} =~ /$_->{instance}/)) {
                  $status = $_->{status};
                  return $status;
              }
          }
      }
      my $label = defined($options{label}) ? $options{label} : $options{section};
      foreach (@{$self->{thresholds}->{$label}}) {
          if ($options{value} =~ /$$_[0]/i) {
              $status = $$_[1];
              return $status;
          }
      }
      
      return $status;
  }
      
  1;
  
  
  =head1 MODE
  
  Default template for hardware. Should be extended.
  
  =over 8
  
  =item B<--component>
  
  Which component to check (Default: '.*').
  Can be: 'xxx', 'yyy'.
  
  =item B<--filter>
  
  Exclude some parts (comma seperated list) (Example: --filter=xxx --filter=yyyy)
  Can also exclude specific instance: --filter=xxxxx,instancevalue
  
  =item B<--absent-problem>
  
  Return an error if an entity is not 'present' (default is skipping) (comma seperated list)
  Can be specific or global: --absent-problem=xxxx,instancevalue
  
  =item B<--no-component>
  
  Return an error if no compenents are checked.
  If total (with skipped) is 0. (Default: 'critical' returns).
  
  =item B<--threshold-overload>
  
  Set to overload default threshold values (syntax: section,[instance,]status,regexp)
  It used before default thresholds (order stays).
  Example: --threshold-overload='xxxxx,CRITICAL,^(?!(normal)$)'
  
  =item B<--warning>
  
  Set warning threshold for temperatures (syntax: type,instance,threshold)
  Example: --warning='xxxxx,.*,30'
  
  =item B<--critical>
  
  Set critical threshold for temperatures (syntax: type,instance,threshold)
  Example: --critical='xxxxx,.*,40'
  
  =item B<--warning-count-xxxx>
  
  Set warning threshold for component count.
  
  =item B<--critical-count-xxxx>
  
  Set critical threshold for component count.
  
  =back
  
  =cut
CENTREON_PLUGINS_TEMPLATES_HARDWARE

$fatpacked{"centreon/plugins/values.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'CENTREON_PLUGINS_VALUES';
  #
  # Copyright 2019 Centreon (http://www.centreon.com/)
  #
  # Centreon is a full-fledged industry-strength solution that meets
  # the needs in IT infrastructure and application monitoring for
  # service performance.
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  #
  
  package centreon::plugins::values;
  
  use strict;
  use warnings;
  # Warning message with sprintf and too much arguments.
  # Really annoying. Need to disable that warning
  no if ($^V gt v5.22.0), 'warnings' => 'redundant';
  
  sub new {
      my ($class, %options) = @_;
      my $self  = {};
      bless $self, $class;
  
      $self->{statefile} = $options{statefile};
      $self->{output} = $options{output};
      $self->{perfdata} = $options{perfdata};
      $self->{label} = $options{label};
      $self->{nlabel} = $options{nlabel};
      $self->{thlabel} = defined($options{thlabel}) ? $options{thlabel} : $self->{label};
  
      $self->{perfdatas} = [];
      
      $self->{output_template} = $self->{label} . ' : %s';
      $self->{output_use} = undef;
      $self->{output_change_bytes} = 0;
      $self->{output_absolute_unit} = '';
      $self->{output_per_second_unit} = '';
      
      $self->{output_error_template} = $self->{label} . ' : %s';
      
      $self->{threshold_use} = undef;
      $self->{threshold_warn} = undef;
      $self->{threshold_crit} = undef;
  
      $self->{per_second} = 0;
      $self->{manual_keys} = 0;
      $self->{last_timestamp} = undef;
  
      $self->{result_values} = {};
      
      return $self;
  }
  
  sub init {
      my ($self, %options) = @_;
      my $warn = defined($self->{threshold_warn}) ? $self->{threshold_warn} : 'warning-' . $self->{thlabel};
      my $crit = defined($self->{threshold_crit}) ? $self->{threshold_crit} : 'critical-' . $self->{thlabel}; 
      
      if (($self->{perfdata}->threshold_validate(label => $warn, value => $options{option_results}->{$warn})) == 0) {
          $self->{output}->add_option_msg(short_msg => "Wrong $warn threshold '" . $options{option_results}->{$warn} . "'.");
          $self->{output}->option_exit();
      }
      if (($self->{perfdata}->threshold_validate(label => $crit, value => $options{option_results}->{$crit})) == 0) {
          $self->{output}->add_option_msg(short_msg => "Wrong $crit threshold '" . $options{option_results}->{$crit} . "'.");
          $self->{output}->option_exit();
      }
  }
  
  sub set {
      my ($self, %options) = @_;
  
      foreach (keys %options) {
          $self->{$_} = $options{$_};
      }
  }
  
  sub calc {
      my ($self, %options) = @_;
  
      # manage only one value ;)
      foreach my $value (@{$self->{key_values}}) {
          if (defined($value->{diff}) && $value->{diff} == 1) { 
              if (defined($self->{per_second}) && $self->{per_second} == 1) {
                  $self->{result_values}->{$value->{name} . '_per_second'} = ($options{new_datas}->{$self->{instance} . '_' . $value->{name}} - $options{old_datas}->{$self->{instance} . '_' . $value->{name}}) / $options{delta_time};
              }
              $self->{result_values}->{$value->{name} . '_absolute'} = $options{new_datas}->{$self->{instance} . '_' . $value->{name}} - $options{old_datas}->{$self->{instance} . '_' . $value->{name}};
          } else {
              # absolute one. nothing to do. Can be used for values.
              $self->{result_values}->{$value->{name} . '_absolute'} = $options{new_datas}->{$self->{instance} . '_' . $value->{name}};
          }
      }
  
      return 0;
  }
  
  sub threshold_check {
      my ($self, %options) = @_;
      
      if (defined($self->{closure_custom_threshold_check})) {
          return &{$self->{closure_custom_threshold_check}}($self, %options);
      }
      
      my $warn = defined($self->{threshold_warn}) ? $self->{threshold_warn} : 'warning-' . $self->{thlabel};
      my $crit = defined($self->{threshold_crit}) ? $self->{threshold_crit} : 'critical-' . $self->{thlabel};
      
      my $first = defined($self->{key_values}->[0]) ? $self->{key_values}->[0]->{name} : '';
      my $value;
  
      if (!defined($self->{threshold_use})) {
          $value = $self->{result_values}->{$first . '_absolute'};
          if (defined($self->{per_second}) && $self->{per_second} == 1) {
              $value = $self->{result_values}->{$first . '_per_second'};
          }
      } else {
          $value = $self->{result_values}->{$self->{threshold_use}};
      }
  
      return $self->{perfdata}->threshold_check(value => $value, threshold => [ { label => $crit, 'exit_litteral' => 'critical' },
                                                                                { label => $warn, 'exit_litteral' => 'warning' }]);
  }
  
  sub output_error {
      my ($self, %options) = @_;
      
      return sprintf($self->{output_error_template}, $self->{error_msg});
  }
  
  sub output {
      my ($self, %options) = @_;
       
      if (defined($self->{closure_custom_output})) {
          return $self->{closure_custom_output}->($self);
      }
      my $first = $self->{key_values}->[0]->{name};
      my ($value, $unit) = (defined($first) ? $self->{result_values}->{$first . '_absolute'} : '', $self->{output_absolute_unit});
      
      if (!defined($self->{output_use})) {
          if ($self->{per_second} == 1) {
              $value = $self->{result_values}->{$first . '_per_second'};
              $unit = $self->{output_per_second_unit};
          }
      } else {
          $value = $self->{result_values}->{$self->{output_use}};
      }
  
      if ($self->{output_change_bytes} == 1) {
          ($value, $unit) = $self->{perfdata}->change_bytes(value => $value);
      } elsif ($self->{output_change_bytes} == 2) {
          ($value, $unit) = $self->{perfdata}->change_bytes(value => $value, network => 1);
      }
      
      return sprintf($self->{output_template}, $value, $unit);
  }
  
  sub use_instances {
      my ($self, %options) = @_;
  
      if (!defined($options{extra_instance}) || $options{extra_instance} != 0 || $self->{output}->use_new_perfdata()) {
          return 1;
      }
      
      return 0;
  }
  
  sub perfdata {
      my ($self, %options) = @_;
      
      if (defined($self->{closure_custom_perfdata})) {
          return &{$self->{closure_custom_perfdata}}($self, %options);
      }
      
      my $warn = defined($self->{threshold_warn}) ? $self->{threshold_warn} : 'warning-' . $self->{thlabel};
      my $crit = defined($self->{threshold_crit}) ? $self->{threshold_crit} : 'critical-' . $self->{thlabel}; 
      
      foreach my $perf (@{$self->{perfdatas}}) {
          my ($label, $extra_label, $min, $max, $th_total) = ($self->{label}, '');
          my $cast_int = (defined($perf->{cast_int}) && $perf->{cast_int} == 1) ? 1 : 0;
          my $template = '%s';
          
          $template = $perf->{template} if (defined($perf->{template}));
          $label = $perf->{label} if (defined($perf->{label}));
          if (defined($perf->{min})) {
              $min = ($perf->{min} =~ /[^0-9]/) ? $self->{result_values}->{$perf->{min}} : $perf->{min};
          }
          if (defined($perf->{max})) {
              $max = ($perf->{max} =~ /[^0-9]/) ? $self->{result_values}->{$perf->{max}} : $perf->{max};
          }
          if (defined($perf->{threshold_total})) {
              $th_total = ($perf->{threshold_total} =~ /[^0-9]/) ? $self->{result_values}->{$perf->{threshold_total}} : $perf->{threshold_total};
          }
          
          my $instances;
          if (defined($perf->{label_extra_instance}) && $perf->{label_extra_instance} == 1) {
              my $instance = '';
              if (defined($perf->{instance_use})) {
                  $instance = $self->{result_values}->{$perf->{instance_use}};
              } else {
                  $instance = $self->{instance};
              }
              
              if (!defined($options{extra_instance}) || $options{extra_instance} != 0 || $self->{output}->use_new_perfdata()) {
                  $instances = $instance;
              }
          }
  
          $self->{output}->perfdata_add(
              label => $label,
              instances => $instances,
              nlabel => $self->{nlabel},
              unit => $perf->{unit},
              value => $cast_int == 1 ? int($self->{result_values}->{$perf->{value}}) : sprintf($template, $self->{result_values}->{$perf->{value}}),
              warning => $self->{perfdata}->get_perfdata_for_output(label => $warn, total => $th_total, cast_int => $cast_int),
              critical => $self->{perfdata}->get_perfdata_for_output(label => $crit, total => $th_total, cast_int => $cast_int),
              min => $min, max => $max
          );
      }
  }
  
  sub execute {
      my ($self, %options) = @_;
      my $old_datas = {};
  
      $self->{result_values} = {},
      $self->{error_msg} = undef;
      my $quit = 0;
      my $per_second = 0;
      
      $options{new_datas} = {} if (!defined($options{new_datas}));
      foreach my $value (@{$self->{key_values}}) {
          if (!defined($options{values}->{$value->{name}}) || 
              defined($value->{no_value}) && $options{values}->{$value->{name}} eq $value->{no_value}) {
              $quit = 2;
              last;
          }
      
          if (defined($value->{diff}) && $value->{diff} == 1) {            
              $options{new_datas}->{$self->{instance} . '_' . $value->{name}} = $options{values}->{$value->{name}};
              $old_datas->{$self->{instance} . '_' . $value->{name}} = $self->{statefile}->get(name => $self->{instance} . '_' . $value->{name});
              if (!defined($old_datas->{$self->{instance} . '_' . $value->{name}})) {
                  $quit = 1;
                  next;
              }
              if ($old_datas->{$self->{instance} . '_' . $value->{name}} > $options{new_datas}->{$self->{instance} . '_' . $value->{name}}) {
                  $old_datas->{$self->{instance} . '_' . $value->{name}} = 0;
              }
          } else {
              $options{new_datas}->{$self->{instance} . '_' . $value->{name}} = $options{values}->{$value->{name}};
              if (defined($self->{statefile})) {
                  $old_datas->{$self->{instance} . '_' . $value->{name}} = $self->{statefile}->get(name => $self->{instance} . '_' . $value->{name});
              }
          }
      }
      
      # Very manual
      if ($self->{manual_keys} == 1) {
          foreach my $name (keys %{$options{values}}) {
              $options{new_datas}->{$self->{instance} . '_' . $name} = $options{values}->{$name};
              if (defined($self->{statefile})) {
                  $old_datas->{$self->{instance} . '_' . $name} = $self->{statefile}->get(name => $self->{instance} . '_' . $name);
              }
          }
      }
  
      if ($quit == 2) {
          $self->{error_msg} = "skipped (no value(s))";
          return -10;
      }
      
      if ($quit == 1) {
          $self->{error_msg} = "Buffer creation";
          return -1;
      }
      
      if (defined($self->{per_second}) && $self->{per_second} == 1) {
          if (!defined($self->{last_timestamp})) {
              $self->{last_timestamp} = $self->{statefile}->get(name => 'last_timestamp');
          }
          if (!defined($self->{last_timestamp})) {
              $self->{error_msg} = "Buffer creation";
              return -1;
          }
      }
     
      my $delta_time;
      if (defined($self->{per_second}) && $self->{per_second} == 1) {
          $delta_time = $options{new_datas}->{last_timestamp} - $self->{last_timestamp};
          if ($delta_time <= 0) {
              $delta_time = 1;
          }
      }
  
      if (defined($self->{closure_custom_calc})) {
          return $self->{closure_custom_calc}->($self, old_datas => $old_datas, new_datas => $options{new_datas}, delta_time => $delta_time, extra_options => $self->{closure_custom_calc_extra_options});
      }
      return $self->calc(old_datas => $old_datas, new_datas => $options{new_datas}, delta_time => $delta_time);
  }
  
  1;
  
  
CENTREON_PLUGINS_VALUES

$fatpacked{"cloud/azure/custom/api.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'CLOUD_AZURE_CUSTOM_API';
  #
  # Copyright 2019 Centreon (http://www.centreon.com/)
  #
  # Centreon is a full-fledged industry-strength solution that meets
  # the needs in IT infrastructure and application monitoring for
  # service performance.
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  #
  
  package cloud::azure::custom::api;
  
  use strict;
  use warnings;
  use DateTime;
  use centreon::plugins::http;
  use centreon::plugins::statefile;
  use JSON::XS;
  use URI::Encode;
  use Digest::MD5 qw(md5_hex);
  
  sub new {
      my ($class, %options) = @_;
      my $self  = {};
      bless $self, $class;
  
      if (!defined($options{output})) {
          print "Class Custom: Need to specify 'output' argument.\n";
          exit 3;
      }
      if (!defined($options{options})) {
          $options{output}->add_option_msg(short_msg => "Class Custom: Need to specify 'options' argument.");
          $options{output}->option_exit();
      }
      
      if (!defined($options{noptions})) {
          $options{options}->add_options(arguments => {
              "subscription:s"            => { name => 'subscription' },
              "tenant:s"                  => { name => 'tenant' },
              "client-id:s"               => { name => 'client_id' },
              "client-secret:s"           => { name => 'client_secret' },
              "login-endpoint:s"          => { name => 'login_endpoint' },
              "management-endpoint:s"     => { name => 'management_endpoint' },
              "timeframe:s"               => { name => 'timeframe' },
              "interval:s"                => { name => 'interval' },
              "aggregation:s@"            => { name => 'aggregation' },
              "zeroed"                    => { name => 'zeroed' },
              "timeout:s"                 => { name => 'timeout' },
          });
      }
      $options{options}->add_help(package => __PACKAGE__, sections => 'REST API OPTIONS', once => 1);
  
      $self->{output} = $options{output};
      $self->{mode} = $options{mode};
      $self->{http} = centreon::plugins::http->new(%options);
      $self->{cache} = centreon::plugins::statefile->new(%options);
      
      return $self;
  }
  
  sub set_options {
      my ($self, %options) = @_;
  
      $self->{option_results} = $options{option_results};
  }
  
  sub set_defaults {
      my ($self, %options) = @_;
  
      foreach (keys %{$options{default}}) {
          if ($_ eq $self->{mode}) {
              for (my $i = 0; $i < scalar(@{$options{default}->{$_}}); $i++) {
                  foreach my $opt (keys %{$options{default}->{$_}[$i]}) {
                      if (!defined($self->{option_results}->{$opt}[$i])) {
                          $self->{option_results}->{$opt}[$i] = $options{default}->{$_}[$i]->{$opt};
                      }
                  }
              }
          }
      }
  }
  
  sub check_options {
      my ($self, %options) = @_;
  
      if (defined($self->{option_results}->{aggregation})) {
          foreach my $aggregation (@{$self->{option_results}->{aggregation}}) {
              if ($aggregation !~ /average|maximum|minimum|total/i) {
                  $self->{output}->add_option_msg(short_msg => "Aggregation '" . $aggregation . "' is not handled");
                  $self->{output}->option_exit();
              }
          }
      }
  
      $self->{timeout} = (defined($self->{option_results}->{timeout})) ? $self->{option_results}->{timeout} : 10;
      $self->{timeframe} = (defined($self->{option_results}->{timeframe})) ? $self->{option_results}->{timeframe} : undef;
      $self->{step} = (defined($self->{option_results}->{step})) ? $self->{option_results}->{step} : undef;
      $self->{subscription} = (defined($self->{option_results}->{subscription})) ? $self->{option_results}->{subscription} : undef;
      $self->{tenant} = (defined($self->{option_results}->{tenant})) ? $self->{option_results}->{tenant} : undef;
      $self->{client_id} = (defined($self->{option_results}->{client_id})) ? $self->{option_results}->{client_id} : undef;
      $self->{client_secret} = (defined($self->{option_results}->{client_secret})) ? $self->{option_results}->{client_secret} : undef;
      $self->{login_endpoint} = (defined($self->{option_results}->{login_endpoint})) ? $self->{option_results}->{login_endpoint} : 'https://login.microsoftonline.com';
      $self->{management_endpoint} = (defined($self->{option_results}->{management_endpoint})) ? $self->{option_results}->{management_endpoint} : 'https://management.azure.com';
      $self->{api_version} = (defined($self->{option_results}->{api_version})) ? $self->{option_results}->{api_version} : undef;
  
      if (!defined($self->{subscription}) || $self->{subscription} eq '') {
          $self->{output}->add_option_msg(short_msg => "Need to specify --subscription option.");
          $self->{output}->option_exit();
      }
      if (!defined($self->{tenant}) || $self->{tenant} eq '') {
          $self->{output}->add_option_msg(short_msg => "Need to specify --tenant option.");
          $self->{output}->option_exit();
      }
      if (!defined($self->{client_id}) || $self->{client_id} eq '') {
          $self->{output}->add_option_msg(short_msg => "Need to specify --client-id option.");
          $self->{output}->option_exit();
      }
      if (!defined($self->{client_secret}) || $self->{client_secret} eq '') {
          $self->{output}->add_option_msg(short_msg => "Need to specify --client-secret option.");
          $self->{output}->option_exit();
      }
      if (!defined($self->{api_version}) || $self->{api_version} eq '') {
          $self->{output}->add_option_msg(short_msg => "Need to specify --api-version option.");
          $self->{output}->option_exit();
      }
  
      $self->{cache}->check_options(option_results => $self->{option_results});
  
      return 0;
  }
  
  sub build_options_for_httplib {
      my ($self, %options) = @_;
  
      $self->{option_results}->{timeout} = $self->{timeout};
      $self->{option_results}->{warning_status} = '';
      $self->{option_results}->{critical_status} = '';
      $self->{option_results}->{unknown_status} = '%{http_code} < 200 or %{http_code} >= 500';
  }
  
  sub settings {
      my ($self, %options) = @_;
  
      $self->build_options_for_httplib();
      $self->{http}->add_header(key => 'Accept', value => 'application/json');
      $self->{http}->add_header(key => 'Content-Type', value => 'application/x-www-form-urlencoded');
      if (defined($self->{access_token})) {
          $self->{http}->add_header(key => 'Authorization', value => 'Bearer ' . $self->{access_token});
      }
      $self->{http}->set_options(%{$self->{option_results}});
  }
  
  sub get_access_token {
      my ($self, %options) = @_;
  
      my $has_cache_file = $options{statefile}->read(statefile => 'azure_api_' . md5_hex($self->{subscription}) . '_' . md5_hex($self->{tenant}) . '_' . md5_hex($self->{client_id}));
      my $expires_on = $options{statefile}->get(name => 'expires_on');
      my $access_token = $options{statefile}->get(name => 'access_token');
  
      if ($has_cache_file == 0 || !defined($access_token) || (($expires_on - time()) < 10)) {
          my $uri = URI::Encode->new({encode_reserved => 1});
          my $encoded_management_endpoint = $uri->encode($self->{management_endpoint});
          my $post_data = 'grant_type=client_credentials' . 
              '&client_id=' . $self->{client_id} .
              '&client_secret=' . $self->{client_secret} .
              '&resource=' . $encoded_management_endpoint;
          
          $self->settings();
  
          my $content = $self->{http}->request(method => 'POST', query_form_post => $post_data,
                                               full_url => $self->{login_endpoint} . '/' . $self->{tenant} . '/oauth2/token',
                                               hostname => '');
  
          if (!defined($content) || $content eq '' || $self->{http}->get_header(name => 'content-length') == 0) {
              $self->{output}->add_option_msg(short_msg => "Login endpoint API returns empty content [code: '" . $self->{http}->get_code() . "'] [message: '" . $self->{http}->get_message() . "']");
              $self->{output}->option_exit();
          }
  
          my $decoded;
          eval {
              $decoded = JSON::XS->new->utf8->decode($content);
          };
          if ($@) {
              $self->{output}->output_add(long_msg => $content, debug => 1);
              $self->{output}->add_option_msg(short_msg => "Cannot decode response (add --debug option to display returned content)");
              $self->{output}->option_exit();
          }
          if (defined($decoded->{error})) {
              $self->{output}->output_add(long_msg => "Error message : " . $decoded->{error_description}, debug => 1);
              $self->{output}->add_option_msg(short_msg => "Login endpoint API returns error code '" . $decoded->{error} . "' (add --debug option for detailed message)");
              $self->{output}->option_exit();
          }
  
          $access_token = $decoded->{access_token};
          my $datas = { last_timestamp => time(), access_token => $decoded->{access_token}, expires_on => $decoded->{expires_on} };
          $options{statefile}->write(data => $datas);
      }
      
      return $access_token;
  }
  
  sub request_api {
      my ($self, %options) = @_;
  
      if (!defined($self->{access_token})) {
          $self->{access_token} = $self->get_access_token(statefile => $self->{cache});
      }
  
      $self->settings();
  
      $self->{output}->output_add(long_msg => "URL: '" . $options{full_url} . "'", debug => 1);
  
      my $content = $self->{http}->request(%options);
      
      if (!defined($content) || $content eq '' || $self->{http}->get_header(name => 'content-length') == 0) {
          $self->{output}->add_option_msg(short_msg => "Management endpoint API returns empty content [code: '" . $self->{http}->get_code() . "'] [message: '" . $self->{http}->get_message() . "']");
          $self->{output}->option_exit();
      }
      
      my $decoded;
      eval {
          $decoded = JSON::XS->new->utf8->decode($content);
      };
      if ($@) {
          $self->{output}->output_add(long_msg => $content, debug => 1);
          $self->{output}->add_option_msg(short_msg => "Cannot decode response (add --debug option to display returned content)");
          $self->{output}->option_exit();
      }
      if (defined($decoded->{error})) {
          $self->{output}->output_add(long_msg => "Error message : " . $decoded->{error}->{message}, debug => 1);
          $self->{output}->add_option_msg(short_msg => "Management endpoint API returns error code '" . $decoded->{error}->{code} . "' (add --debug option for detailed message)");
          $self->{output}->option_exit();
      }
      if (defined($decoded->{code})) {
          $self->{output}->output_add(long_msg => "Message : " . $decoded->{message}, debug => 1);
          $self->{output}->add_option_msg(short_msg => "Management endpoint API returns code '" . $decoded->{code} . "' (add --debug option for detailed message)");
          $self->{output}->option_exit();
      }
  
      return $decoded;
  }
  
  sub convert_duration {
      my ($self, %options) = @_;
  
      my $duration;
      if ($options{time_string} =~ /^P.*S$/) {
          centreon::plugins::misc::mymodule_load(output => $self->{output}, module => 'DateTime::Format::Duration::ISO8601',
                                                 error_msg => "Cannot load module 'DateTime::Format::Duration::ISO8601'.");
  
          my $format = DateTime::Format::Duration::ISO8601->new;
          my $d = $format->parse_duration($options{time_string});
          $duration = $d->minutes * 60 + $d->seconds;
      } elsif ($options{time_string} =~ /^(\d+):(\d+):(\d+)\.\d+$/) {
          centreon::plugins::misc::mymodule_load(output => $self->{output}, module => 'DateTime::Duration',
                                                 error_msg => "Cannot load module 'DateTime::Format::Duration'.");
  
          my $d = DateTime::Duration->new(hours => $1, minutes => $2, seconds => $3);
          $duration = $d->minutes * 60 + $d->seconds;
      }
  
      return $duration; 
  }
  
  sub azure_get_metrics_set_url {
      my ($self, %options) = @_;
  
      my $uri = URI::Encode->new({encode_reserved => 1});
      my $encoded_metrics = $uri->encode(join(',', @{$options{metrics}}));
      my $encoded_aggregations = $uri->encode(join(',', @{$options{aggregations}}));
      my $encoded_timespan = $uri->encode($options{start_time} . '/' . $options{end_time});
  
      my $url = $self->{management_endpoint} . "/subscriptions/" . $self->{subscription} . "/resourceGroups/" . $options{resource_group} .
          "/providers/" . $options{resource_namespace} . "/" . $options{resource_type} . "/" . $options{resource} . '/providers/microsoft.insights/metrics' .
          "?api-version=" . $self->{api_version} . "&metricnames=" . $encoded_metrics . "&aggregation=" . $encoded_aggregations . "&timespan=" . $encoded_timespan;
  
      return $url; 
  }
  
  sub azure_get_metrics {
      my ($self, %options) = @_;
      
      my $results = {};
      my $start_time = DateTime->now->subtract(seconds => $options{timeframe})->iso8601.'Z';
      my $end_time = DateTime->now->iso8601.'Z';
  
      my $full_url = $self->azure_get_metrics_set_url(%options, start_time => $start_time, end_time => $end_time);
      my $response = $self->request_api(method => 'GET', full_url => $full_url, hostname => '');
  
      foreach my $metric (@{$response->{value}}) {
          my $metric_name = lc($metric->{name}->{value});
          $metric_name =~ s/ /_/g;
  
          $results->{$metric_name} = { points => 0, name => $metric->{name}->{localizedValue} };
          foreach my $timeserie (@{$metric->{timeseries}}) {
              foreach my $point (@{$timeserie->{data}}) {
                  if (defined($point->{average})) {
                      $results->{$metric_name}->{average} = 0 if (!defined($results->{$metric_name}->{average}));
                      $results->{$metric_name}->{average} += $point->{average};
                      $results->{$metric_name}->{points}++;
                  }
                  if (defined($point->{minimum})) {
                      $results->{$metric_name}->{minimum} = $point->{minimum}
                          if (!defined($results->{$metric_name}->{minimum}) || $point->{minimum} < $results->{$metric_name}->{minimum});
                  }
                  if (defined($point->{maximum})) {
                      $results->{$metric_name}->{maximum} = $point->{maximum}
                          if (!defined($results->{$metric_name}->{maximum}) || $point->{maximum} > $results->{$metric_name}->{maximum});
                  }
                  if (defined($point->{total})) {
                      $results->{$metric_name}->{total} = 0 if (!defined($results->{$metric_name}->{total}));
                      $results->{$metric_name}->{total} += $point->{total};
                      $results->{$metric_name}->{points}++;
                  }
              }
          }
          
          if (defined($results->{$metric_name}->{average})) {
              $results->{$metric_name}->{average} /= $results->{$metric_name}->{points};
          }
      }
      
      return $results, $response;
  }
  
  sub azure_list_resources_set_url {
      my ($self, %options) = @_;
      
      my $filter = '';
      my %filter;
      $filter{resource_type} = "resourceType eq '" . $options{namespace} . '/' . $options{resource_type} . "'" if (defined($options{namespace}) && $options{namespace} ne '' && defined($options{resource_type}) && $options{resource_type} ne '');
      $filter{resource_group} = "resourceGroup eq '" . $options{resource_group} . "'" if (defined($options{resource_group}) && $options{resource_group} ne '');
      $filter{location} = "location eq '" . $options{location} . "'" if (defined($options{location}) && $options{location} ne '');
  
      my $append = '';
      foreach (('resource_type', 'resource_group', 'location')) {
          next if (!defined($filter{$_}));
          $filter .= $append . $filter{$_};
          $append = ' and ';
      }
  
      my $uri = URI::Encode->new({encode_reserved => 1});
      my $encoded_filter = $uri->encode($filter);
      
      my $url = $self->{management_endpoint} . "/subscriptions/" . $self->{subscription} . "/resources?api-version=" . $self->{api_version};
      $url .= "&\$filter=" . $encoded_filter if (defined($encoded_filter) && $encoded_filter ne '');
      
      return $url; 
  }
  
  sub azure_list_resources {
      my ($self, %options) = @_;
          
      my $full_url = $self->azure_list_resources_set_url(%options);
      my $response = $self->request_api(method => 'GET', full_url => $full_url, hostname => '');
      
      return $response->{value};
  }
  
  sub azure_list_vms_set_url {
      my ($self, %options) = @_;
  
      my $url = $self->{management_endpoint} . "/subscriptions/" . $self->{subscription};
      $url .= "/resourceGroups/" . $options{resource_group} if (defined($options{resource_group}) && $options{resource_group} ne '');
      $url .= "/providers/Microsoft.Compute/virtualMachines?api-version=" . $self->{api_version};
          
      return $url; 
  }
  
  sub azure_list_vms {
      my ($self, %options) = @_;
      
      my $full_url = $self->azure_list_vms_set_url(%options);
      my $response = $self->request_api(method => 'GET', full_url => $full_url, hostname => '');
      
      return $response->{value};
  }
  
  sub azure_list_groups_set_url {
      my ($self, %options) = @_;
  
      my $url = $self->{management_endpoint} . "/subscriptions/" . $self->{subscription} . "/resourcegroups?api-version=" . $self->{api_version};
              
      return $url; 
  }
  
  sub azure_list_groups {
      my ($self, %options) = @_;
      
      my $full_url = $self->azure_list_groups_set_url(%options);
      my $response = $self->request_api(method => 'GET', full_url => $full_url, hostname => '');
      
      return $response->{value};
  }
  
  sub azure_list_deployments_set_url {
      my ($self, %options) = @_;
  
      my $url = $self->{management_endpoint} . "/subscriptions/" . $self->{subscription} . "/resourcegroups/" .
          $options{resource_group} . "/providers/Microsoft.Resources/deployments?api-version=" . $self->{api_version};
      
      return $url; 
  }
  
  sub azure_list_deployments {
      my ($self, %options) = @_;
      
      my $full_url = $self->azure_list_deployments_set_url(%options);
      my $response = $self->request_api(method => 'GET', full_url => $full_url, hostname => '');
      
      return $response->{value};
  }
  
  sub azure_list_vaults_set_url {
      my ($self, %options) = @_;
  
      my $url = $self->{management_endpoint} . "/subscriptions/" . $self->{subscription};
      $url .= "/resourceGroups/" . $options{resource_group} if (defined($options{resource_group}) && $options{resource_group} ne '');
      $url .= "/providers/Microsoft.RecoveryServices/vaults?api-version=" . $self->{api_version};
      
      return $url; 
  }
  
  sub azure_list_vaults {
      my ($self, %options) = @_;
      
      my $full_url = $self->azure_list_vaults_set_url(%options);
      my $response = $self->request_api(method => 'GET', full_url => $full_url, hostname => '');
      
      return $response->{value};
  }
  
  sub azure_list_backup_jobs_set_url {
      my ($self, %options) = @_;
  
      my $url = $self->{management_endpoint} . "/subscriptions/" . $self->{subscription} . "/resourcegroups/" .
          $options{resource_group} . "/providers/Microsoft.RecoveryServices/vaults/" .
          $options{vault_name} . "/backupJobs?api-version=" . $self->{api_version};
      
      return $url; 
  }
  
  sub azure_list_backup_jobs {
      my ($self, %options) = @_;
      
      my $full_url = $self->azure_list_backup_jobs_set_url(%options);
      my $response = $self->request_api(method => 'GET', full_url => $full_url, hostname => '');
      
      return $response->{value};
  }
  
  sub azure_list_backup_items_set_url {
      my ($self, %options) = @_;
  
      my $url = $self->{management_endpoint} . "/subscriptions/" . $self->{subscription} . "/resourcegroups/" .
          $options{resource_group} . "/providers/Microsoft.RecoveryServices/vaults/" .
          $options{vault_name} . "/backupProtectedItems?api-version=" . $self->{api_version};
      
      return $url; 
  }
  
  sub azure_list_backup_items {
      my ($self, %options) = @_;
      
      my $full_url = $self->azure_list_backup_items_set_url(%options);
      my $response = $self->request_api(method => 'GET', full_url => $full_url, hostname => '');
      
      return $response->{value};
  }
  
  sub azure_list_expressroute_circuits_set_url {
      my ($self, %options) = @_;
  
      my $url = $self->{management_endpoint} . "/subscriptions/" . $self->{subscription};
      $url .= "/resourceGroups/" . $options{resource_group} if (defined($options{resource_group}) && $options{resource_group} ne '');
      $url .= "/providers/Microsoft.Network/expressRouteCircuits?api-version=" . $self->{api_version};
      
      return $url; 
  }
  
  sub azure_list_expressroute_circuits {
      my ($self, %options) = @_;
      
      my $full_url = $self->azure_list_expressroute_circuits_set_url(%options);
      my $response = $self->request_api(method => 'GET', full_url => $full_url, hostname => '');
      
      return $response->{value};
  }
  
  sub azure_list_vpn_gateways_set_url {
      my ($self, %options) = @_;
  
      my $url = $self->{management_endpoint} . "/subscriptions/" . $self->{subscription} . "/resourcegroups/" .
          $options{resource_group} . "/providers/Microsoft.Network/virtualNetworkGateways?api-version=" . $self->{api_version};
      
      return $url; 
  }
  
  sub azure_list_vpn_gateways {
      my ($self, %options) = @_;
      
      my $full_url = $self->azure_list_vpn_gateways_set_url(%options);
      my $response = $self->request_api(method => 'GET', full_url => $full_url, hostname => '');
      
      return $response->{value};
  }
  
  sub azure_list_virtualnetworks_set_url {
      my ($self, %options) = @_;
  
      my $url = $self->{management_endpoint} . "/subscriptions/" . $self->{subscription};
      $url .= "/resourceGroups/" . $options{resource_group} if (defined($options{resource_group}) && $options{resource_group} ne '');
      $url .= "/providers/Microsoft.Network/virtualNetworks?api-version=" . $self->{api_version};
      
      return $url; 
  }
  
  sub azure_list_virtualnetworks {
      my ($self, %options) = @_;
      
      my $full_url = $self->azure_list_virtualnetworks_set_url(%options);
      my $response = $self->request_api(method => 'GET', full_url => $full_url, hostname => '');
      
      return $response->{value};
  }
  
  sub azure_list_vnet_peerings_set_url {
      my ($self, %options) = @_;
  
      my $url = $self->{management_endpoint} . "/subscriptions/" . $self->{subscription};
      $url .= "/resourceGroups/" . $options{resource_group} if (defined($options{resource_group}) && $options{resource_group} ne '');
      $url .= "/providers/Microsoft.Network/virtualNetworks/" . $options{vnet_name} if (defined($options{vnet_name}) && $options{vnet_name} ne '');
      $url .= "/virtualNetworkPeerings?api-version=" . $self->{api_version};
      
      return $url; 
  }
  
  sub azure_list_vnet_peerings {
      my ($self, %options) = @_;
      
      my $full_url = $self->azure_list_vnet_peerings_set_url(%options);
      my $response = $self->request_api(method => 'GET', full_url => $full_url, hostname => '');
      
      return $response->{value};
  }
  
  sub azure_list_sqlservers_set_url {
      my ($self, %options) = @_;
  
      my $url = $self->{management_endpoint} . "/subscriptions/" . $self->{subscription};
      $url .= "/resourceGroups/" . $options{resource_group} if (defined($options{resource_group}) && $options{resource_group} ne '');
      $url .= "/providers/Microsoft.Sql/servers?api-version=" . $self->{api_version};
      
      return $url; 
  }
  
  sub azure_list_sqlservers {
      my ($self, %options) = @_;
      
      my $full_url = $self->azure_list_sqlservers_set_url(%options);
      my $response = $self->request_api(method => 'GET', full_url => $full_url, hostname => '');
      
      return $response->{value};
  }
  
  sub azure_list_sqldatabases_set_url {
      my ($self, %options) = @_;
  
      my $url = $self->{management_endpoint} . "/subscriptions/" . $self->{subscription};
      $url .= "/resourceGroups/" . $options{resource_group} if (defined($options{resource_group}) && $options{resource_group} ne '');
      $url .= "/providers/Microsoft.Sql/servers/" . $options{server} if (defined($options{server}) && $options{server} ne '');
      $url .= "/databases?api-version=" . $self->{api_version};
      
      return $url; 
  }
  
  sub azure_list_sqldatabases {
      my ($self, %options) = @_;
      
      my $full_url = $self->azure_list_sqldatabases_set_url(%options);
      my $response = $self->request_api(method => 'GET', full_url => $full_url, hostname => '');
      
      return $response->{value};
  }
  
  1;
  
  
  =head1 NAME
  
  Microsoft Azure Rest API
  
  =head1 REST API OPTIONS
  
  Microsoft Azure Rest API
  
  To connect to the Azure Rest API, you must register an application.
  
  Follow the 'How-to guide' in https://docs.microsoft.com/en-us/azure/active-directory/develop/howto-create-service-principal-portal
  
  The application needs the 'Monitoring Reader' role (See https://docs.microsoft.com/en-us/azure/azure-monitor/platform/roles-permissions-security#monitoring-reader).
  
  This custom mode is using the 'OAuth 2.0 Client Credentials Grant Flow'
  
  For futher informations, visit https://docs.microsoft.com/en-us/azure/active-directory/develop/v1-oauth2-client-creds-grant-flow
  
  =over 8
  
  =item B<--subscription>
  
  Set Azure subscription ID.
  
  =item B<--tenant>
  
  Set Azure tenant ID.
  
  =item B<--client-id>
  
  Set Azure client ID.
  
  =item B<--client-secret>
  
  Set Azure client secret.
  
  =item B<--login-endpoint>
  
  Set Azure login endpoint URL (Default: 'https://login.microsoftonline.com')
  
  =item B<--management-endpoint>
  
  Set Azure management endpoint URL (Default: 'https://management.azure.com')
  
  =item B<--timeframe>
  
  Set timeframe in seconds (i.e. 3600 to check last hour).
  
  =item B<--interval>
  
  Set interval of the metric query (Can be : PT1M, PT5M, PT15M, PT30M, PT1H, PT6H, PT12H, PT24H).
  
  =item B<--aggregation>
  
  Set monitor aggregation (Can be multiple, Can be: 'minimum', 'maximum', 'average', 'total').
  
  =item B<--zeroed>
  
  Set metrics value to 0 if none. Usefull when Monitor
  does not return value when not defined.
  
  =item B<--timeout>
  
  Set timeout in seconds (Default: 10).
  
  =back
  
  =head1 DESCRIPTION
  
  B<custom>.
  
  =cut
CLOUD_AZURE_CUSTOM_API

$fatpacked{"cloud/azure/custom/azcli.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'CLOUD_AZURE_CUSTOM_AZCLI';
  #
  # Copyright 2019 Centreon (http://www.centreon.com/)
  #
  # Centreon is a full-fledged industry-strength solution that meets
  # the needs in IT infrastructure and application monitoring for
  # service performance.
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  #
  
  package cloud::azure::custom::azcli;
  
  use strict;
  use warnings;
  use DateTime;
  use JSON::XS;
  
  sub new {
      my ($class, %options) = @_;
      my $self  = {};
      bless $self, $class;
  
      if (!defined($options{output})) {
          print "Class Custom: Need to specify 'output' argument.\n";
          exit 3;
      }
      if (!defined($options{options})) {
          $options{output}->add_option_msg(short_msg => "Class Custom: Need to specify 'options' argument.");
          $options{output}->option_exit();
      }
      
      if (!defined($options{noptions})) {
          $options{options}->add_options(arguments => {
              "subscription:s"      => { name => 'subscription' },
              "tenant:s"            => { name => 'tenant' },
              "client-id:s"         => { name => 'client_id' },
              "client-secret:s"     => { name => 'client_secret' },
              "timeframe:s"         => { name => 'timeframe' },
              "interval:s"          => { name => 'interval' },
              "aggregation:s@"      => { name => 'aggregation' },
              "zeroed"              => { name => 'zeroed' },
              "timeout:s"           => { name => 'timeout', default => 50 },
              "sudo"                => { name => 'sudo' },
              "command:s"           => { name => 'command', default => 'az' },
              "command-path:s"      => { name => 'command_path' },
              "command-options:s"   => { name => 'command_options', default => '' },
              "proxyurl:s"          => { name => 'proxyurl' },
          });
      }
      $options{options}->add_help(package => __PACKAGE__, sections => 'AZCLI OPTIONS', once => 1);
  
      $self->{output} = $options{output};
      $self->{mode} = $options{mode};
      
      return $self;
  }
  
  sub set_options {
      my ($self, %options) = @_;
  
      $self->{option_results} = $options{option_results};
  }
  
  sub set_defaults {
      my ($self, %options) = @_;
  
      foreach (keys %{$options{default}}) {
          if ($_ eq $self->{mode}) {
              for (my $i = 0; $i < scalar(@{$options{default}->{$_}}); $i++) {
                  foreach my $opt (keys %{$options{default}->{$_}[$i]}) {
                      if (!defined($self->{option_results}->{$opt}[$i])) {
                          $self->{option_results}->{$opt}[$i] = $options{default}->{$_}[$i]->{$opt};
                      }
                  }
              }
          }
      }
  }
  
  sub check_options {
      my ($self, %options) = @_;
  
      if (defined($self->{option_results}->{proxyurl}) && $self->{option_results}->{proxyurl} ne '') {
          $ENV{HTTP_PROXY} = $self->{option_results}->{proxyurl};
          $ENV{HTTPS_PROXY} = $self->{option_results}->{proxyurl};
      }
  
      if (defined($self->{option_results}->{aggregation})) {
          foreach my $aggregation (@{$self->{option_results}->{aggregation}}) {
              if ($aggregation !~ /average|maximum|minimum|total/i) {
                  $self->{output}->add_option_msg(short_msg => "Aggregation '" . $aggregation . "' is not handled");
                  $self->{output}->option_exit();
              }
          }
      }
  
      $self->{subscription} = (defined($self->{option_results}->{subscription})) ? $self->{option_results}->{subscription} : undef;
  
      return 0;
  }
  
  sub execute {
      my ($self, %options) = @_;
  
      $self->{output}->output_add(long_msg => "Command line: '" . $self->{option_results}->{command} . " " . $options{cmd_options} . "'", debug => 1);
      
      my ($response) = centreon::plugins::misc::execute(
          output => $self->{output},
          options => $self->{option_results},
          sudo => $self->{option_results}->{sudo},
          command => $self->{option_results}->{command},
          command_path => $self->{option_results}->{command_path},
          command_options => $options{cmd_options});
  
      my $raw_results;
  
      eval {
          $raw_results = JSON::XS->new->utf8->decode($response);
      };
      if ($@) {
          $self->{output}->output_add(long_msg => $response, debug => 1);
          $self->{output}->add_option_msg(short_msg => "Cannot decode response (add --debug option to display returned content)");
          $self->{output}->option_exit();
      }
  
      return $raw_results; 
  }
  
  sub convert_duration {
      my ($self, %options) = @_;
  
      my $duration;
      if ($options{time_string} =~ /^P.*S$/) {
          centreon::plugins::misc::mymodule_load(output => $self->{output}, module => 'DateTime::Format::Duration::ISO8601',
                                                 error_msg => "Cannot load module 'DateTime::Format::Duration::ISO8601'.");
  
          my $format = DateTime::Format::Duration::ISO8601->new;
          my $d = $format->parse_duration($options{time_string});
          $duration = $d->minutes * 60 + $d->seconds;
      } elsif ($options{time_string} =~ /^(\d+):(\d+):(\d+)\.\d+$/) {
          centreon::plugins::misc::mymodule_load(output => $self->{output}, module => 'DateTime::Duration',
                                                 error_msg => "Cannot load module 'DateTime::Format::Duration'.");
  
          my $d = DateTime::Duration->new(hours => $1, minutes => $2, seconds => $3);
          $duration = $d->minutes * 60 + $d->seconds;
      }
  
      return $duration; 
  }
  
  sub azure_get_metrics_set_cmd {
      my ($self, %options) = @_;
  
      return if (defined($self->{option_results}->{command_options}) && $self->{option_results}->{command_options} ne '');
      
      my $cmd_options = "monitor metrics list --metrics '" . join('\' \'', @{$options{metrics}}) . "' --start-time $options{start_time} --end-time $options{end_time} " .
          "--interval $options{interval} --aggregation '" . join('\' \'', @{$options{aggregations}}) . "' --output json --resource '$options{resource}' " .
          "--resource-group '$options{resource_group}' --resource-type '$options{resource_type}' --resource-namespace '$options{resource_namespace}'";
      $cmd_options .= " --subscription '$self->{subscription}'" if (defined($self->{subscription}) && $self->{subscription} ne '');
      
      return $cmd_options; 
  }
  
  sub azure_get_metrics {
      my ($self, %options) = @_;
      
      my $results = {};
      my $start_time = DateTime->now->subtract(seconds => $options{timeframe})->iso8601.'Z';
      my $end_time = DateTime->now->iso8601.'Z';
  
      my $cmd_options = $self->azure_get_metrics_set_cmd(%options, start_time => $start_time, end_time => $end_time);
      my $raw_results = $self->execute(cmd_options => $cmd_options);
      
      foreach my $metric (@{$raw_results->{value}}) {
          my $metric_name = lc($metric->{name}->{value});
          $metric_name =~ s/ /_/g;
  
          $results->{$metric_name} = { points => 0, name => $metric->{name}->{localizedValue} };
          foreach my $timeserie (@{$metric->{timeseries}}) {
              foreach my $point (@{$timeserie->{data}}) {
                  if (defined($point->{average})) {
                      $results->{$metric_name}->{average} = 0 if (!defined($results->{$metric_name}->{average}));
                      $results->{$metric_name}->{average} += $point->{average};
                      $results->{$metric_name}->{points}++;
                  }
                  if (defined($point->{minimum})) {
                      $results->{$metric_name}->{minimum} = $point->{minimum}
                          if (!defined($results->{$metric_name}->{minimum}) || $point->{minimum} < $results->{$metric_name}->{minimum});
                  }
                  if (defined($point->{maximum})) {
                      $results->{$metric_name}->{maximum} = $point->{maximum}
                          if (!defined($results->{$metric_name}->{maximum}) || $point->{maximum} > $results->{$metric_name}->{maximum});
                  }
                  if (defined($point->{total})) {
                      $results->{$metric_name}->{total} = 0 if (!defined($results->{$metric_name}->{total}));
                      $results->{$metric_name}->{total} += $point->{total};
                      $results->{$metric_name}->{points}++;
                  }
              }
          }
          
          if (defined($results->{$metric_name}->{average})) {
              $results->{$metric_name}->{average} /= $results->{$metric_name}->{points};
          }
      }
  
      return $results, $raw_results;
  }
  
  sub azure_list_resources_set_cmd {
      my ($self, %options) = @_;
  
      return if (defined($self->{option_results}->{command_options}) && $self->{option_results}->{command_options} ne '');
      
      my $cmd_options = "resource list --output json";
      $cmd_options .= " --namespace '$options{namespace}'" if (defined($options{namespace}) && $options{namespace} ne '');
      $cmd_options .= " --resource-type '$options{resource_type}'" if (defined($options{resource_type}) && $options{resource_type} ne '');
      $cmd_options .= " --location '$options{location}'" if (defined($options{location}) && $options{location} ne '');
      $cmd_options .= " --resource-group '$options{resource_group}'" if (defined($options{resource_group}) && $options{resource_group} ne '');
      $cmd_options .= " --subscription '$self->{subscription}'" if (defined($self->{subscription}) && $self->{subscription} ne '');
      
      return $cmd_options; 
  }
  
  sub azure_list_resources {
      my ($self, %options) = @_;
  
      my $cmd_options = $self->azure_list_resources_set_cmd(%options);
      my $raw_results = $self->execute(cmd_options => $cmd_options);
      
      return $raw_results;
  }
  
  sub azure_list_vm_sizes_set_cmd {
      my ($self, %options) = @_;
  
      return if (defined($self->{option_results}->{command_options}) && $self->{option_results}->{command_options} ne '');
      
      my $cmd_options = "vm list-sizes --location '$options{location}' --output json";
      $cmd_options .= " --subscription '$self->{subscription}'" if (defined($self->{subscription}) && $self->{subscription} ne '');
          
      return $cmd_options; 
  }
  
  sub azure_list_vm_sizes {
      my ($self, %options) = @_;
  
      my $cmd_options = $self->azure_list_vm_sizes_set_cmd(%options);
      my $raw_results = $self->execute(cmd_options => $cmd_options);
      
      return $raw_results;
  }
  
  sub azure_list_vms_set_cmd {
      my ($self, %options) = @_;
  
      return if (defined($self->{option_results}->{command_options}) && $self->{option_results}->{command_options} ne '');
      
      my $cmd_options = "vm list --output json";
      $cmd_options .= " --resource-group '$options{resource_group}'" if (defined($options{resource_group}) && $options{resource_group} ne '');
      $cmd_options .= " --show-details" if (defined($options{show_details}));
      $cmd_options .= " --subscription '$self->{subscription}'" if (defined($self->{subscription}) && $self->{subscription} ne '');
  
      return $cmd_options; 
  }
  
  sub azure_list_vms {
      my ($self, %options) = @_;
  
      my $cmd_options = $self->azure_list_vms_set_cmd(%options);
      my $raw_results = $self->execute(cmd_options => $cmd_options);
      
      return $raw_results;
  }
  
  sub azure_list_groups_set_cmd {
      my ($self, %options) = @_;
  
      return if (defined($self->{option_results}->{command_options}) && $self->{option_results}->{command_options} ne '');
      
      my $cmd_options = "group list --output json";
      $cmd_options .= " --subscription '$self->{subscription}'" if (defined($self->{subscription}) && $self->{subscription} ne '');
      
      return $cmd_options; 
  }
  
  sub azure_list_groups {
      my ($self, %options) = @_;
  
      my $cmd_options = $self->azure_list_groups_set_cmd(%options);
      my $raw_results = $self->execute(cmd_options => $cmd_options);
      
      return $raw_results;
  }
  
  sub azure_list_deployments_set_cmd {
      my ($self, %options) = @_;
  
      return if (defined($self->{option_results}->{command_options}) && $self->{option_results}->{command_options} ne '');
  
      my $cmd_options = "group deployment list --resource-group '$options{resource_group}' --output json";
      $cmd_options .= " --subscription '$self->{subscription}'" if (defined($self->{subscription}) && $self->{subscription} ne '');
      
      return $cmd_options; 
  }
  
  sub azure_list_deployments {
      my ($self, %options) = @_;
  
      my $cmd_options = $self->azure_list_deployments_set_cmd(%options);
      my $raw_results = $self->execute(cmd_options => $cmd_options);
      
      return $raw_results;
  }
  
  sub azure_list_vaults_set_cmd {
      my ($self, %options) = @_;
  
      return if (defined($self->{option_results}->{command_options}) && $self->{option_results}->{command_options} ne '');
  
      my $cmd_options = "backup vault list --output json";
      $cmd_options .= " --resource-group '$options{resource_group}'" if (defined($options{resource_group}) && $options{resource_group} ne '');
      $cmd_options .= " --subscription '$self->{subscription}'" if (defined($self->{subscription}) && $self->{subscription} ne '');
      
      return $cmd_options; 
  }
  
  sub azure_list_vaults {
      my ($self, %options) = @_;
  
      my $cmd_options = $self->azure_list_vaults_set_cmd(%options);
      my $raw_results = $self->execute(cmd_options => $cmd_options);
      
      return $raw_results;
  }
  
  sub azure_list_backup_jobs_set_cmd {
      my ($self, %options) = @_;
  
      return if (defined($self->{option_results}->{command_options}) && $self->{option_results}->{command_options} ne '');
  
      my $cmd_options = "backup job list --resource-group '$options{resource_group}' --vault-name '$options{vault_name}' --output json";
      $cmd_options .= " --subscription '$self->{subscription}'" if (defined($self->{subscription}) && $self->{subscription} ne '');
      
      return $cmd_options; 
  }
  
  sub azure_list_backup_jobs {
      my ($self, %options) = @_;
  
      my $cmd_options = $self->azure_list_backup_jobs_set_cmd(%options);
      my $raw_results = $self->execute(cmd_options => $cmd_options);
      
      return $raw_results;
  }
  
  sub azure_list_backup_items_set_cmd {
      my ($self, %options) = @_;
  
      return if (defined($self->{option_results}->{command_options}) && $self->{option_results}->{command_options} ne '');
  
      my $cmd_options = "backup item list --resource-group '$options{resource_group}' --vault-name '$options{vault_name}' --output json";
      $cmd_options .= " --subscription '$self->{subscription}'" if (defined($self->{subscription}) && $self->{subscription} ne '');
      
      return $cmd_options; 
  }
  
  sub azure_list_backup_items {
      my ($self, %options) = @_;
  
      my $cmd_options = $self->azure_list_backup_items_set_cmd(%options);
      my $raw_results = $self->execute(cmd_options => $cmd_options);
      
      return $raw_results;
  }
  
  sub azure_list_expressroute_circuits_set_cmd {
      my ($self, %options) = @_;
  
      return if (defined($self->{option_results}->{command_options}) && $self->{option_results}->{command_options} ne '');
  
      my $cmd_options = "network express-route list --output json";
      $cmd_options .= " --resource-group '$options{resource_group}'" if (defined($options{resource_group}) && $options{resource_group} ne '');
      $cmd_options .= " --subscription '$self->{subscription}'" if (defined($self->{subscription}) && $self->{subscription} ne '');
      
      return $cmd_options; 
  }
  
  sub azure_list_expressroute_circuits {
      my ($self, %options) = @_;
  
      my $cmd_options = $self->azure_list_expressroute_circuits_set_cmd(%options);
      my $raw_results = $self->execute(cmd_options => $cmd_options);
      
      return $raw_results;
  }
  
  sub azure_list_vpn_gateways_set_cmd {
      my ($self, %options) = @_;
  
      return if (defined($self->{option_results}->{command_options}) && $self->{option_results}->{command_options} ne '');
  
      my $cmd_options = "network vnet-gateway list --resource-group '$options{resource_group}' --output json";
      $cmd_options .= " --subscription '$self->{subscription}'" if (defined($self->{subscription}) && $self->{subscription} ne '');
      
      return $cmd_options; 
  }
  
  sub azure_list_vpn_gateways {
      my ($self, %options) = @_;
  
      my $cmd_options = $self->azure_list_vpn_gateways_set_cmd(%options);
      my $raw_results = $self->execute(cmd_options => $cmd_options);
      
      return $raw_results;
  }
  
  sub azure_list_virtualnetworks_set_cmd {
      my ($self, %options) = @_;
  
      return if (defined($self->{option_results}->{command_options}) && $self->{option_results}->{command_options} ne '');
  
      my $cmd_options = "network vnet list --output json";
      $cmd_options .= " --resource-group '$options{resource_group}'" if (defined($options{resource_group}) && $options{resource_group} ne '');
      $cmd_options .= " --subscription '$self->{subscription}'" if (defined($self->{subscription}) && $self->{subscription} ne '');
      
      return $cmd_options; 
  }
  
  sub azure_list_virtualnetworks {
      my ($self, %options) = @_;
  
      my $cmd_options = $self->azure_list_virtualnetworks_set_cmd(%options);
      my $raw_results = $self->execute(cmd_options => $cmd_options);
      
      return $raw_results;
  }
  
  sub azure_list_vnet_peerings_set_cmd {
      my ($self, %options) = @_;
  
      return if (defined($self->{option_results}->{command_options}) && $self->{option_results}->{command_options} ne '');
  
      my $cmd_options = "network vnet peering list --resource-group '$options{resource_group}' --vnet-name '$options{vnet_name}' --output json";
      $cmd_options .= " --subscription '$self->{subscription}'" if (defined($self->{subscription}) && $self->{subscription} ne '');
      
      return $cmd_options; 
  }
  
  sub azure_list_vnet_peerings {
      my ($self, %options) = @_;
  
      my $cmd_options = $self->azure_list_vnet_peerings_set_cmd(%options);
      my $raw_results = $self->execute(cmd_options => $cmd_options);
      
      return $raw_results;
  }
  
  sub azure_list_sqlservers_set_cmd {
      my ($self, %options) = @_;
  
      return if (defined($self->{option_results}->{command_options}) && $self->{option_results}->{command_options} ne '');
  
      my $cmd_options = "sql server list --output json";
      $cmd_options .= " --resource-group '$options{resource_group}'" if (defined($options{resource_group}) && $options{resource_group} ne '');
      $cmd_options .= " --subscription '$self->{subscription}'" if (defined($self->{subscription}) && $self->{subscription} ne '');
      
      return $cmd_options; 
  }
  
  sub azure_list_sqlservers {
      my ($self, %options) = @_;
  
      my $cmd_options = $self->azure_list_sqlservers_set_cmd(%options);
      my $raw_results = $self->execute(cmd_options => $cmd_options);
      
      return $raw_results;
  }
  
  sub azure_list_sqldatabases_set_cmd {
      my ($self, %options) = @_;
  
      return if (defined($self->{option_results}->{command_options}) && $self->{option_results}->{command_options} ne '');
  
      my $cmd_options = "sql db list --resource-group '$options{resource_group}' --server '$options{server}' --output json";
      $cmd_options .= " --subscription '$self->{subscription}'" if (defined($self->{subscription}) && $self->{subscription} ne '');
      
      return $cmd_options; 
  }
  
  sub azure_list_sqldatabases {
      my ($self, %options) = @_;
  
      my $cmd_options = $self->azure_list_sqldatabases_set_cmd(%options);
      my $raw_results = $self->execute(cmd_options => $cmd_options);
      
      return $raw_results;
  }
  
  1;
  
  
  =head1 NAME
  
  Microsoft Azure CLI
  
  =head1 AZCLI OPTIONS
  
  Microsoft Azure CLI 2.0
  
  To install the Azure CLI 2.0 in a CentOS/RedHat environment :
  
  (As root)
  
  # rpm --import https://packages.microsoft.com/keys/microsoft.asc
  
  # sh -c 'echo -e "[azure-cli]\nname=Azure CLI\nbaseurl=https://packages.microsoft.com/yumrepos/azure-cli\nenabled=1\ngpgcheck=1\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc" > /etc/yum.repos.d/azure-cli.repo'
  
  # yum install azure-cli
  
  (As centreon-engine)
  
  # az login
  
  Go to https://aka.ms/devicelogin and enter the code given by the last command.
  
  For futher informations, visit https://docs.microsoft.com/en-us/cli/azure/install-azure-cli?view=azure-cli-latest.
  
  =over 8
  
  =item B<--subscription>
  
  Set Azure subscription (Required if logged to several subscriptions).
  
  =item B<--timeframe>
  
  Set timeframe in seconds (i.e. 3600 to check last hour).
  
  =item B<--interval>
  
  Set interval of the metric query (Can be : PT1M, PT5M, PT15M, PT30M, PT1H, PT6H, PT12H, PT24H).
  
  =item B<--aggregation>
  
  Set monitor aggregation (Can be multiple, Can be: 'minimum', 'maximum', 'average', 'total').
  
  =item B<--zeroed>
  
  Set metrics value to 0 if none. Usefull when Monitor
  does not return value when not defined.
  
  =item B<--timeout>
  
  Set timeout in seconds (Default: 50).
  
  =item B<--sudo>
  
  Use 'sudo' to execute the command.
  
  =item B<--command>
  
  Command to get information (Default: 'az').
  Can be changed if you have output in a file.
  
  =item B<--command-path>
  
  Command path (Default: none).
  
  =item B<--command-options>
  
  Command options (Default: none).
  
  =item B<--proxyurl>
  
  Proxy URL if any
  
  =back
  
  =head1 DESCRIPTION
  
  B<custom>.
  
  =cut
CLOUD_AZURE_CUSTOM_AZCLI

$fatpacked{"cloud/azure/management/monitor/mode/discovery.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'CLOUD_AZURE_MANAGEMENT_MONITOR_MODE_DISCOVERY';
  #
  # Copyright 2019 Centreon (http://www.centreon.com/)
  #
  # Centreon is a full-fledged industry-strength solution that meets
  # the needs in IT infrastructure and application monitoring for
  # service performance.
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  #
  
  package cloud::azure::management::monitor::mode::discovery;
  
  use base qw(centreon::plugins::mode);
  
  use strict;
  use warnings;
  use JSON::XS;
  
  sub new {
      my ($class, %options) = @_;
      my $self = $class->SUPER::new(package => __PACKAGE__, %options);
      bless $self, $class;
      
      $options{options}->add_options(arguments => {
          "namespace:s"           => { name => 'namespace' },
          "type:s"                => { name => 'type' },
          "resource-group:s"      => { name => 'resource_group' },
          "location:s"            => { name => 'location' },
          "prettify"              => { name => 'prettify' },
      });
  
      return $self;
  }
  
  sub check_options {
      my ($self, %options) = @_;
      $self->SUPER::init(%options);
  }
  
  sub run {
      my ($self, %options) = @_;
  
      my @disco_data;
      my $disco_stats;
  
      $disco_stats->{start_time} = time();
  
      my $resources = $options{custom}->azure_list_resources(
          namespace => $self->{option_results}->{namespace},
          resource_type => $self->{option_results}->{type},
          location => $self->{option_results}->{location},
          resource_group => $self->{option_results}->{resource_group}
      );
  
      $disco_stats->{end_time} = time();
      $disco_stats->{duration} = $disco_stats->{end_time} - $disco_stats->{start_time};
  
      foreach my $resource (@{$resources}) {
          my $resource_group = '';
          $resource_group = $resource->{resourceGroup} if (defined($resource->{resourceGroup}));
          $resource_group = $1 if ($resource_group eq '' && defined($resource->{id}) && $resource->{id} =~ /resourceGroups\/(.*)\/providers/);
          $resource->{resourceGroup} = $resource_group;
  
          foreach my $entry (keys %{$resource}) {
              next if (ref($resource->{$entry}) ne "HASH");
              my @array;
              foreach my $key (keys %{$resource->{$entry}}) {
                  push @array, { key => $key, value => $resource->{$entry}->{$key} };
              }
              $resource->{$entry} = \@array;
          }
          push @disco_data, $resource;
      }
  
      $disco_stats->{discovered_items} = @disco_data;
      $disco_stats->{results} = \@disco_data;
  
      my $encoded_data;
      eval {
          if (defined($self->{option_results}->{prettify})) {
              $encoded_data = JSON::XS->new->utf8->pretty->encode($disco_stats);
          } else {
              $encoded_data = JSON::XS->new->utf8->encode($disco_stats);
          }
      };
      if ($@) {
          $encoded_data = '{"code":"encode_error","message":"Cannot encode discovered data into JSON format"}';
      }
      
      $self->{output}->output_add(short_msg => $encoded_data);
      $self->{output}->display(nolabel => 1, force_ignore_perfdata => 1);
      $self->{output}->exit();
  }
  
  1;
  
  
  =head1 MODE
  
  Resources discovery.
  
  =over 8
  
  =item B<--namespace>
  
  Specify resources namespace.
  
  =item B<--type>
  
  Specify resources type.
  
  =item B<--resource-group>
  
  Specify resources resource group.
  
  =item B<--location>
  
  Specify resources location.
  
  =item B<--prettify>
  
  Prettify JSON output.
  
  =back
  
  =cut
CLOUD_AZURE_MANAGEMENT_MONITOR_MODE_DISCOVERY

$fatpacked{"cloud/azure/management/monitor/mode/getmetrics.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'CLOUD_AZURE_MANAGEMENT_MONITOR_MODE_GETMETRICS';
  #
  # Copyright 2019 Centreon (http://www.centreon.com/)
  #
  # Centreon is a full-fledged industry-strength solution that meets
  # the needs in IT infrastructure and application monitoring for
  # service performance.
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  #
  
  package cloud::azure::management::monitor::mode::getmetrics;
  
  use base qw(centreon::plugins::templates::counter);
  
  use strict;
  use warnings;
  use Data::Dumper;
  
  sub custom_metric_perfdata {
      my ($self, %options) = @_;
  
      $self->{output}->perfdata_add(label => $self->{result_values}->{perf_label},
                                    value => $self->{result_values}->{value},
                                    warning => $self->{perfdata}->get_perfdata_for_output(label => 'warning-metric'),
                                    critical => $self->{perfdata}->get_perfdata_for_output(label => 'critical-metric'),
                                   );
  
  }
  
  sub custom_metric_threshold {
      my ($self, %options) = @_;
  
      my $exit = $self->{perfdata}->threshold_check(value => $self->{result_values}->{value},
                                                    threshold => [ { label => 'critical-metric', exit_litteral => 'critical' },
                                                                   { label => 'warning-metric', exit_litteral => 'warning' } ]);
      return $exit;
  }
  
  sub custom_metric_output {
      my ($self, %options) = @_;
  
      my $msg = "Metric '" . $self->{result_values}->{label}  . "' of resource '" . $self->{result_values}->{display}  . "' value is " . $self->{result_values}->{value};
      return $msg;
  }
  
  sub custom_metric_calc {
      my ($self, %options) = @_;
  
      $self->{result_values}->{value} = $options{new_datas}->{$self->{instance} . '_value'};
      $self->{result_values}->{label} = $options{new_datas}->{$self->{instance} . '_label'};
      $self->{result_values}->{aggregation} = $options{new_datas}->{$self->{instance} . '_aggregation'};
      $self->{result_values}->{perf_label} = $options{new_datas}->{$self->{instance} . '_perf_label'};
      $self->{result_values}->{display} = $options{new_datas}->{$self->{instance} . '_display'};
      return 0;
  }
  
  sub set_counters {
      my ($self, %options) = @_;
      
      $self->{maps_counters_type} = [
          { name => 'metrics', type => 0 },
      ];
      
      $self->{maps_counters}->{metrics} = [
          { label => 'metric', set => {
                  key_values => [ { name => 'value' }, { name => 'label' }, { name => 'aggregation' },
                      { name => 'perf_label' }, { name => 'display' } ],
                  closure_custom_calc => $self->can('custom_metric_calc'),
                  closure_custom_output => $self->can('custom_metric_output'),
                  closure_custom_perfdata => $self->can('custom_metric_perfdata'),
                  closure_custom_threshold_check => $self->can('custom_metric_threshold'),
              }
          }
      ];    
  }
  
  sub new {
      my ($class, %options) = @_;
      my $self = $class->SUPER::new(package => __PACKAGE__, %options);
      bless $self, $class;
      
      $options{options}->add_options(arguments =>
                                  {
                                      "resource:s"            => { name => 'resource' },
                                      "resource-group:s"      => { name => 'resource_group' },
                                      "resource-type:s"       => { name => 'resource_type' },
                                      "resource-namespace:s"  => { name => 'resource_namespace' },
                                      "metric:s@"             => { name => 'metric' },
                                  });
      
      return $self;
  }
  
  sub check_options {
      my ($self, %options) = @_;
      $self->SUPER::check_options(%options);
  
      if (!defined($self->{option_results}->{resource})) {
          $self->{output}->add_option_msg(short_msg => "Need to specify either --resource <name> with --resource-group and --resource-type options or --resource <id>.");
          $self->{output}->option_exit();
      }
  
      $self->{az_resource} = $self->{option_results}->{resource};
  
      if ($self->{az_resource} =~ /^\/subscriptions\/.*\/resourceGroups\/.*\/providers\/Microsoft\..*\/.*\/.*$/) {
          $self->{az_resource_group} = '';
          $self->{az_resource_type} = '';
          $self->{az_resource_namespace} = '';            
      } else {
          $self->{az_resource_group} = $self->{option_results}->{resource_group};
          $self->{az_resource_type} = $self->{option_results}->{resource_type};
          $self->{az_resource_namespace} = $self->{option_results}->{resource_namespace};
      }
      
      $self->{az_metrics} = [];
      if (defined($self->{option_results}->{metric})) {
          $self->{az_metrics} = $self->{option_results}->{metric};
      }
      if (scalar(@{$self->{az_metrics}}) <= 0) {
          $self->{output}->add_option_msg(short_msg => "Need to specify --metric option.");
          $self->{output}->option_exit();
      }
      
      $self->{az_timeframe} = defined($self->{option_results}->{timeframe}) ? $self->{option_results}->{timeframe} : 600;
      $self->{az_interval} = defined($self->{option_results}->{interval}) ? $self->{option_results}->{interval} : "PT1M";
      
      $self->{az_aggregation} = ['Average'];
      if (defined($self->{option_results}->{aggregation})) {
          $self->{az_aggregation} = [];
          foreach my $aggregation (@{$self->{option_results}->{aggregation}}) {
              if ($aggregation ne '') {
                  push @{$self->{az_aggregation}}, ucfirst(lc($aggregation));
              }
          }
      }
  }
  
  sub manage_selection {
      my ($self, %options) = @_;
      
      my ($results, $raw_results) = $options{custom}->azure_get_metrics(
          resource => $self->{az_resource},
          resource_group => $self->{az_resource_group},
          resource_type => $self->{az_resource_type},
          resource_namespace => $self->{az_resource_namespace},
          metrics => $self->{az_metrics},
          aggregations => $self->{az_aggregation},
          timeframe => $self->{az_timeframe},
          interval => $self->{az_interval},
      );
      
      $self->{metrics} = {};
      foreach my $label (keys %{$results}) {
          foreach my $aggregation (('minimum', 'maximum', 'average', 'total')) {
              next if (!defined($results->{$label}->{$aggregation}));
       
              $self->{metrics} = {
                  display => $self->{az_resource},
                  label => $label,
                  aggregation => $aggregation,
                  value => $results->{$label}->{$aggregation},
                  perf_label => $label . '_' . $aggregation,
              };
          }
      }
  
      $self->{output}->output_add(long_msg => sprintf("Raw data:\n%s", Dumper($raw_results)), debug => 1);
  }
  
  1;
  
  
  =head1 MODE
  
  Check Azure metrics.
  
  Examples:
  perl centreon_plugins.pl --plugin=cloud::azure::management::monitor::plugin --custommode=azcli --mode=get-metrics
  --resource=MYSQLINSTANCE --resource-group=MYHOSTGROUP --resource-namespace='Microsoft.Compute' --resource-type='virtualMachines'
  --metric='Percentage CPU' --aggregation=average –-interval=PT1M --timeframe=600 --warning-metric= --critical-metric=
  
  perl centreon_plugins.pl --plugin=cloud::azure::management::monitor::plugin --custommode=azcli --mode=get-metrics
  --resource='/subscriptions/d29fe431/resourceGroups/MYHOSTGROUP/providers/Microsoft.Compute/virtualMachines/MYSQLINSTANCE'
  --metric='Percentage CPU' --aggregation=average –-interval=PT1M --timeframe=600 --warning-metric= --critical-metric=
  
  =over 8
  
  =item B<--resource>
  
  Set resource name or id (Required).
  
  =item B<--resource-group>
  
  Set resource group (Required if resource's name is used).
  
  =item B<--resource-namespace>
  
  Set resource namespace (Required if resource's name is used).
  
  =item B<--resource-type>
  
  Set resource type (Required if resource's name is used).
  
  =item B<--metric>
  
  Set monitor metrics (Required).
  
  =item B<--warning-metric>
  
  Threshold warning.
  
  =item B<--critical-metric>
  
  Threshold critical.
  
  =back
  
  =cut
CLOUD_AZURE_MANAGEMENT_MONITOR_MODE_GETMETRICS

$fatpacked{"cloud/azure/management/monitor/plugin.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'CLOUD_AZURE_MANAGEMENT_MONITOR_PLUGIN';
  #
  # Copyright 2019 Centreon (http://www.centreon.com/)
  #
  # Centreon is a full-fledged industry-strength solution that meets
  # the needs in IT infrastructure and application monitoring for
  # service performance.
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  #
  
  package cloud::azure::management::monitor::plugin;
  
  use strict;
  use warnings;
  use base qw(centreon::plugins::script_custom);
  
  sub new {
      my ($class, %options) = @_;
      my $self = $class->SUPER::new(package => __PACKAGE__, %options);
      bless $self, $class;
  
      $self->{version} = '1.0';
      %{$self->{modes}} = (
                              'discovery'         => 'cloud::azure::management::monitor::mode::discovery',
                              'get-metrics'       => 'cloud::azure::management::monitor::mode::getmetrics',
                          );
                          
      $self->{custom_modes}{azcli} = 'cloud::azure::custom::azcli';
      $self->{custom_modes}{api} = 'cloud::azure::custom::api';
      return $self;
  }
  
  sub init {
      my ($self, %options) = @_;
  
      $self->{options}->add_options(arguments =>
                                      {
                                          'api-version:s'  => { name => 'api_version', default => '2018-01-01' },
                                      });
  
      $self->SUPER::init(%options);
  }
  
  1;
  
  
  =head1 PLUGIN DESCRIPTION
  
  Check Microsoft Azure monitor service using API.
  
  =cut
CLOUD_AZURE_MANAGEMENT_MONITOR_PLUGIN

s/^  //mg for values %fatpacked;

my $class = 'FatPacked::'.(0+\%fatpacked);
no strict 'refs';
*{"${class}::files"} = sub { keys %{$_[0]} };

if ($] < 5.008) {
  *{"${class}::INC"} = sub {
    if (my $fat = $_[0]{$_[1]}) {
      my $pos = 0;
      my $last = length $fat;
      return (sub {
        return 0 if $pos == $last;
        my $next = (1 + index $fat, "\n", $pos) || $last;
        $_ .= substr $fat, $pos, $next - $pos;
        $pos = $next;
        return 1;
      });
    }
  };
}

else {
  *{"${class}::INC"} = sub {
    if (my $fat = $_[0]{$_[1]}) {
      open my $fh, '<', \$fat
        or die "FatPacker error loading $_[1] (could be a perl installation issue?)";
      return $fh;
    }
    return;
  };
}

unshift @INC, bless \%fatpacked, $class;
  } # END OF FATPACK CODE

#
# Copyright 2019 Centreon (http://www.centreon.com/)
#
# Centreon is a full-fledged industry-strength solution that meets
# the needs in IT infrastructure and application monitoring for
# service performance.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

use strict;
use warnings;
# Not perl embedded compliant at all
use FindBin;
use lib "$FindBin::Bin";
# use lib '/usr/lib/nagios/plugins/';

use centreon::plugins::script;

centreon::plugins::script->new()->run();
