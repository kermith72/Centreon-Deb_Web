'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports['default'] = className;
exports.PropType = PropType;
var CLASS_SEPARATOR = '-';

var flattenArray = function flattenArray(list) {
  return list.reduce(function (reduced, value) {
    return reduced.concat(Array.isArray(value) ? flattenArray(value) : value);
  }, []);
};

function flattenClassNames(classNames) {
  var prefix = arguments.length <= 1 || arguments[1] === undefined ? '' : arguments[1];

  return flattenArray(classNames).reduce(function (reduced, className) {
    var type = typeof className;

    if (type === 'string' || type === 'number') {
      reduced.push(prefix + '' + className);
      return reduced;
    }

    if (type === 'object' && className !== null) {
      if (typeof className.toClassList === 'function') {
        return reduced.concat(className.toClassList());
      }

      if (Array.isArray(className)) {
        return reduced.concat(flattenClassNames(className, prefix));
      }

      if (className !== null) {
        return reduced.concat(flattenObject(className, prefix));
      }
    }

    return reduced;
  }, []);
};

function flattenObject(obj) {
  var prefix = arguments.length <= 1 || arguments[1] === undefined ? '' : arguments[1];

  var classNames = [];

  for (var key in obj) {
    var value = obj[key];

    if (Array.isArray(value)) {
      var flattened = flattenClassNames(value, prefix + key + CLASS_SEPARATOR);

      if (flattened.length) {
        classNames = classNames.concat(flattened);
      }
    } else if (typeof value === 'object') {
      var nested = flattenObject(value, prefix + key + CLASS_SEPARATOR);

      if (nested.length) {
        classNames = classNames.concat(nested);
      }
    } else if (value) {
      // any truthy value
      classNames.push(prefix + key + (typeof value !== 'boolean' ? CLASS_SEPARATOR + value : ''));
    }
  }

  return classNames;
};

function className() {
  var map = {};
  var array = [];

  var joined = undefined;
  var instance = undefined;

  var add = function add() {
    for (var _len2 = arguments.length, newClassNames = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      newClassNames[_key2] = arguments[_key2];
    }

    var flatten = flattenClassNames(newClassNames);

    for (var index = 0; index < flatten.length; index++) {
      if (typeof map[flatten[index]] === 'undefined') {
        return className(array.slice(0).concat(flatten));
      }
    }

    return instance;
  };

  var has = function has(className) {
    return typeof map[className] !== 'undefined';
  };
  var toClassList = function toClassList() {
    return array;
  };

  var toString = function toString() {
    if (typeof joined !== 'string') {
      joined = array.join(' ');
    }

    return joined;
  };

  for (var _len = arguments.length, initialClassNames = Array(_len), _key = 0; _key < _len; _key++) {
    initialClassNames[_key] = arguments[_key];
  }

  var classNames = flattenClassNames(initialClassNames);

  if (classNames.length) {
    for (var index = 0; index < classNames.length; index++) {
      var _className = classNames[index];

      if (typeof map[_className] === 'undefined') {
        map[_className] = true;
        array.push(_className);
      }
    }
  }

  instance = { add: add, has: has, toClassList: toClassList, toString: toString };

  return instance;
}

function PropType(props, propName) {
  var type = typeof props[propName];

  if (type !== 'undefined' && type !== 'string' && type !== 'object') {
    return new Error('Invalid ClassNameValue provided.');
  }
}