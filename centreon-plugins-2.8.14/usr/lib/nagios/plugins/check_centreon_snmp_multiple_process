#! /usr/bin/perl -w
################################################################################
# Copyright 2004-2013 MERETHIS
# Centreon is developped by : Julien Mathis and Romain Le Merlus under
# GPL Licence 2.0.
# 
# This program is free software; you can redistribute it and/or modify it under 
# the terms of the GNU General Public License as published by the Free Software 
# Foundation ; either version 2 of the License.
# 
# This program is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
# PARTICULAR PURPOSE. See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License along with 
# this program; if not, see <http://www.gnu.org/licenses>.
# 
# Linking this program statically or dynamically with other modules is making a 
# combined work based on this program. Thus, the terms and conditions of the GNU 
# General Public License cover the whole combination.
# 
# As a special exception, the copyright holders of this program give MERETHIS 
# permission to link this program with independent modules to produce an executable, 
# regardless of the license terms of these independent modules, and to copy and 
# distribute the resulting executable under terms of MERETHIS choice, provided that 
# MERETHIS also meet, for each linked independent module, the terms  and conditions 
# of the license of that module. An independent module is a module which is not 
# derived from this program. If you modify this program, you may extend this 
# exception to your version of the program, but you are not obliged to do so. If you
# do not wish to do so, delete this exception statement from your version.
# 
# For more information : contact@centreon.com
# 
# SVN : $URL$
# SVN : $Id$
#
####################################################################################
#
# Script init
#

use strict;
require "/usr/lib/nagios/plugins/Centreon/SNMP/Utils.pm";

use vars qw($PROGNAME);
use Getopt::Long;
use vars qw($opt_V $opt_d $opt_h $opt_p $result @result %process_list);

my %ERRORS = ('OK' => 0, 'WARNING' => 1, 'CRITICAL' => 2, 'UNKNOWN' => 3);

my %centreon = Centreon::SNMP::Utils::load_oids($ERRORS{'UNKNOWN'}, "/usr/lib/nagios/plugins/centreon.conf");

# Plugin var init

my($proc, $proc_run);

$PROGNAME = $0;
sub print_help ();
sub print_usage ();

my %OPTION = (
    "host" => undef,
    "snmp-community" => "public", "snmp-version" => 1, "snmp-port" => 161, 
    "snmp-auth-key" => undef, "snmp-auth-user" => undef, "snmp-auth-password" => undef, "snmp-auth-protocol" => "MD5",
    "snmp-priv-key" => undef, "snmp-priv-password" => undef, "snmp-priv-protocol" => "DES",
    "maxrepetitions" => undef, "snmptimeout" => undef,
    "64-bits" => undef,
);

Getopt::Long::Configure('bundling');
GetOptions
    (
    "H|hostname|host=s"         => \$OPTION{'host'},
    "C|community=s"             => \$OPTION{'snmp-community'},
    "v|snmp|snmp-version=s"     => \$OPTION{'snmp-version'},
    "P|snmpport|snmp-port=i"    => \$OPTION{'snmp-port'},
    "u|username=s"              => \$OPTION{'snmp-auth-user'},
    "authpassword|password=s"   => \$OPTION{'snmp-auth-password'},
    "k|authkey=s"               => \$OPTION{'snmp-auth-key'},
    "authprotocol=s"            => \$OPTION{'snmp-auth-protocol'},
    "privpassword=s"            => \$OPTION{'snmp-priv-password'},
    "privkey=s"                 => \$OPTION{'snmp-priv-key'},
    "privprotocol=s"            => \$OPTION{'snmp-priv-protocol'},
    "maxrepetitions=s"          => \$OPTION{'maxrepetitions'},
    "snmp-timeout=i"            => \$OPTION{'snmptimeout'},
    "64-bits"                   => \$OPTION{'64-bits'},

    "h"    => \$opt_h, "help"      => \$opt_h,
    "V"    => \$opt_V, "version"   => \$opt_V,
    "p=s"  => \$opt_p, "process=s" => \$opt_p,
    "d"    => \$opt_d, "debug"     => \$opt_d);

if ($opt_V) {
    print_revision($PROGNAME,'$Revision: 1.2 $');
    exit $ERRORS{'OK'};
}

if ($opt_h) {
    print_help();
    exit $ERRORS{'OK'};
}

my ($session_params) = Centreon::SNMP::Utils::check_snmp_options($ERRORS{'UNKNOWN'}, \%OPTION);

my $process;
if(!$opt_p) {
    print_usage();
    exit $ERRORS{'OK'};
} elsif ($opt_p !~ /([-.A-Za-z0-9\,]+)/){
    print_usage();
    exit $ERRORS{'OK'};
}
$process = $opt_p;
my @process_temp = split /\,/,$opt_p;
my (@proc,@status,@parameters);
foreach (@process_temp) {
    my @tab = split /\:/,$_;
    $status[scalar(@proc)] = 0;
    $proc[scalar(@proc)] = $tab[0];
    $parameters[scalar(@parameters)] = $tab[1];
} 
my $name = $0;

# Plugin snmp requests
my $OID_SW_RunName = $centreon{MIB2}{SW_RUNNAME};
my $OID_SW_RunParameters = $centreon{MIB2}{SW_RUNPARAMETERS};
my $OID_SW_RunIndex =$centreon{MIB2}{SW_RUNINDEX};
my $OID_SW_RunStatus =$centreon{MIB2}{SW_RUNSTATUS};

my $session = Centreon::SNMP::Utils::connection($ERRORS{'UNKNOWN'}, $session_params);
$result = Centreon::SNMP::Utils::get_snmp_table($OID_SW_RunName, $session, $ERRORS{'UNKNOWN'}, \%OPTION);

my %defined_status = (0=>"NotPresent", 1=>"Running", 2=> "Runnable", 3=> "NotRunnable", 4=>"Invalid");
foreach my $key (oid_lex_sort(keys %$result)) {
    my $found = 0;
    for(my $i = 0; $i < scalar(@proc) && !$found; $i++) {
        my @oid_list = split (/\./,$key);
        my $value = pop(@oid_list);
        if (lc $proc[$i] eq lc $result->{$key}) {
            my $result2 = Centreon::SNMP::Utils::get_snmp_leef([$OID_SW_RunStatus . "." . $value], $session, $ERRORS{'UNKNOWN'});
            my $temp_status_val = $result2->{$OID_SW_RunStatus . "." . $value};
            if (defined ($parameters[$i]) && $parameters[$i] ne "") {
                $result2 = Centreon::SNMP::Utils::get_snmp_leef([$OID_SW_RunParameters . "." . $value], $session, $ERRORS{'UNKNOWN'});
                if (lc $parameters[$i] eq lc $result2->{$OID_SW_RunParameters . "." . $value}) {
                    $status[$i] = $temp_status_val;
                    $found = 1;
                }
            } else {
                $status[$i] = $temp_status_val;
                $found = 1;
            } 
        }
    }
}

my $final_status = "OK";
my $msg = "";
my $notPresent = "";
my $critical ="";
my $OK = "";
# Plugin return code
my $unKnown = "";
#$msg =~ s/\-$//;
for (my $i = 0; $i < scalar(@proc); $i++) {
    if (defined($status[$i])) {
        if ($status[$i] != 1 && $status[$i] != 2) {
            if ($status[$i] == 0) {
                $final_status = "CRITICAL";
                $notPresent .= $proc[$i]." - ";
            }
            if ($status[$i]) {
                $final_status = "CRITICAL";
                $critical .= $proc[$i]." - ";
            }
        } else {
            $OK .= $proc[$i]." - ";
        }
    } else {
        $unKnown .= $proc[$i]." - ";
    }
}
if ($critical ne "") {
    $msg = "CRITICAL : $critical";
}
if ($notPresent ne "") {
    $msg .= "NOT-PRESENT : $notPresent";
}
if ($OK ne "" && $opt_d) {
    $msg .= "OK :  $OK";
}
if ($msg eq "" ) {
    $msg = "All process OK";
}
$msg =~ s/\- $//;
print "$msg\n";
exit $ERRORS{$final_status};

sub print_usage () {
    print "\nUsage:\n";
    print "$PROGNAME\n";
    print "   -H (--hostname)   Hostname to query (required)\n";
    print "   -C (--community)  SNMP read community (defaults to public)\n";
    print "                     used with SNMP v1 and v2c\n";
    print "   -v (--snmp-version)  1 for SNMP v1 (default)\n";
    print "                        2 for SNMP v2c\n";
    print "                        3 for SNMP v3\n";
    print "   -P (--snmp-port)  SNMP port (default: 161)\n";
    print "   -k (--authkey)    snmp V3 key\n";
    print "   -u (--username)   snmp V3 username \n";
    print "   --password        snmp V3 password\n";
    print "   --authprotocol    protocol MD5/SHA  (v3)\n";
    print "   --privprotocol    encryption system (DES/AES)(v3) \n";
    print "   --privpassword    passphrase (v3) \n";
    print "   --64-bits         Use 64 bits OID\n";
    print "   --maxrepetitions  To use when you have the error: 'Message size exceeded buffer maxMsgSize'\n";
    print "                     Work only with SNMP v2c and v3 (Example: --maxrepetitions=1)\n";
    print "   --snmp-timeout    SNMP Timeout\n";
    print "   -p (--process)    Set the process name ex: by default smbd\n";
    print "   -V (--version)    Plugin version\n";
    print "   -h (--help)       usage help\n";
}
sub print_help () {
    print "##############################################\n";
    print "#    Copyright (c) 2004-2013 Centreon        #\n";
    print "#    Bugs to http://forge.centreon.com/      #\n";
    print "##############################################\n";
    print_usage();
    print "\n";
}
